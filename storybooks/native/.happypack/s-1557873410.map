{"version":3,"sources":["node_modules/react-native/Libraries/Network/RCTNetworking.android.js"],"names":["MissingNativeEventEmitterShim","require","NativeEventEmitter","RCTNetworkingNative","Networking","convertRequestBody","convertHeadersMapToArray","headers","headerArray","name","push","_requestId","generateRequestId","RCTNetworking","isAvailable","method","trackingName","url","data","responseType","incrementalUpdates","timeout","callback","withCredentials","body","formData","map","part","requestId","sendRequest","abortRequest","clearCookies","__DEV__","MissingNativeRCTNetworkingShim","throwMissingNativeModule","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;;;AAIA,GAAMA,+BAAgCC,QAAQ,+BAAR,CAAtC;AACA,GAAMC,oBAAqBD,QAAQ,oBAAR,CAA3B;AACA,GAAME,qBAAsBF,QAAQ,eAAR,EAAyBG,UAArD;AACA,GAAMC,oBAAqBJ,QAAQ,oBAAR,CAA3B;;;;;;;;AAQA,QAASK,yBAAT,CAAkCC,OAAlC,CAAkE;AAChE,GAAMC,aAAc,EAApB;AACA,IAAK,GAAMC,KAAX,GAAmBF,QAAnB,CAA4B;AAC1BC,YAAYE,IAAZ,CAAiB,CAACD,IAAD,CAAOF,QAAQE,IAAR,CAAP,CAAjB;AACD;AACD,MAAOD,YAAP;AACD;;AAED,GAAIG,YAAa,CAAjB;AACA,QAASC,kBAAT,EAAqC;AACnC,MAAOD,aAAP;AACD,C;;;;;;AAMKE,a;;;;AAIJ,wBAAc;AACNV,mBADM,SAFdW,WAEc,CAFS,IAET;AAEb,C;;;AAGCC,M;AACAC,Y;AACAC,G;AACAV,O;AACAW,I;AACAC,Y;AACAC,kB;AACAC,O;AACAC,Q;AACAC,e;AACA;AACA,GAAMC,MAAOnB,mBAAmBa,IAAnB,CAAb;AACA,GAAIM,MAAQA,KAAKC,QAAjB,CAA2B;AACzBD,KAAKC,QAAL,CAAgBD,KAAKC,QAAL,CAAcC,GAAd,CAAkB,SAACC,IAAD;AAC7BA,IAD6B;AAEhCpB,QAASD,yBAAyBqB,KAAKpB,OAA9B,CAFuB,IAAlB,CAAhB;;AAID;AACD,GAAMqB,WAAYhB,mBAAlB;AACAT,oBAAoB0B,WAApB;AACEd,MADF;AAEEE,GAFF;AAGEW,SAHF;AAIEtB,yBAAyBC,OAAzB,CAJF;AAKMiB,IALN,EAKYR,yBALZ;AAMEG,YANF;AAOEC,kBAPF;AAQEC,OARF;AASEE,eATF;;AAWAD,SAASM,SAAT;AACD,C;;AAEYA,S,CAAmB;AAC9BzB,oBAAoB2B,YAApB,CAAiCF,SAAjC;AACD,C;;AAEYN,Q,CAAoC;AAC/CnB,oBAAoB4B,YAApB,CAAiCT,QAAjC;AACD,C,2BAhDyBpB,kB;;;AAmD5B,GAAI8B,SAAW,CAAC7B,mBAAhB,CAAqC;AAC7B8B,8BAD6B;AAEjC,yCAAc;AACN,eADM,CACW,YADX;AAEb,CAJgC;;AAMA;AAC/B,KAAKC,wBAAL;AACD,CARgC;;AAUC;AAChC,KAAKA,wBAAL;AACD,CAZgC;;AAcC;AAChC,KAAKA,wBAAL;AACD,CAhBgC,4CACUlC,6BADV;;;;;;AAsBnCa,cAAgB,GAAIoB,+BAAJ,EAAhB;AACD,CAvBD,IAuBO;AACLpB,cAAgB,GAAIA,cAAJ,EAAhB;AACD;;AAEDsB,OAAOC,OAAP,CAAiBvB,aAAjB,C,0GAxGMV,mB,8KASGG,wB,mLAQLK,U,qKACKC,iB,4KAQHC,a","file":"RCTNetworking.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTNetworking\n * @flow\n */\n'use strict';\n\n// Do not require the native RCTNetworking module directly! Use this wrapper module instead.\n// It will add the necessary requestId, so that you don't have to generate it yourself.\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTNetworkingNative = require('NativeModules').Networking;\nconst convertRequestBody = require('convertRequestBody');\n\nimport type {RequestBody} from 'convertRequestBody';\n\ntype Header = [string, string];\n\n// Convert FormData headers to arrays, which are easier to consume in\n// native on Android.\nfunction convertHeadersMapToArray(headers: Object): Array<Header> {\n  const headerArray = [];\n  for (const name in headers) {\n    headerArray.push([name, headers[name]]);\n  }\n  return headerArray;\n}\n\nlet _requestId = 1;\nfunction generateRequestId(): number {\n  return _requestId++;\n}\n\n/**\n * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique\n * requestId to each network request that can be used to abort that request later on.\n */\nclass RCTNetworking extends NativeEventEmitter {\n\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTNetworkingNative);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => any,\n    withCredentials: boolean\n  ) {\n    const body = convertRequestBody(data);\n    if (body && body.formData) {\n      body.formData = body.formData.map((part) => ({\n        ...part,\n        headers: convertHeadersMapToArray(part.headers),\n      }));\n    }\n    const requestId = generateRequestId();\n    RCTNetworkingNative.sendRequest(\n      method,\n      url,\n      requestId,\n      convertHeadersMapToArray(headers),\n      {...body, trackingName},\n      responseType,\n      incrementalUpdates,\n      timeout,\n      withCredentials\n    );\n    callback(requestId);\n  }\n\n  abortRequest(requestId: number) {\n    RCTNetworkingNative.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    RCTNetworkingNative.clearCookies(callback);\n  }\n}\n\nif (__DEV__ && !RCTNetworkingNative) {\n  class MissingNativeRCTNetworkingShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTNetworking', 'Networking');\n    }\n\n    sendRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    abortRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    clearCookies(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTNetworkingNative` module. If you don't include it,\n  // `RCTNetworking.isAvailable` will return `false`, and any method calls will throw.\n  // We reassign the class variable to keep the autodoc generator happy.\n  RCTNetworking = new MissingNativeRCTNetworkingShim();\n} else {\n  RCTNetworking = new RCTNetworking();\n}\n\nmodule.exports = RCTNetworking;\n"]}