{"version":3,"sources":["node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.ios.js"],"names":["ColorPropType","require","Image","React","PropTypes","StaticContainer","StyleSheet","View","ViewPropTypes","requireNativeComponent","TabBarItemIOS","state","hasBeenSelected","props","selected","setState","nextProps","style","children","tabContents","styles","tab","Component","propTypes","badge","oneOfType","string","number","badgeColor","systemIcon","oneOf","icon","source","selectedIcon","onPress","func","renderAsOriginal","bool","title","isTVSelectable","create","position","top","right","bottom","left","RCTTabBarItem","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAIA,eAAgBC,QAAQ,eAAR,CAApB;AACA,GAAIC,OAAQD,QAAQ,OAAR,CAAZ;AACA,GAAIE,OAAQF,QAAQ,OAAR,CAAZ;AACA,GAAMG,WAAYH,QAAQ,YAAR,CAAlB;AACA,GAAII,iBAAkBJ,QAAQ,uBAAR,CAAtB;AACA,GAAIK,YAAaL,QAAQ,YAAR,CAAjB;AACA,GAAIM,MAAON,QAAQ,MAAR,CAAX;;AAEA,GAAMO,eAAgBP,QAAQ,eAAR,CAAtB;;AAEA,GAAIQ,wBAAyBR,QAAQ,wBAAR,CAA7B,C;;AAEMS,a;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EJC,K,CAAQ;AACNC,gBAAiB,KADX,C;;;AAIa;AACnB,GAAI,KAAKC,KAAL,CAAWC,QAAf,CAAyB;AACvB,KAAKC,QAAL,CAAc,CAACH,gBAAiB,IAAlB,CAAd;AACD;AACF,C;;AAEyBI,S,CAAmC;AAC3D,GAAI,KAAKL,KAAL,CAAWC,eAAX,EAA8BI,UAAUF,QAA5C,CAAsD;AACpD,KAAKC,QAAL,CAAc,CAACH,gBAAiB,IAAlB,CAAd;AACD;AACF,C;;AAEQ;AAC2B,KAAKC,KADhC,CACFI,KADE,QACFA,KADE,CACKC,QADL,QACKA,QADL,CACkBL,KADlB;;;;AAKP,GAAI,KAAKF,KAAL,CAAWC,eAAf,CAAgC;AAC9B,GAAIO;AACF,oBAAC,eAAD,EAAiB,aAAc,KAAKN,KAAL,CAAWC,QAA1C;AACGI,QADH,CADF;;AAID,CALD,IAKO;AACL,GAAIC,aAAc,oBAAC,IAAD,mDAAlB;AACD;;AAED;AACE,oBAAC,aAAD;AACMN,KADN;AAEE,MAAO,CAACO,OAAOC,GAAR,CAAaJ,KAAb,CAFT;AAGGE,WAHH,CADF;;;AAOD,C,2BAhHyBhB,MAAMmB,S,SACzBC,S,aACFf,a,EAIHgB,MAAOpB,UAAUqB,SAAV,CAAoB,CACzBrB,UAAUsB,MADe,CAEzBtB,UAAUuB,MAFe,CAApB,C,CAOPC,WAAY5B,a,CAMZ6B,WAAYzB,UAAU0B,KAAV,CAAgB,CAC1B,WAD0B,CAE1B,UAF0B,CAG1B,WAH0B,CAI1B,WAJ0B,CAK1B,UAL0B,CAM1B,SAN0B,CAO1B,MAP0B,CAQ1B,aAR0B,CAS1B,aAT0B,CAU1B,SAV0B,CAW1B,QAX0B,CAY1B,WAZ0B,CAAhB,C,CAiBZC,KAAM7B,MAAMqB,SAAN,CAAgBS,M,CAKtBC,aAAc/B,MAAMqB,SAAN,CAAgBS,M,CAK9BE,QAAS9B,UAAU+B,I,CAKnBC,iBAAkBhC,UAAUiC,I,CAK5BvB,SAAUV,UAAUiC,I,CAIpBpB,MAAOT,cAAcS,K,CAKrBqB,MAAOlC,UAAUsB,M,CAOjBa,eAAgBnC,UAAUiC,I;;;AA2C9B,GAAIjB,QAASd,WAAWkC,MAAX,CAAkB;AAC7BnB,IAAK;AACHoB,SAAU,UADP;AAEHC,IAAK,CAFF;AAGHC,MAAO,CAHJ;AAIHC,OAAQ,CAJL;AAKHC,KAAM,CALH,CADwB,CAAlB,CAAb;;;;AAUA,GAAIC,eAAgBrC,uBAAuB,eAAvB,CAAwCC,aAAxC,CAApB;;AAEAqC,OAAOC,OAAP,CAAiBtC,aAAjB,C,2GA/HMA,a,iLAmHFU,M,0KAUA0B,a","file":"TabBarItemIOS.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TabBarItemIOS\n * @noflow\n */\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar Image = require('Image');\nvar React = require('React');\nconst PropTypes = require('prop-types');\nvar StaticContainer = require('StaticContainer.react');\nvar StyleSheet = require('StyleSheet');\nvar View = require('View');\n\nconst ViewPropTypes = require('ViewPropTypes');\n\nvar requireNativeComponent = require('requireNativeComponent');\n\nclass TabBarItemIOS extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    /**\n     * Little red bubble that sits at the top right of the icon.\n     */\n    badge: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * Background color for the badge. Available since iOS 10.\n     */\n    badgeColor: ColorPropType,\n    /**\n     * Items comes with a few predefined system icons. Note that if you are\n     * using them, the title and selectedIcon will be overridden with the\n     * system ones.\n     */\n    systemIcon: PropTypes.oneOf([\n      'bookmarks',\n      'contacts',\n      'downloads',\n      'favorites',\n      'featured',\n      'history',\n      'more',\n      'most-recent',\n      'most-viewed',\n      'recents',\n      'search',\n      'top-rated',\n    ]),\n    /**\n     * A custom icon for the tab. It is ignored when a system icon is defined.\n     */\n    icon: Image.propTypes.source,\n    /**\n     * A custom icon when the tab is selected. It is ignored when a system\n     * icon is defined. If left empty, the icon will be tinted in blue.\n     */\n    selectedIcon: Image.propTypes.source,\n    /**\n     * Callback when this tab is being selected, you should change the state of your\n     * component to set selected={true}.\n     */\n    onPress: PropTypes.func,\n    /**\n     * If set to true it renders the image as original,\n     * it defaults to being displayed as a template\n     */\n    renderAsOriginal: PropTypes.bool,\n    /**\n     * It specifies whether the children are visible or not. If you see a\n     * blank content, you probably forgot to add a selected one.\n     */\n    selected: PropTypes.bool,\n    /**\n     * React style object.\n     */\n    style: ViewPropTypes.style,\n    /**\n     * Text that appears under the icon. It is ignored when a system icon\n     * is defined.\n     */\n    title: PropTypes.string,\n    /**\n     *(Apple TV only)* When set to true, this view will be focusable\n     * and navigable using the Apple TV remote.\n     *\n     * @platform ios\n     */\n    isTVSelectable: PropTypes.bool,\n  };\n\n  state = {\n    hasBeenSelected: false,\n  };\n\n  componentWillMount() {\n    if (this.props.selected) {\n      this.setState({hasBeenSelected: true});\n    }\n  }\n\n  componentWillReceiveProps(nextProps: { selected?: boolean }) {\n    if (this.state.hasBeenSelected || nextProps.selected) {\n      this.setState({hasBeenSelected: true});\n    }\n  }\n\n  render() {\n    var {style, children, ...props} = this.props;\n\n    // if the tab has already been shown once, always continue to show it so we\n    // preserve state between tab transitions\n    if (this.state.hasBeenSelected) {\n      var tabContents =\n        <StaticContainer shouldUpdate={this.props.selected}>\n          {children}\n        </StaticContainer>;\n    } else {\n      var tabContents = <View />;\n    }\n\n    return (\n      <RCTTabBarItem\n        {...props}\n        style={[styles.tab, style]}>\n        {tabContents}\n      </RCTTabBarItem>\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  tab: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  }\n});\n\nvar RCTTabBarItem = requireNativeComponent('RCTTabBarItem', TabBarItemIOS);\n\nmodule.exports = TabBarItemIOS;\n"]}