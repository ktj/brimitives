{"version":3,"sources":["node_modules/react-native/Libraries/Components/TimePickerAndroid/TimePickerAndroid.android.js"],"names":["TimePickerModule","require","TimePickerAndroid","options","open","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,kBAAmBC,QAAQ,eAAR,EAAyBC,iBAAlD,C;;;;;;;;;;;;;;;;;;;;;;AAsBMA,iB;;;;;;;;;;;;;;;;;AAiBcC,O;AACTH,iBAAiBI,IAAjB,CAAsBD,OAAtB,C;;;;;;AAMkB,CAAE,MAAO,eAAP,CAAyB,C;;;;AAIzB,CAAE,MAAO,iBAAP,CAA2B,C;;;AAG5DE,OAAOC,OAAP,CAAiBJ,iBAAjB,C,0GArDMF,gB,oMAsBAE,iB","file":"TimePickerAndroid.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TimePickerAndroid\n * @flow\n */\n'use strict';\n\nconst TimePickerModule = require('NativeModules').TimePickerAndroid;\n\n/**\n * Opens the standard Android time picker dialog.\n *\n * ### Example\n *\n * ```\n * try {\n *   const {action, hour, minute} = await TimePickerAndroid.open({\n *     hour: 14,\n *     minute: 0,\n *     is24Hour: false, // Will display '2 PM'\n *   });\n *   if (action !== TimePickerAndroid.dismissedAction) {\n *     // Selected hour (0-23), minute (0-59)\n *   }\n * } catch ({code, message}) {\n *   console.warn('Cannot open time picker', message);\n * }\n * ```\n */\nclass TimePickerAndroid {\n\n  /**\n   * Opens the standard Android time picker dialog.\n   *\n   * The available keys for the `options` object are:\n   *   * `hour` (0-23) - the hour to show, defaults to the current time\n   *   * `minute` (0-59) - the minute to show, defaults to the current time\n   *   * `is24Hour` (boolean) - If `true`, the picker uses the 24-hour format. If `false`,\n   *     the picker shows an AM/PM chooser. If undefined, the default for the current locale\n   *     is used.\n   *\n   * Returns a Promise which will be invoked an object containing `action`, `hour` (0-23),\n   * `minute` (0-59) if the user picked a time. If the user dismissed the dialog, the Promise will\n   * still be resolved with action being `TimePickerAndroid.dismissedAction` and all the other keys\n   * being undefined. **Always** check whether the `action` before reading the values.\n   */\n  static async open(options: Object): Promise<Object> {\n    return TimePickerModule.open(options);\n  }\n\n  /**\n   * A time has been selected.\n   */\n  static get timeSetAction() { return 'timeSetAction'; }\n  /**\n   * The dialog has been dismissed.\n   */\n  static get dismissedAction() { return 'dismissedAction'; }\n}\n\nmodule.exports = TimePickerAndroid;\n"]}