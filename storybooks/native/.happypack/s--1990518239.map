{"version":3,"sources":["node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"],"names":["Animated","require","ColorPropType","EdgeInsetsPropType","Platform","PointPropType","PropTypes","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","createReactClass","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","requireNativeComponent","warning","ScrollView","displayName","propTypes","automaticallyAdjustContentInsets","bool","contentInset","contentOffset","bounces","bouncesZoom","alwaysBounceHorizontal","alwaysBounceVertical","centerContent","contentContainerStyle","decelerationRate","oneOfType","oneOf","number","horizontal","indicatorStyle","directionalLockEnabled","canCancelContentTouches","keyboardDismissMode","keyboardShouldPersistTaps","maximumZoomScale","minimumZoomScale","onMomentumScrollBegin","func","onMomentumScrollEnd","onScroll","onContentSizeChange","pagingEnabled","scrollEnabled","scrollEventThrottle","scrollIndicatorInsets","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","stickyHeaderIndices","arrayOf","style","snapToInterval","snapToAlignment","removeClippedSubviews","zoomScale","contentInsetAdjustmentBehavior","refreshControl","element","endFillColor","scrollPerfTag","string","overScrollMode","DEPRECATED_sendUpdatedChildFrames","mixins","Mixin","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","getInitialState","scrollResponderMixinGetInitialState","componentWillMount","componentDidMount","_updateAnimatedNodeAttachment","componentDidUpdate","componentWillUnmount","detach","setNativeProps","props","_scrollViewRef","getScrollResponder","getScrollableNode","findNodeHandle","getInnerViewNode","_innerViewRef","scrollTo","y","x","animated","console","warn","scrollResponderScrollTo","scrollToEnd","options","scrollResponderScrollToEnd","scrollWithoutAnimationTo","flashScrollIndicators","scrollResponderFlashScrollIndicators","_getKeyForIndex","index","childArray","child","key","length","attachNativeEvent","nativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","layout","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","_handleScroll","e","__DEV__","OS","log","scrollResponderHandleScroll","_handleContentOnLayout","width","height","_setScrollViewRef","_setInnerViewRef","render","ScrollViewClass","ScrollContentContainerViewClass","RCTScrollView","RCTScrollContentView","AndroidHorizontalScrollView","AndroidScrollView","undefined","styles","contentContainerHorizontal","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","onLayout","hasStickyHeaders","map","nextIndex","contentContainer","baseStyle","baseHorizontal","baseVertical","scrollResponderHandleMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","onScrollBeginDrag","scrollResponderHandleScrollBeginDrag","onScrollEndDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","sendMomentumEvents","isTVOS","cloneElement","create","flexGrow","flexShrink","flexDirection","overflow","nativeOnlyProps","nativeOnly","module","exports"],"mappings":"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","file":"ScrollView.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ScrollView\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst Platform = require('Platform');\nconst PointPropType = require('PointPropType');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ScrollResponder = require('ScrollResponder');\nconst ScrollViewStickyHeader = require('ScrollViewStickyHeader');\nconst StyleSheet = require('StyleSheet');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nconst createReactClass = require('create-react-class');\nconst dismissKeyboard = require('dismissKeyboard');\nconst flattenStyle = require('flattenStyle');\nconst invariant = require('fbjs/lib/invariant');\nconst processDecelerationRate = require('processDecelerationRate');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {NativeMethodsMixinType} from 'ReactNativeTypes';\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\n// $FlowFixMe(>=0.41.0)\nconst ScrollView = createReactClass({\n  displayName: 'ScrollView',\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Controls whether iOS should automatically adjust the content inset\n     * for scroll views that are placed behind a navigation bar or\n     * tab bar/ toolbar. The default value is true.\n     * @platform ios\n     */\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    /**\n     * The amount by which the scroll view content is inset from the edges\n     * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n     * @platform ios\n     */\n    contentInset: EdgeInsetsPropType,\n    /**\n     * Used to manually set the starting scroll offset.\n     * The default value is `{x: 0, y: 0}`.\n     * @platform ios\n     */\n    contentOffset: PointPropType,\n    /**\n     * When true, the scroll view bounces when it reaches the end of the\n     * content if the content is larger then the scroll view along the axis of\n     * the scroll direction. When false, it disables all bouncing even if\n     * the `alwaysBounce*` props are true. The default value is true.\n     * @platform ios\n     */\n    bounces: PropTypes.bool,\n    /**\n     * When true, gestures can drive zoom past min/max and the zoom will animate\n     * to the min/max value at gesture end, otherwise the zoom will not exceed\n     * the limits.\n     * @platform ios\n     */\n    bouncesZoom: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces horizontally when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is true when `horizontal={true}` and false otherwise.\n     * @platform ios\n     */\n    alwaysBounceHorizontal: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces vertically when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is false when `horizontal={true}` and true otherwise.\n     * @platform ios\n     */\n    alwaysBounceVertical: PropTypes.bool,\n    /**\n     * When true, the scroll view automatically centers the content when the\n     * content is smaller than the scroll view bounds; when the content is\n     * larger than the scroll view, this property has no effect. The default\n     * value is false.\n     * @platform ios\n     */\n    centerContent: PropTypes.bool,\n    /**\n     * These styles will be applied to the scroll view content container which\n     * wraps all of the child views. Example:\n     *\n     * ```\n     * return (\n     *   <ScrollView contentContainerStyle={styles.contentContainer}>\n     *   </ScrollView>\n     * );\n     * ...\n     * const styles = StyleSheet.create({\n     *   contentContainer: {\n     *     paddingVertical: 20\n     *   }\n     * });\n     * ```\n     */\n    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use string\n     * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n     * for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively.\n     *\n     *   - `'normal'`: 0.998 (the default)\n     *   - `'fast'`: 0.99\n     *\n     * @platform ios\n     */\n    decelerationRate: PropTypes.oneOfType([\n      PropTypes.oneOf(['fast', 'normal']),\n      PropTypes.number,\n    ]),\n    /**\n     * When true, the scroll view's children are arranged horizontally in a row\n     * instead of vertically in a column. The default value is false.\n     */\n    horizontal: PropTypes.bool,\n    /**\n     * The style of the scroll indicators.\n     *\n     *   - `'default'` (the default), same as `black`.\n     *   - `'black'`, scroll indicator is black. This style is good against a light background.\n     *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n     *\n     * @platform ios\n     */\n    indicatorStyle: PropTypes.oneOf([\n      'default', // default\n      'black',\n      'white',\n    ]),\n    /**\n     * When true, the ScrollView will try to lock to only vertical or horizontal\n     * scrolling while dragging.  The default value is false.\n     * @platform ios\n     */\n    directionalLockEnabled: PropTypes.bool,\n    /**\n     * When false, once tracking starts, won't try to drag if the touch moves.\n     * The default value is true.\n     * @platform ios\n     */\n    canCancelContentTouches: PropTypes.bool,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *\n     * *Cross platform*\n     *\n     *   - `'none'` (the default), drags do not dismiss the keyboard.\n     *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n     *\n     * *iOS Only*\n     *\n     *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n     *     synchrony with the touch; dragging upwards cancels the dismissal.\n     *     On android this is not supported and it will have the same behavior as 'none'.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag', // Cross-platform\n      'interactive', // iOS-only\n    ]),\n    /**\n     * Determines when the keyboard should stay visible after a tap.\n     *\n     *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n     *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n     *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n     *     catch taps, but children of the scroll view can catch taps.\n     *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n     *     a children, (or captured by an ancestor).\n     *   - `false`, deprecated, use 'never' instead\n     *   - `true`, deprecated, use 'always' instead\n     */\n    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),\n    /**\n     * The maximum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    maximumZoomScale: PropTypes.number,\n    /**\n     * The minimum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    minimumZoomScale: PropTypes.number,\n    /**\n     * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n     */\n    onMomentumScrollBegin: PropTypes.func,\n    /**\n     * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n     */\n    onMomentumScrollEnd: PropTypes.func,\n    /**\n     * Fires at most once per frame during scrolling. The frequency of the\n     * events can be controlled using the `scrollEventThrottle` prop.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * Called when scrollable content view of the ScrollView changes.\n     *\n     * Handler function is passed the content width and content height as parameters:\n     * `(contentWidth, contentHeight)`\n     *\n     * It's implemented using onLayout handler attached to the content container\n     * which this ScrollView renders.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * When true, the scroll view stops on multiples of the scroll view's size\n     * when scrolling. This can be used for horizontal pagination. The default\n     * value is false.\n     *\n     * Note: Vertical pagination is not supported on Android.\n     */\n    pagingEnabled: PropTypes.bool,\n    /**\n     * When false, the view cannot be scrolled via touch interaction.\n     * The default value is true.\n     *\n     * Note that the view can be always be scrolled by calling `scrollTo`.\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * This controls how often the scroll event will be fired while scrolling\n     * (as a time interval in ms). A lower number yields better accuracy for code\n     * that is tracking the scroll position, but can lead to scroll performance\n     * problems due to the volume of information being send over the bridge.\n     * You will not notice a difference between values set between 1-16 as the\n     * JS run loop is synced to the screen refresh rate. If you do not need precise\n     * scroll position tracking, set this value higher to limit the information\n     * being sent across the bridge. The default value is zero, which results in\n     * the scroll event being sent only once each time the view is scrolled.\n     * @platform ios\n     */\n    scrollEventThrottle: PropTypes.number,\n    /**\n     * The amount by which the scroll view indicators are inset from the edges\n     * of the scroll view. This should normally be set to the same value as\n     * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n     * @platform ios\n     */\n    scrollIndicatorInsets: EdgeInsetsPropType,\n    /**\n     * When true, the scroll view scrolls to top when the status bar is tapped.\n     * The default value is true.\n     * @platform ios\n     */\n    scrollsToTop: PropTypes.bool,\n    /**\n     * When true, shows a horizontal scroll indicator.\n     * The default value is true.\n     */\n    showsHorizontalScrollIndicator: PropTypes.bool,\n    /**\n     * When true, shows a vertical scroll indicator.\n     * The default value is true.\n     */\n    showsVerticalScrollIndicator: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),\n    style: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * When set, causes the scroll view to stop at multiples of the value of\n     * `snapToInterval`. This can be used for paginating through children\n     * that have lengths smaller than the scroll view. Typically used in\n     * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n     * Overrides less configurable `pagingEnabled` prop.\n     *\n     * @platform ios\n     */\n    snapToInterval: PropTypes.number,\n    /**\n     * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n     * of the snapping to the scroll view.\n     *\n     *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n     *   - `'center'` will align the snap in the center\n     *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n     *\n     * @platform ios\n     */\n    snapToAlignment: PropTypes.oneOf([\n      'start', // default\n      'center',\n      'end',\n    ]),\n    /**\n     * Experimental: When true, offscreen child views (whose `overflow` value is\n     * `hidden`) are removed from their native backing superview when offscreen.\n     * This can improve scrolling performance on long lists. The default value is\n     * true.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * The current scale of the scroll view content. The default value is 1.0.\n     * @platform ios\n     */\n    zoomScale: PropTypes.number,\n    /**\n     * This property specifies how the safe area insets are used to modify the\n     * content area of the scroll view. The default value of this property is\n     * \"never\". Available on iOS 11 and later.\n     * @platform ios\n     */\n    contentInsetAdjustmentBehavior: PropTypes.oneOf([\n      'automatic',\n      'scrollableAxes',\n      'never', // default\n      'always',\n    ]),\n    /**\n     * A RefreshControl component, used to provide pull-to-refresh\n     * functionality for the ScrollView. Only works for vertical ScrollViews\n     * (`horizontal` prop must be `false`).\n     *\n     * See [RefreshControl](docs/refreshcontrol.html).\n     */\n    refreshControl: PropTypes.element,\n\n    /**\n     * Sometimes a scrollview takes up more space than its content fills. When this is\n     * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n     * a background and creating unnecessary overdraw. This is an advanced optimization\n     * that is not needed in the general case.\n     * @platform android\n     */\n    endFillColor: ColorPropType,\n\n    /**\n     * Tag used to log scroll performance on this scroll view. Will force\n     * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n     * anything out of the box and you need to implement a custom native\n     * FpsListener for it to be useful.\n     * @platform android\n     */\n    scrollPerfTag: PropTypes.string,\n\n     /**\n     * Used to override default value of overScroll mode.\n     *\n     * Possible values:\n     *\n     *  - `'auto'` - Default value, allow a user to over-scroll\n     *    this view only if the content is large enough to meaningfully scroll.\n     *  - `'always'` - Always allow a user to over-scroll this view.\n     *  - `'never'` - Never allow a user to over-scroll this view.\n     *\n     * @platform android\n     */\n    overScrollMode: PropTypes.oneOf([\n      'auto',\n      'always',\n      'never',\n    ]),\n    /**\n     * When true, ScrollView will emit updateChildFrames data in scroll events,\n     * otherwise will not compute or emit child frame data.  This only exists\n     * to support legacy issues, `onLayout` should be used instead to retrieve\n     * frame data.\n     * The default value is false.\n     * @platform ios\n     */\n    DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,\n  },\n\n  mixins: [ScrollResponder.Mixin],\n\n  _scrollAnimatedValue: (new Animated.Value(0): Animated.Value),\n  _scrollAnimatedValueAttachment: (null: ?{detach: () => void}),\n  _stickyHeaderRefs: (new Map(): Map<number, ScrollViewStickyHeader>),\n  _headerLayoutYs: (new Map(): Map<string, number>),\n  getInitialState: function() {\n    return this.scrollResponderMixinGetInitialState();\n  },\n\n  componentWillMount: function() {\n    this._scrollAnimatedValue = new Animated.Value(0);\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  },\n\n  componentDidMount: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentDidUpdate: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentWillUnmount: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  },\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: function(): ScrollView {\n    return this;\n  },\n\n  getScrollableNode: function(): any {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  },\n\n  getInnerViewNode: function(): any {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: function(\n    y?: number | { x?: number, y?: number, animated?: boolean },\n    x?: number,\n    animated?: boolean\n  ) {\n    if (typeof y === 'number') {\n      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n        'animated: true})` instead.');\n    } else {\n      ({x, y, animated} = y || {});\n    }\n    this.getScrollResponder().scrollResponderScrollTo(\n      {x: x || 0, y: y || 0, animated: animated !== false}\n    );\n  },\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: function(\n    options?: { animated?: boolean },\n  ) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this.getScrollResponder().scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  },\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo: function(y: number = 0, x: number = 0) {\n    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');\n    this.scrollTo({x, y, animated: false});\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function() {\n    this.getScrollResponder().scrollResponderFlashScrollIndicators();\n  },\n\n  _getKeyForIndex: function(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  },\n\n  _updateAnimatedNodeAttachment: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {\n      this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(\n        this._scrollViewRef,\n        'onScroll',\n        [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}]\n      );\n    }\n  },\n\n  _setStickyHeaderRef: function(key, ref) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  },\n\n  _onStickyHeaderLayout: function(index, event, key) {\n    if (!this.props.stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray)\n      );\n      previousHeader && previousHeader.setNextHeaderY(layoutY);\n    }\n  },\n\n  _handleScroll: function(e: Object) {\n    if (__DEV__) {\n      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {\n        console.log( // eslint-disable-line no-console-disallow\n          'You specified `onScroll` on a <ScrollView> but not ' +\n          '`scrollEventThrottle`. You will only receive one event. ' +\n          'Using `16` you get all the events but be aware that it may ' +\n          'cause frame drops, use a bigger number if you don\\'t need as ' +\n          'much precision.'\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n    }\n    this.scrollResponderHandleScroll(e);\n  },\n\n  _handleContentOnLayout: function(e: Object) {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _scrollViewRef: (null: ?ScrollView),\n  _setScrollViewRef: function(ref: ?ScrollView) {\n    this._scrollViewRef = ref;\n  },\n\n  _innerViewRef: (null: ?NativeMethodsMixinType),\n  _setInnerViewRef: function(ref: ?NativeMethodsMixinType) {\n    this._innerViewRef = ref;\n  },\n\n  render: function() {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'ios') {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n      warning(\n        !this.props.snapToInterval || !this.props.pagingEnabled,\n        'snapToInterval is currently ignored when pagingEnabled is true.'\n      );\n    } else if (Platform.OS === 'android') {\n      if (this.props.horizontal) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n      }\n      ScrollContentContainerViewClass = View;\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined'\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined'\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    let style, childLayoutProps;\n    if (__DEV__ && this.props.style) {\n      style = flattenStyle(this.props.style);\n      childLayoutProps = ['alignItems', 'justifyContent']\n        .filter((prop) => style && style[prop] !== undefined);\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' + JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.'\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    const hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;\n    const childArray = hasStickyHeaders && React.Children.toArray(this.props.children);\n    const children = hasStickyHeaders ?\n      childArray.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          return (\n            <ScrollViewStickyHeader\n              key={key}\n              ref={(ref) => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={\n                this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, childArray))\n              }\n              onLayout={(event) => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}>\n              {child}\n            </ScrollViewStickyHeader>\n          );\n        } else {\n          return child;\n        }\n      }) :\n      this.props.children;\n    const contentContainer =\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders ?\n            false :\n            this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>;\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined ?\n        this.props.alwaysBounceHorizontal :\n        this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined ?\n        this.props.alwaysBounceVertical :\n        !this.props.horizontal;\n\n    const DEPRECATED_sendUpdatedChildFrames =\n      !!this.props.DEPRECATED_sendUpdatedChildFrames;\n\n    const baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: ([baseStyle, this.props.style]: ?Array<any>),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\n      onResponderReject: this.scrollResponderHandleResponderReject,\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\n      onResponderTerminate: this.scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\n      onScroll: this._handleScroll,\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\n      onTouchMove: this.scrollResponderHandleTouchMove,\n      onTouchStart: this.scrollResponderHandleTouchStart,\n      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,\n      sendMomentumEvents: (this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd) ?\n        true : false,\n      DEPRECATED_sendUpdatedChildFrames,\n    };\n\n    const { decelerationRate } = this.props;\n    if (decelerationRate) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTVOS ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should only apply props.style on the wrapper\n        // however, the ScrollView still needs the baseStyle to be scrollable\n\n        return React.cloneElement(\n          refreshControl,\n          {style: props.style},\n          <ScrollViewClass {...props} style={baseStyle} ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      }\n    }\n    return (\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  }\n});\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nlet nativeOnlyProps,\n  AndroidScrollView,\n  AndroidHorizontalScrollView,\n  RCTScrollView,\n  RCTScrollContentView;\nif (Platform.OS === 'android') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      sendMomentumEvents: true,\n    }\n  };\n  AndroidScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: ReactClass<any>),\n    nativeOnlyProps\n  );\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n    (ScrollView: ReactClass<any>),\n    nativeOnlyProps\n  );\n} else if (Platform.OS === 'ios') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      onMomentumScrollBegin: true,\n      onMomentumScrollEnd : true,\n      onScrollBeginDrag: true,\n      onScrollEndDrag: true,\n    }\n  };\n  RCTScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: ReactClass<any>),\n    nativeOnlyProps,\n  );\n  // $FlowFixMe (bvaughn) Update ComponentInterface in ViewPropTypes to include a string type (for Fiber host components) in a follow-up.\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);\n}\n\nmodule.exports = ScrollView;\n"]}