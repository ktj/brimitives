{"version":3,"sources":["node_modules/react-native/Libraries/Geolocation/Geolocation.js"],"names":["NativeEventEmitter","require","RCTLocationObserver","LocationObserver","invariant","logError","warning","LocationEventEmitter","Platform","PermissionsAndroid","subscriptions","updatesEnabled","Geolocation","requestAuthorization","getCurrentPosition","geo_success","geo_error","geo_options","hasPermission","OS","Version","check","PERMISSIONS","ACCESS_FINE_LOCATION","request","status","RESULTS","GRANTED","watchPosition","success","error","options","startObserving","watchID","length","push","addListener","clearWatch","sub","remove","sub1","undefined","noWatchers","ii","stopObserving","module","exports"],"mappings":"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","file":"Geolocation.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Geolocation\n * @flow\n */\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTLocationObserver = require('NativeModules').LocationObserver;\n\nconst invariant = require('fbjs/lib/invariant');\nconst logError = require('logError');\nconst warning = require('fbjs/lib/warning');\n\nconst LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);\n\nconst Platform = require('Platform');\nconst PermissionsAndroid = require('PermissionsAndroid');\n\nvar subscriptions = [];\nvar updatesEnabled = false;\n\ntype GeoOptions = {\n  timeout?: number,\n  maximumAge?: number,\n  enableHighAccuracy?: bool,\n  distanceFilter: number,\n  useSignificantChanges?: bool,\n}\n\n/**\n * The Geolocation API extends the web spec:\n * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n *\n * As a browser polyfill, this API is available through the `navigator.geolocation`\n * global - you do not need to `import` it.\n *\n * ### Configuration and Permissions\n *\n * <div class=\"banner-crna-ejected\">\n *   <h3>Projects with Native Code Only</h3>\n *   <p>\n *     This section only applies to projects made with <code>react-native init</code>\n *     or to those made with Create React Native App which have since ejected. For\n *     more information about ejecting, please see\n *     the <a href=\"https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md\" target=\"_blank\">guide</a> on\n *     the Create React Native App repository.\n *   </p>\n * </div>\n *\n * #### iOS\n * You need to include the `NSLocationWhenInUseUsageDescription` key\n * in Info.plist to enable geolocation when using the app. Geolocation is\n * enabled by default when you create a project with `react-native init`.\n *\n * In order to enable geolocation in the background, you need to include the\n * 'NSLocationAlwaysUsageDescription' key in Info.plist and add location as\n * a background mode in the 'Capabilities' tab in Xcode.\n *\n * #### Android\n * To request access to location, you need to add the following line to your\n * app's `AndroidManifest.xml`:\n *\n * `<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />`\n *\n * Android API >= 18 Positions will also contain a `mocked` boolean to indicate if position\n * was created from a mock provider.\n *\n */\nvar Geolocation = {\n\n  /*\n   * Request suitable Location permission based on the key configured on pList.\n   * If NSLocationAlwaysUsageDescription is set, it will request Always authorization,\n   * although if NSLocationWhenInUseUsageDescription is set, it will request InUse\n   * authorization.\n   */\n  requestAuthorization: function() {\n    RCTLocationObserver.requestAuthorization();\n  },\n\n  /*\n   * Invokes the success callback once with the latest location info.  Supported\n   * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool)\n   * On Android, if the location is cached this can return almost immediately,\n   * or it will request an update which might take a while.\n   */\n  getCurrentPosition: async function(\n    geo_success: Function,\n    geo_error?: Function,\n    geo_options?: GeoOptions\n  ) {\n    invariant(\n      typeof geo_success === 'function',\n      'Must provide a valid geo_success callback.'\n    );\n    let hasPermission = true;\n    // Supports Android's new permission model. For Android older devices,\n    // it's always on.\n    if (Platform.OS === 'android' && Platform.Version >= 23) {\n      hasPermission = await PermissionsAndroid.check(\n        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n      );\n      if (!hasPermission) {\n        const status = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n        );\n        hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;\n      }\n    }\n    if (hasPermission) {\n      RCTLocationObserver.getCurrentPosition(\n        geo_options || {},\n        geo_success,\n        geo_error || logError,\n      );\n    }\n  },\n\n  /*\n   * Invokes the success callback whenever the location changes.  Supported\n   * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool), distanceFilter(m), useSignificantChanges (bool)\n   */\n  watchPosition: function(success: Function, error?: Function, options?: GeoOptions): number {\n    if (!updatesEnabled) {\n      RCTLocationObserver.startObserving(options || {});\n      updatesEnabled = true;\n    }\n    var watchID = subscriptions.length;\n    subscriptions.push([\n      LocationEventEmitter.addListener(\n        'geolocationDidChange',\n        success\n      ),\n      error ? LocationEventEmitter.addListener(\n        'geolocationError',\n        error\n      ) : null,\n    ]);\n    return watchID;\n  },\n\n  clearWatch: function(watchID: number) {\n    var sub = subscriptions[watchID];\n    if (!sub) {\n      // Silently exit when the watchID is invalid or already cleared\n      // This is consistent with timers\n      return;\n    }\n\n    sub[0].remove();\n    // array element refinements not yet enabled in Flow\n    var sub1 = sub[1]; sub1 && sub1.remove();\n    subscriptions[watchID] = undefined;\n    var noWatchers = true;\n    for (var ii = 0; ii < subscriptions.length; ii++) {\n      if (subscriptions[ii]) {\n        noWatchers = false; // still valid subscriptions\n      }\n    }\n    if (noWatchers) {\n      Geolocation.stopObserving();\n    }\n  },\n\n  stopObserving: function() {\n    if (updatesEnabled) {\n      RCTLocationObserver.stopObserving();\n      updatesEnabled = false;\n      for (var ii = 0; ii < subscriptions.length; ii++) {\n        var sub = subscriptions[ii];\n        if (sub) {\n          warning(false, 'Called stopObserving with existing subscriptions.');\n          sub[0].remove();\n          // array element refinements not yet enabled in Flow\n          var sub1 = sub[1]; sub1 && sub1.remove();\n        }\n      }\n      subscriptions = [];\n    }\n  }\n};\n\nmodule.exports = Geolocation;\n"]}