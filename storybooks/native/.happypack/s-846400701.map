{"version":3,"sources":["node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"names":["infoLog","require","invariant","DEBUG","TaskQueue","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","task","_getCurrentQueue","push","forEach","enqueue","tasksToCancel","map","queue","filter","indexOf","idx","length","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","then","hasTasksToProcess","catch","ex","done","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,SAAUC,QAAQ,SAAR,CAAhB;AACA,GAAMC,WAAYD,QAAQ,oBAAR,CAAlB;;;;;;;;;;;;AAYA,GAAME,OAAQ,KAAd,C;;;;;;;;;;;;;;;;;;AAkBMC,S;;;;;;;;AAQJ,wBAAsD,IAAzCC,YAAyC,MAAzCA,WAAyC;AACpD,KAAKC,YAAL,CAAoBD,WAApB;AACA,KAAKE,WAAL,CAAmB,CAAC,CAACC,MAAO,EAAR,CAAYC,QAAS,KAArB,CAAD,CAAnB;AACD,C;;;;;;;AAOOC,I,CAAkB;AACxB,KAAKC,gBAAL,GAAwBC,IAAxB,CAA6BF,IAA7B;AACD,C;;AAEYF,K,CAA0B;AACrCA,MAAMK,OAAN,CAAc,SAACH,IAAD,QAAU,OAAKI,OAAL,CAAaJ,IAAb,CAAV,EAAd;AACD,C;;AAEWK,a,CAAkC;;AAE5C,KAAKR,WAAL,CAAmB,KAAKA,WAAL;AAChBS,GADgB,CACZ,SAACC,KAAD;AACAA,KADA;AAEHT,MAAOS,MAAMT,KAAN,CAAYU,MAAZ,CAAmB,SAACR,IAAD,QAAUK,eAAcI,OAAd,CAAsBT,IAAtB,IAAgC,CAAC,CAA3C,EAAnB,CAFJ,IADY;;AAKhBQ,MALgB,CAKT,SAACD,KAAD,CAAQG,GAAR,QAAiBH,OAAMT,KAAN,CAAYa,MAAZ,CAAqB,CAArB,EAA0BD,MAAQ,CAAnD,EALS,CAAnB;AAMD,C;;;;;;;;;;;;AAYyB;AACxB,MAAO,MAAKT,gBAAL,GAAwBU,MAAxB,CAAiC,CAAxC;AACD,C;;;;;AAKmB;AAClB,GAAMJ,OAAQ,KAAKN,gBAAL,EAAd;AACA,GAAIM,MAAMI,MAAV,CAAkB;AAChB,GAAMX,MAAOO,MAAMK,KAAN,EAAb;AACA,GAAI;AACF,GAAIZ,KAAKa,GAAT,CAAc;AACZpB,OAASH,QAAQ,uBAAyBU,KAAKc,IAAtC,CAAT;AACA,KAAKC,WAAL,CAAkBf,IAAlB;AACD,CAHD,IAGO,IAAIA,KAAKgB,GAAT,CAAc;AACnBvB,OAASH,QAAQ,YAAcU,KAAKc,IAA3B,CAAT;AACAd,KAAKgB,GAAL;AACD,CAHM,IAGA;AACLxB;AACE,MAAOQ,KAAP,GAAgB,UADlB;AAEE;AACEiB,KAAKC,SAAL,CAAelB,IAAf,CAAqB,IAArB,CAA2B,CAA3B,CAHJ;;AAKAP,OAASH,QAAQ,oBAAR,CAAT;AACAU;AACD;AACF,CAAC,MAAOmB,CAAP,CAAU;AACVA,EAAEC,OAAF,CAAY,+BAAiCpB,KAAKc,IAAL,EAAa,EAA9C,EAAoD,IAApD;AACVK,EAAEC,OADJ;AAEA,KAAMD,EAAN;AACD;AACF;AACF,C;;;;;AAK+B;AAC9B,GAAME,UAAW,KAAKxB,WAAL,CAAiBc,MAAjB,CAA0B,CAA3C;AACA,GAAMJ,OAAQ,KAAKV,WAAL,CAAiBwB,QAAjB,CAAd;AACA,GAAId,MAAMR,OAAN;AACAQ,MAAMT,KAAN,CAAYa,MAAZ,GAAuB,CADvB;AAEA,KAAKd,WAAL,CAAiBc,MAAjB,CAA0B,CAF9B,CAEiC;AAC/B,KAAKd,WAAL,CAAiByB,GAAjB;AACA7B,OAASH,QAAQ,gBAAR,CAA0B,CAAC+B,iBAAD,CAAWE,eAAgB,KAAK1B,WAAL,CAAiBc,MAA5C,CAA1B,CAAT;AACA,MAAO,MAAKV,gBAAL,EAAP;AACD,CAND,IAMO;AACL,MAAOM,OAAMT,KAAb;AACD;AACF,C;;AAEWE,I,CAAmB;;;;;AAK7B,KAAKH,WAAL,CAAiBK,IAAjB,CAAsB,CAACJ,MAAO,EAAR,CAAYC,QAAS,KAArB,CAAtB;AACA,GAAMsB,UAAW,KAAKxB,WAAL,CAAiBc,MAAjB,CAA0B,CAA3C;AACAlB,OAASH,QAAQ,kBAAR,CAA4B,CAAC+B,iBAAD,CAA5B,CAAT;AACA5B,OAASH,QAAQ,iBAAmBU,KAAKc,IAAhC,CAAT;AACAd,KAAKa,GAAL;AACGW,IADH,CACQ,UAAM;AACV/B,OAASH;AACP,uBAAyBU,KAAKc,IADvB;AAEP,CAACO,iBAAD,CAAWE,eAAgB,OAAK1B,WAAL,CAAiBc,MAA5C,CAFO,CAAT;;AAIA,OAAKd,WAAL,CAAiBwB,QAAjB,EAA2BtB,OAA3B,CAAqC,IAArC;AACA,OAAK0B,iBAAL,IAA4B,OAAK7B,YAAL,EAA5B;AACD,CARH;AASG8B,KATH,CASS,SAACC,EAAD,CAAQ;AACbA,GAAGP,OAAH,+CAA2DpB,KAAKc,IAAhE,MAAyEa,GAAGP,OAA5E;AACA,KAAMO,GAAN;AACD,CAZH;AAaGC,IAbH;AAcD,C;;;;AAIHC,OAAOC,OAAP,CAAiBpC,SAAjB,C,0GA/IMD,K,wJAkBAC,S","file":"TaskQueue.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TaskQueue\n * @flow\n */\n'use strict';\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<any>,\n};\nexport type Task = Function | SimpleTask | PromiseTask;\n\nconst DEBUG = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach((task) => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map((queue) => ({\n        ...queue,\n        tasks: queue.tasks.filter((task) => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => (queue.tasks.length > 0 || idx === 0));\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): bool {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('genPromise for task ' + task.name);\n          this._genPromise((task: any)); // Rather than annoying tagged union\n        } else if (task.run) {\n          DEBUG && infoLog('run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2)\n          );\n          DEBUG && infoLog('run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' +\n          e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{tasks: Array<Task>, popable: bool}>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (queue.popable &&\n        queue.tasks.length === 0 &&\n        this._queueStack.length > 1) {\n      this._queueStack.pop();\n      DEBUG && infoLog('popped queue: ', {stackIdx, queueStackSize: this._queueStack.length});\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('push new queue: ', {stackIdx});\n    DEBUG && infoLog('exec gen task ' + task.name);\n    task.gen()\n      .then(() => {\n        DEBUG && infoLog(\n          'onThen for gen task ' + task.name,\n          {stackIdx, queueStackSize: this._queueStack.length},\n        );\n        this._queueStack[stackIdx].popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch((ex) => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\n\nmodule.exports = TaskQueue;\n"]}