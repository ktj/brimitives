{"version":3,"sources":["node_modules/react-native/Libraries/BatchedBridge/NativeModules.js"],"names":["BatchedBridge","require","invariant","genModule","config","moduleID","moduleName","constants","methods","promiseMethods","syncMethods","startsWith","name","module","forEach","methodName","methodID","isPromise","arrayContains","isSync","methodType","genMethod","__DEV__","createDebugLookup","global","__fbGenNativeModule","loadModule","nativeRequireModuleConfig","info","type","fn","args","Promise","resolve","reject","enqueueNativeCall","data","errorData","createErrorFromErrorData","callSyncHook","lastArg","length","secondLastArg","hasSuccessCallback","hasErrorCallback","onSuccess","onFail","callbackCount","slice","array","value","indexOf","message","extraErrorInfo","error","Error","framesToPop","NativeModules","nativeModuleProxy","bridgeConfig","__fbBatchedBridgeConfig","defineLazyObjectProperty","remoteModuleConfig","get","exports"],"mappings":"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","file":"NativeModules.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NativeModules\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {ExtendedError} from 'parseErrorStack';\n\ntype ModuleConfig = [\n  string, /* name */\n  ?Object, /* constants */\n  Array<string>, /* functions */\n  Array<number>, /* promise method IDs */\n  Array<number>, /* sync method IDs */\n];\n\nexport type MethodType = 'async' | 'promise' | 'sync';\n\nfunction genModule(config: ?ModuleConfig, moduleID: number): ?{name: string, module?: Object} {\n  if (!config) {\n    return null;\n  }\n\n  const [moduleName, constants, methods, promiseMethods, syncMethods] = config;\n  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'),\n    'Module name prefixes should\\'ve been stripped by the native side ' +\n    'but wasn\\'t for ' + moduleName);\n\n  if (!constants && !methods) {\n    // Module contents will be filled in lazily later\n    return { name: moduleName };\n  }\n\n  const module = {};\n  methods && methods.forEach((methodName, methodID) => {\n    const isPromise = promiseMethods && arrayContains(promiseMethods, methodID);\n    const isSync = syncMethods && arrayContains(syncMethods, methodID);\n    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');\n    const methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';\n    module[methodName] = genMethod(moduleID, methodID, methodType);\n  });\n  Object.assign(module, constants);\n\n  if (__DEV__) {\n    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);\n  }\n\n  return { name: moduleName, module };\n}\n\n// export this method as a global so we can call it from native\nglobal.__fbGenNativeModule = genModule;\n\nfunction loadModule(name: string, moduleID: number): ?Object {\n  invariant(global.nativeRequireModuleConfig,\n    'Can\\'t lazily create module without nativeRequireModuleConfig');\n  const config = global.nativeRequireModuleConfig(name);\n  const info = genModule(config, moduleID);\n  return info && info.module;\n}\n\nfunction genMethod(moduleID: number, methodID: number, type: MethodType) {\n  let fn = null;\n  if (type === 'promise') {\n    fn = function(...args: Array<any>) {\n      return new Promise((resolve, reject) => {\n        BatchedBridge.enqueueNativeCall(moduleID, methodID, args,\n          (data) => resolve(data),\n          (errorData) => reject(createErrorFromErrorData(errorData)));\n      });\n    };\n  } else if (type === 'sync') {\n    fn = function(...args: Array<any>) {\n      return BatchedBridge.callSyncHook(moduleID, methodID, args);\n    };\n  } else {\n    fn = function(...args: Array<any>) {\n      const lastArg = args.length > 0 ? args[args.length - 1] : null;\n      const secondLastArg = args.length > 1 ? args[args.length - 2] : null;\n      const hasSuccessCallback = typeof lastArg === 'function';\n      const hasErrorCallback = typeof secondLastArg === 'function';\n      hasErrorCallback && invariant(\n        hasSuccessCallback,\n        'Cannot have a non-function arg after a function arg.'\n      );\n      const onSuccess = hasSuccessCallback ? lastArg : null;\n      const onFail = hasErrorCallback ? secondLastArg : null;\n      const callbackCount = hasSuccessCallback + hasErrorCallback;\n      args = args.slice(0, args.length - callbackCount);\n      BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);\n    };\n  }\n  fn.type = type;\n  return fn;\n}\n\nfunction arrayContains<T>(array: Array<T>, value: T): boolean {\n  return array.indexOf(value) !== -1;\n}\n\nfunction createErrorFromErrorData(errorData: {message: string}): ExtendedError {\n  const {\n    message,\n    ...extraErrorInfo\n  } = errorData || {};\n  const error : ExtendedError = new Error(message);\n  error.framesToPop = 1;\n  return Object.assign(error, extraErrorInfo);\n}\n\nlet NativeModules : {[moduleName: string]: Object} = {};\nif (global.nativeModuleProxy) {\n  NativeModules = global.nativeModuleProxy;\n} else {\n  const bridgeConfig = global.__fbBatchedBridgeConfig;\n  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');\n\n  const defineLazyObjectProperty = require('defineLazyObjectProperty');\n  (bridgeConfig.remoteModuleConfig || []).forEach((config: ModuleConfig, moduleID: number) => {\n    // Initially this config will only contain the module name when running in JSC. The actual\n    // configuration of the module will be lazily loaded.\n    const info = genModule(config, moduleID);\n    if (!info) {\n      return;\n    }\n\n    if (info.module) {\n      NativeModules[info.name] = info.module;\n    }\n    // If there's no module config, define a lazy getter\n    else {\n      defineLazyObjectProperty(NativeModules, info.name, {\n        get: () => loadModule(info.name, moduleID)\n      });\n    }\n  });\n}\n\nmodule.exports = NativeModules;\n"]}