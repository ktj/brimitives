{"version":3,"sources":["node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"names":["EmitterSubscription","require","EventSubscriptionVendor","emptyFunction","invariant","EventEmitter","subscriber","_subscriber","eventType","listener","context","addSubscription","addListener","args","removeCurrentListener","apply","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","i","l","length","Array","prototype","slice","call","arguments","remove","module","exports"],"mappings":"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","file":"EventEmitter.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventEmitter\n * @noflow\n * @typecheck\n */\n'use strict';\n\nconst EmitterSubscription = require('EmitterSubscription');\nconst EventSubscriptionVendor = require('EventSubscriptionVendor');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n\n  _subscriber: EventSubscriptionVendor;\n  _currentSubscription: ?EmitterSubscription;\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber: ?EventSubscriptionVendor) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener(\n    eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context)\n    ) : any);\n  }\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  once(eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n    return this.addListener(eventType, (...args) => {\n      this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners(eventType: ?string) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  removeCurrentListener() {\n    invariant(\n      !!this._currentSubscription,\n      'Not in an emitting cycle; there is no current subscription'\n    );\n    this.removeSubscription(this._currentSubscription);\n  }\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  removeSubscription(subscription: EmitterSubscription) {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.'\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  listeners(eventType: string): [EmitterSubscription] {\n    const subscriptions: ?[EmitterSubscription] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    return subscriptions\n      ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(\n          function(subscription) {\n            return subscription.listener;\n          })\n      : [];\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit(eventType: string) {\n    const subscriptions: ?[EmitterSubscription] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(\n            subscription.context,\n            Array.prototype.slice.call(arguments, 1)\n          );\n        }\n      }\n      this._currentSubscription = null;\n    }\n  }\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  removeListener(eventType: String, listener) {\n    const subscriptions: ?[EmitterSubscription] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"]}