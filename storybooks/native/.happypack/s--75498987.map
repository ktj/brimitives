{"version":3,"sources":["node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"names":["getDevServer","require","SourceCode","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","global","devServer","bundleLoadedFromServer","Error","stackCopy","scriptURL","foundInternalSource","map","frame","file","url","method","body","JSON","stringify","response","json","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,cAAeC,QAAQ,cAAR,CAArB,C;;AAEqBA,QAAQ,eAAR,C,CAAdC,U,UAAAA,U;;;AAGP,GAAIC,aAAJ;;;;AAIA,QAASC,kBAAT,CAA2BC,UAA3B,CAAwD;AACtD,MAAO,CAAC,QAAQC,IAAR,CAAaD,UAAb,CAAD,EAA6B,QAAQC,IAAR,CAAaD,UAAb,CAApC;AACD;;AAED,QAAeE,sBAAf,CAAqCC,KAArC;;;;;;;;;;;;AAYE,GAAI,CAACL,KAAL,CAAY;AACVA,MAAQM,OAAON,KAAP,EAAgBF,QAAQ,OAAR,EAAiBE,KAAzC;AACD;;AAEKO,SAhBR,CAgBoBV,cAhBpB;AAiBOU,UAAUC,sBAjBjB;AAkBU,GAAIC,MAAJ,CAAU,yCAAV,CAlBV;;;AAqBMC,SArBN,CAqBkBL,KArBlB;;AAuBE,GAAIN,WAAWY,SAAf,CAA0B;AACpBC,mBADoB,CACW,KADX;AAExBF,UAAYL,MAAMQ,GAAN,CAAU,SAACC,KAAD,CAAuB;;;;;AAK3C,GAAI,CAACF,mBAAD,EAAwBX,kBAAkBa,MAAMC,IAAxB,CAA5B,CAA2D;;AAEzD,mBAAWD,KAAX,EAAkBC,KAAMhB,WAAWY,SAAnC;AACD;;AAEDC,oBAAsB,IAAtB;AACA,MAAOE,MAAP;AACD,CAZW,CAAZ;AAaD,CAtCH;;AAwCyBd,MAAMO,UAAUS,GAAV,CAAgB,aAAtB,CAAqC;AAC1DC,OAAQ,MADkD;AAE1DC,KAAMC,KAAKC,SAAL,CAAe,CAACf,MAAOK,SAAR,CAAf,CAFoD,CAArC,CAxCzB,SAwCQW,QAxCR;;AA4CqBA,SAASC,IAAT,EA5CrB,UA4CQA,IA5CR;AA6CSA,KAAKjB,KA7Cd;;;AAgDAkB,OAAOC,OAAP,CAAiBpB,qBAAjB,C,0GAxDIJ,K,sKAIKC,iB,kLAIMG,qB","file":"symbolicateStackTrace.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule symbolicateStackTrace\n * @flow\n */\n'use strict';\n\nconst getDevServer = require('getDevServer');\n\nconst {SourceCode} = require('NativeModules');\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch; \n\nimport type {StackFrame} from 'parseErrorStack';\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(stack: Array<StackFrame>): Promise<Array<StackFrame>> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which, \n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch \n  // either directly or indirectly, whatwg-fetch is required before \n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load \n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN. \n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  if (SourceCode.scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: SourceCode.scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  const json = await response.json();\n  return json.stack;\n}\n\nmodule.exports = symbolicateStackTrace;\n"]}