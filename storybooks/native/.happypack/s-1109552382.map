{"version":3,"sources":["node_modules/react-native/Libraries/vendor/core/mergeHelpers.js"],"names":["invariant","require","MAX_MERGE_DEPTH","isTerminal","o","Date","mergeHelpers","normalizeMergeArg","arg","undefined","checkMergeArrayArgs","one","two","Array","isArray","checkMergeObjectArgs","checkMergeObjectArg","checkMergeIntoObjectArg","checkMergeLevel","level","checkArrayStrategy","strategy","ArrayStrategies","Clobber","Concat","IndexByIndex","module","exports"],"mappings":";;;;;;;;;;;;;AAaA;;AAEA,GAAIA,WAAYC,QAAQ,oBAAR,CAAhB;;;;;;AAMA,GAAIC,iBAAkB,EAAtB;;;;;;;;AAQA,GAAIC,YAAa,QAAbA,WAAa,CAASC,CAAT,CAAY;AAC3B,MAAO,OAAOA,EAAP,GAAa,QAAb,EAAyBA,YAAaC,KAAtC,EAA8CD,IAAM,IAA3D;AACD,CAFD;;AAIA,GAAIE,cAAe;;AAEjBJ,gBAAiBA,eAFA;;AAIjBC,WAAYA,UAJK;;;;;;;;AAYjBI,kBAAmB,2BAASC,GAAT,CAAc;AAC/B,MAAOA,OAAQC,SAAR,EAAqBD,MAAQ,IAA7B,CAAoC,EAApC,CAAyCA,GAAhD;AACD,CAdgB;;;;;;;;;;AAwBjBE,oBAAqB,6BAASC,GAAT,CAAcC,GAAd,CAAmB;AACtCZ;AACEa,MAAMC,OAAN,CAAcH,GAAd,GAAsBE,MAAMC,OAAN,CAAcF,GAAd,CADxB;AAEE,+CAFF;AAGED,GAHF;AAIEC,GAJF;;AAMD,CA/BgB;;;;;;AAqCjBG,qBAAsB,8BAASJ,GAAT,CAAcC,GAAd,CAAmB;AACvCN,aAAaU,mBAAb,CAAiCL,GAAjC;AACAL,aAAaU,mBAAb,CAAiCJ,GAAjC;AACD,CAxCgB;;;;;AA6CjBI,oBAAqB,6BAASR,GAAT,CAAc;AACjCR;AACE,CAACG,WAAWK,GAAX,CAAD,EAAoB,CAACK,MAAMC,OAAN,CAAcN,GAAd,CADvB;AAEE,2CAFF;AAGEA,GAHF;;AAKD,CAnDgB;;;;;AAwDjBS,wBAAyB,iCAAST,GAAT,CAAc;AACrCR;AACE,CAAC,CAACG,WAAWK,GAAX,CAAD,EAAoB,MAAOA,IAAP,GAAe,UAApC,GAAmD,CAACK,MAAMC,OAAN,CAAcN,GAAd,CADtD;AAEE,gDAFF;AAGEA,GAHF;;AAKD,CA9DgB;;;;;;;;AAsEjBU,gBAAiB,yBAASC,KAAT,CAAgB;AAC/BnB;AACEmB,MAAQjB,eADV;AAEE;AACA,4CAHF;;AAKD,CA5EgB;;;;;;;AAmFjBkB,mBAAoB,4BAASC,QAAT,CAAmB;AACrCrB;AACEqB,WAAaZ,SAAb,EAA0BY,WAAYf,cAAagB,eADrD;AAEE;AACA,4DAHF;;AAKD,CAzFgB;;;;;;;;;AAkGjBA,gBAAiB;AACfC,QAAS,SADM;AAEfC,OAAQ,QAFO;AAGfC,aAAc,cAHC,CAlGA,CAAnB;;;;;AA0GAC,OAAOC,OAAP,CAAiBrB,YAAjB,C,0GAtHIJ,e,qKAQAC,U,gKAIAG,Y","file":"mergeHelpers.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mergeHelpers\n *\n * requiresPolyfills: Array.isArray\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nvar MAX_MERGE_DEPTH = 36;\n\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions and Dates are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nvar isTerminal = function(o) {\n  return typeof o !== 'object' || o instanceof Date || o === null;\n};\n\nvar mergeHelpers = {\n\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    invariant(\n      Array.isArray(one) && Array.isArray(two),\n      'Tried to merge arrays, instead got %s and %s.',\n      one,\n      two\n    );\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    invariant(\n      !isTerminal(arg) && !Array.isArray(arg),\n      'Tried to merge an object, instead got %s.',\n      arg\n    );\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeIntoObjectArg: function(arg) {\n    invariant(\n      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),\n      'Tried to merge into an object, instead got %s.',\n      arg\n    );\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    invariant(\n      level < MAX_MERGE_DEPTH,\n      'Maximum deep merge depth exceeded. You may be attempting to merge ' +\n      'circular structures in an unsupported way.'\n    );\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    invariant(\n      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,\n      'You must provide an array strategy to deep merge functions to ' +\n      'instruct the deep merge how to resolve merging two arrays.'\n    );\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: {\n    Clobber: 'Clobber',\n    Concat: 'Concat',\n    IndexByIndex: 'IndexByIndex',\n  },\n\n};\n\nmodule.exports = mergeHelpers;\n"]}