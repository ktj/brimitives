{"version":3,"sources":["node_modules/react-native/Libraries/Inspector/InspectorPanel.js"],"names":["ElementProperties","require","NetworkOverlay","PerformanceOverlay","React","PropTypes","ScrollView","StyleSheet","Text","TouchableHighlight","View","InspectorPanel","props","inspecting","styles","waitingText","contents","inspected","properties","style","frame","source","hierarchy","selection","setSelection","perfing","networking","waiting","renderWaiting","container","devtoolsIsOpen","buttonRow","setInspecting","setPerfing","setNetworking","touchTargetting","setTouchTargetting","Component","propTypes","bool","func","object","Button","onClick","pressed","button","buttonPressed","buttonText","title","create","flexDirection","backgroundColor","margin","height","justifyContent","alignItems","textAlign","color","fontSize","marginVertical","module","exports"],"mappings":"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","file":"InspectorPanel.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule InspectorPanel\n * @flow\n */\n'use strict';\n\nconst ElementProperties = require('ElementProperties');\nconst NetworkOverlay = require('NetworkOverlay');\nconst PerformanceOverlay = require('PerformanceOverlay');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableHighlight = require('TouchableHighlight');\nconst View = require('View');\n\nclass InspectorPanel extends React.Component {\n  renderWaiting() {\n    if (this.props.inspecting) {\n      return (\n        <Text style={styles.waitingText}>\n          Tap something to inspect it\n        </Text>\n      );\n    }\n    return <Text style={styles.waitingText}>Nothing is inspected</Text>;\n  }\n\n  render() {\n    let contents;\n    if (this.props.inspected) {\n      contents = (\n        <ScrollView style={styles.properties}>\n          <ElementProperties\n            style={this.props.inspected.style}\n            frame={this.props.inspected.frame}\n            source={this.props.inspected.source}\n            hierarchy={this.props.hierarchy}\n            selection={this.props.selection}\n            setSelection={this.props.setSelection}\n          />\n        </ScrollView>\n      );\n    } else if (this.props.perfing) {\n      contents = (\n        <PerformanceOverlay />\n      );\n    } else if (this.props.networking) {\n      contents = (\n        <NetworkOverlay />\n      );\n    } else {\n      contents = (\n        <View style={styles.waiting}>\n          {this.renderWaiting()}\n        </View>\n      );\n    }\n    return (\n      <View style={styles.container}>\n        {!this.props.devtoolsIsOpen && contents}\n        <View style={styles.buttonRow}>\n          <Button\n            title={'Inspect'}\n            pressed={this.props.inspecting}\n            onClick={this.props.setInspecting}\n          />\n          <Button title={'Perf'}\n            pressed={this.props.perfing}\n            onClick={this.props.setPerfing}\n          />\n          <Button title={'Network'}\n            pressed={this.props.networking}\n            onClick={this.props.setNetworking}\n          />\n          <Button title={'Touchables'}\n            pressed={this.props.touchTargetting}\n            onClick={this.props.setTouchTargetting}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nInspectorPanel.propTypes = {\n  devtoolsIsOpen: PropTypes.bool,\n  inspecting: PropTypes.bool,\n  setInspecting: PropTypes.func,\n  inspected: PropTypes.object,\n  perfing: PropTypes.bool,\n  setPerfing: PropTypes.func,\n  touchTargetting: PropTypes.bool,\n  setTouchTargetting: PropTypes.func,\n  networking: PropTypes.bool,\n  setNetworking: PropTypes.func,\n};\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <TouchableHighlight onPress={() => this.props.onClick(!this.props.pressed)} style={[\n        styles.button,\n        this.props.pressed && styles.buttonPressed\n      ]}>\n        <Text style={styles.buttonText}>{this.props.title}</Text>\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5,\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n  },\n  properties: {\n    height: 200,\n  },\n  waiting: {\n    height: 100,\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white',\n  },\n});\n\nmodule.exports = InspectorPanel;\n"]}