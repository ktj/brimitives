{"version":3,"sources":["node_modules/react-native/Libraries/Components/ToolbarAndroid/ToolbarAndroid.android.js"],"names":["Image","require","NativeMethodsMixin","React","PropTypes","ReactNativeViewAttributes","UIManager","ViewPropTypes","ColorPropType","createReactClass","requireNativeComponent","resolveAssetSource","optionalImageSource","oneOfType","propTypes","source","oneOf","ToolbarAndroid","displayName","mixins","actions","arrayOf","shape","title","string","isRequired","icon","show","showWithText","bool","logo","navIcon","onActionSelected","func","onIconClicked","overflowIcon","subtitle","subtitleColor","titleColor","contentInsetStart","number","contentInsetEnd","rtl","testID","render","nativeProps","props","nativeActions","i","length","action","Constants","ShowAsAction","push","_onSelect","event","position","nativeEvent","NativeToolbar","nativeOnly","module","exports"],"mappings":"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","file":"ToolbarAndroid.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ToolbarAndroid\n */\n\n'use strict';\n\nvar Image = require('Image');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nvar UIManager = require('UIManager');\nvar ViewPropTypes = require('ViewPropTypes');\nvar ColorPropType = require('ColorPropType');\n\nvar createReactClass = require('create-react-class');\nvar requireNativeComponent = require('requireNativeComponent');\nvar resolveAssetSource = require('resolveAssetSource');\n\nvar optionalImageSource = PropTypes.oneOfType([\n  Image.propTypes.source,\n  // Image.propTypes.source is required but we want it to be optional, so we OR\n  // it with a nullable propType.\n  PropTypes.oneOf([]),\n]);\n\n/**\n * React component that wraps the Android-only [`Toolbar` widget][0]. A Toolbar can display a logo,\n * navigation icon (e.g. hamburger menu), a title & subtitle and a list of actions. The title and\n * subtitle are expanded so the logo and navigation icons are displayed on the left, title and\n * subtitle in the middle and the actions on the right.\n *\n * If the toolbar has an only child, it will be displayed between the title and actions.\n *\n * Although the Toolbar supports remote images for the logo, navigation and action icons, this\n * should only be used in DEV mode where `require('./some_icon.png')` translates into a packager\n * URL. In release mode you should always use a drawable resource for these icons. Using\n * `require('./some_icon.png')` will do this automatically for you, so as long as you don't\n * explicitly use e.g. `{uri: 'http://...'}`, you will be good.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <ToolbarAndroid\n *       logo={require('./app_logo.png')}\n *       title=\"AwesomeApp\"\n *       actions={[{title: 'Settings', icon: require('./icon_settings.png'), show: 'always'}]}\n *       onActionSelected={this.onActionSelected} />\n *   )\n * },\n * onActionSelected: function(position) {\n *   if (position === 0) { // index of 'Settings'\n *     showSettings();\n *   }\n * }\n * ```\n *\n * [0]: https://developer.android.com/reference/android/support/v7/widget/Toolbar.html\n */\nvar ToolbarAndroid = createReactClass({\n  displayName: 'ToolbarAndroid',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Sets possible actions on the toolbar as part of the action menu. These are displayed as icons\n     * or text on the right side of the widget. If they don't fit they are placed in an 'overflow'\n     * menu.\n     *\n     * This property takes an array of objects, where each object has the following keys:\n     *\n     * * `title`: **required**, the title of this action\n     * * `icon`: the icon for this action, e.g. `require('./some_icon.png')`\n     * * `show`: when to show this action as an icon or hide it in the overflow menu: `always`,\n     * `ifRoom` or `never`\n     * * `showWithText`: boolean, whether to show text alongside the icon or not\n     */\n    actions: PropTypes.arrayOf(PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      icon: optionalImageSource,\n      show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: PropTypes.bool\n    })),\n    /**\n     * Sets the toolbar logo.\n     */\n    logo: optionalImageSource,\n    /**\n     * Sets the navigation icon.\n     */\n    navIcon: optionalImageSource,\n    /**\n     * Callback that is called when an action is selected. The only argument that is passed to the\n     * callback is the position of the action in the actions array.\n     */\n    onActionSelected: PropTypes.func,\n    /**\n     * Callback called when the icon is selected.\n     */\n    onIconClicked: PropTypes.func,\n    /**\n     * Sets the overflow icon.\n     */\n    overflowIcon: optionalImageSource,\n    /**\n     * Sets the toolbar subtitle.\n     */\n    subtitle: PropTypes.string,\n    /**\n     * Sets the toolbar subtitle color.\n     */\n    subtitleColor: ColorPropType,\n    /**\n     * Sets the toolbar title.\n     */\n    title: PropTypes.string,\n    /**\n     * Sets the toolbar title color.\n     */\n    titleColor: ColorPropType,\n    /**\n     * Sets the content inset for the toolbar starting edge.\n     *\n     * The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for\n     * these components and can be used to effectively align Toolbar content\n     * along well-known gridlines.\n     */\n    contentInsetStart: PropTypes.number,\n    /**\n     * Sets the content inset for the toolbar ending edge.\n     *\n     * The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for\n     * these components and can be used to effectively align Toolbar content\n     * along well-known gridlines.\n     */\n    contentInsetEnd: PropTypes.number,\n    /**\n     * Used to set the toolbar direction to RTL.\n     * In addition to this property you need to add\n     *\n     *   android:supportsRtl=\"true\"\n     *\n     * to your application AndroidManifest.xml and then call\n     * `setLayoutDirection(LayoutDirection.RTL)` in your MainActivity\n     * `onCreate` method.\n     */\n    rtl: PropTypes.bool,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  },\n\n  render: function() {\n    var nativeProps = {\n      ...this.props,\n    };\n    if (this.props.logo) {\n      nativeProps.logo = resolveAssetSource(this.props.logo);\n    }\n    if (this.props.navIcon) {\n      nativeProps.navIcon = resolveAssetSource(this.props.navIcon);\n    }\n    if (this.props.overflowIcon) {\n      nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);\n    }\n    if (this.props.actions) {\n      var nativeActions = [];\n      for (var i = 0; i < this.props.actions.length; i++) {\n        var action = {\n          ...this.props.actions[i],\n        };\n        if (action.icon) {\n          action.icon = resolveAssetSource(action.icon);\n        }\n        if (action.show) {\n          action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];\n        }\n        nativeActions.push(action);\n      }\n      nativeProps.nativeActions = nativeActions;\n    }\n\n    return <NativeToolbar onSelect={this._onSelect} {...nativeProps} />;\n  },\n\n  _onSelect: function(event) {\n    var position = event.nativeEvent.position;\n    if (position === -1) {\n      this.props.onIconClicked && this.props.onIconClicked();\n    } else {\n      this.props.onActionSelected && this.props.onActionSelected(position);\n    }\n  },\n});\n\nvar NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {\n  nativeOnly: {\n    nativeActions: true,\n  }\n});\n\nmodule.exports = ToolbarAndroid;\n"]}