{"version":3,"sources":["node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js"],"names":["Animated","require","React","StyleSheet","ScrollViewStickyHeader","props","context","_onLayout","state","measured","layoutY","layoutHeight","nextHeaderLayoutY","y","setState","event","nativeEvent","layout","height","onLayout","child","Children","only","children","inputRange","outputRange","push","collisionPoint","translateY","scrollAnimatedValue","interpolate","style","styles","header","transform","cloneElement","fill","undefined","Component","create","zIndex","flex","module","exports"],"mappings":"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","file":"ScrollViewStickyHeader.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ScrollViewStickyHeader\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\n\ntype Props = {\n  children?: React.Element<*>,\n  nextHeaderLayoutY: ?number,\n  onLayout: (event: Object) => void,\n  scrollAnimatedValue: Animated.Value,\n};\n\nclass ScrollViewStickyHeader extends React.Component {\n  props: Props;\n  state: {\n    measured: boolean,\n    layoutY: number,\n    layoutHeight: number,\n    nextHeaderLayoutY: ?number,\n  };\n\n  constructor(props: Props, context: Object) {\n    super(props, context);\n    this.state = {\n      measured: false,\n      layoutY: 0,\n      layoutHeight: 0,\n      nextHeaderLayoutY: props.nextHeaderLayoutY,\n    };\n  }\n\n  setNextHeaderY(y: number) {\n    this.setState({ nextHeaderLayoutY: y });\n  }\n\n  _onLayout = (event) => {\n    this.setState({\n      measured: true,\n      layoutY: event.nativeEvent.layout.y,\n      layoutHeight: event.nativeEvent.layout.height,\n    });\n\n    this.props.onLayout(event);\n    const child = React.Children.only(this.props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n\n  render() {\n    const {measured, layoutHeight, layoutY, nextHeaderLayoutY} = this.state;\n    const inputRange: Array<number> = [-1, 0];\n    const outputRange: Array<number> = [0, 0];\n\n    if (measured) {\n      // The interpolation looks like:\n      // - Negative scroll: no translation\n      // - From 0 to the y of the header: no translation. This will cause the header\n      //   to scroll normally until it reaches the top of the scroll view.\n      // - From header y to when the next header y hits the bottom edge of the header: translate\n      //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n      // - Past the collision with the next header y: no more translation. This will cause the\n      // header to continue scrolling up and make room for the next sticky header.\n      // In the case that there is no next header just translate equally to\n      // scroll indefinetly.\n      inputRange.push(layoutY);\n      outputRange.push(0);\n      // Sometimes headers jump around so we make sure we don't violate the monotonic inputRange\n      // condition.\n      const collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n      if (collisionPoint >= layoutY) {\n        inputRange.push(collisionPoint, collisionPoint + 1);\n        outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);\n      } else {\n        inputRange.push(layoutY + 1);\n        outputRange.push(1);\n      }\n    }\n\n    const translateY = this.props.scrollAnimatedValue.interpolate({\n      inputRange,\n      outputRange,\n    });\n    const child = React.Children.only(this.props.children);\n\n    return (\n      <Animated.View\n        collapsable={false}\n        onLayout={this._onLayout}\n        style={[child.props.style, styles.header, {transform: [{translateY}]}]}>\n        {React.cloneElement(child, {\n          style: styles.fill, // We transfer the child style to the wrapper.\n          onLayout: undefined, // we call this manually through our this._onLayout\n        })}\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n  },\n  fill: {\n    flex: 1,\n  },\n});\n\nmodule.exports = ScrollViewStickyHeader;\n"]}