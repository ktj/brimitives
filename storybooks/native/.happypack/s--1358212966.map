{"version":3,"sources":["node_modules/react-native/Libraries/Components/TextInput/TextInputState.js"],"names":["Platform","require","UIManager","TextInputState","_currentlyFocusedID","currentlyFocusedField","focusTextInput","textFieldID","OS","focus","dispatchViewManagerCommand","AndroidTextInput","Commands","blurTextInput","blur","module","exports"],"mappings":";;;;;;;;;;;;;;;AAeA;;AAEA,GAAIA,UAAWC,QAAQ,UAAR,CAAf;AACA,GAAIC,WAAYD,QAAQ,WAAR,CAAhB;;AAEA,GAAIE,gBAAiB;;;;AAInBC,oBAAsB,IAJH;;;;;;AAUnBC,sBAAuB,gCAAoB;AACzC,MAAO,MAAKD,mBAAZ;AACD,CAZkB;;;;;;;AAmBnBE,eAAgB,wBAASC,WAAT,CAA+B;AAC7C,GAAI,KAAKH,mBAAL,GAA6BG,WAA7B,EAA4CA,cAAgB,IAAhE,CAAsE;AACpE,KAAKH,mBAAL,CAA2BG,WAA3B;AACA,GAAIP,SAASQ,EAAT,GAAgB,KAApB,CAA2B;AACzBN,UAAUO,KAAV,CAAgBF,WAAhB;AACD,CAFD,IAEO,IAAIP,SAASQ,EAAT,GAAgB,SAApB,CAA+B;AACpCN,UAAUQ,0BAAV;AACEH,WADF;AAEEL,UAAUS,gBAAV,CAA2BC,QAA3B,CAAoCN,cAFtC;AAGE,IAHF;;AAKD;AACF;AACF,CAhCkB;;;;;;;AAuCnBO,cAAe,uBAASN,WAAT,CAA+B;AAC5C,GAAI,KAAKH,mBAAL,GAA6BG,WAA7B,EAA4CA,cAAgB,IAAhE,CAAsE;AACpE,KAAKH,mBAAL,CAA2B,IAA3B;AACA,GAAIJ,SAASQ,EAAT,GAAgB,KAApB,CAA2B;AACzBN,UAAUY,IAAV,CAAeP,WAAf;AACD,CAFD,IAEO,IAAIP,SAASQ,EAAT,GAAgB,SAApB,CAA+B;AACpCN,UAAUQ,0BAAV;AACEH,WADF;AAEEL,UAAUS,gBAAV,CAA2BC,QAA3B,CAAoCC,aAFtC;AAGE,IAHF;;AAKD;AACF;AACF,CApDkB,CAArB;;;AAuDAE,OAAOC,OAAP,CAAiBb,cAAjB,C,0GAvDIA,c","file":"TextInputState.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TextInputState\n * @flow\n *\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\n'use strict';\n\nvar Platform = require('Platform');\nvar UIManager = require('UIManager');\n\nvar TextInputState = {\n   /**\n   * Internal state\n   */\n  _currentlyFocusedID: (null: ?number),\n\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField: function(): ?number {\n    return this._currentlyFocusedID;\n  },\n\n  /**\n   * @param {number} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput: function(textFieldID: ?number) {\n    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {\n      this._currentlyFocusedID = textFieldID;\n      if (Platform.OS === 'ios') {\n        UIManager.focus(textFieldID);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(\n          textFieldID,\n          UIManager.AndroidTextInput.Commands.focusTextInput,\n          null\n        );\n      }\n    }\n  },\n\n  /**\n   * @param {number} textFieldID id of the text field to unfocus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput: function(textFieldID: ?number) {\n    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {\n      this._currentlyFocusedID = null;\n      if (Platform.OS === 'ios') {\n        UIManager.blur(textFieldID);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(\n          textFieldID,\n          UIManager.AndroidTextInput.Commands.blurTextInput,\n          null\n        );\n      }\n    }\n  }\n};\n\nmodule.exports = TextInputState;\n"]}