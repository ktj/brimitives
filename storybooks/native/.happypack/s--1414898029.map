{"version":3,"sources":["node_modules/react-native/Libraries/Image/resolveAssetSource.js"],"names":["AssetRegistry","require","AssetSourceResolver","NativeModules","_customSourceTransformer","_serverURL","_bundleSourcePath","getDevServerURL","undefined","scriptURL","SourceCode","match","getBundleSourcePath","startsWith","substring","lastIndexOf","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","module","exports","pickScale"],"mappings":";;;;;;;;;;;;;AAaA;;AAEA,GAAMA,eAAgBC,QAAQ,eAAR,CAAtB;AACA,GAAMC,qBAAsBD,QAAQ,qBAAR,CAA5B;AACA,GAAME,eAAgBF,QAAQ,eAAR,CAAtB;;;;AAIA,GAAIG,gCAAJ,CAA8BC,iBAA9B,CAA0CC,wBAA1C;;AAEA,QAASC,gBAAT,EAAoC;AAClC,GAAIF,aAAeG,SAAnB,CAA8B;AAC5B,GAAIC,WAAYN,cAAcO,UAAd,CAAyBD,SAAzC;AACA,GAAIE,OAAQF,WAAaA,UAAUE,KAAV,CAAgB,mBAAhB,CAAzB;AACA,GAAIA,KAAJ,CAAW;;AAETN,WAAaM,MAAM,CAAN,CAAb;AACD,CAHD,IAGO;;AAELN,WAAa,IAAb;AACD;AACF;AACD,MAAOA,WAAP;AACD;;AAED,QAASO,oBAAT,EAAwC;AACtC,GAAIN,oBAAsBE,SAA1B,CAAqC;AACnC,GAAMC,WAAYN,cAAcO,UAAd,CAAyBD,SAA3C;AACA,GAAI,CAACA,SAAL,CAAgB;;AAEdH,kBAAoB,IAApB;AACA,MAAOA,kBAAP;AACD;AACD,GAAIG,UAAUI,UAAV,CAAqB,WAArB,CAAJ,CAAuC;;AAErCP,kBAAoB,IAApB;AACA,MAAOA,kBAAP;AACD;AACD,GAAIG,UAAUI,UAAV,CAAqB,SAArB,CAAJ,CAAqC;;AAEnCP,kBAAoBG,UAAUK,SAAV,CAAoB,CAApB,CAAuBL,UAAUM,WAAV,CAAsB,GAAtB,EAA6B,CAApD,CAApB;AACD,CAHD,IAGO;AACLT,kBAAoBG,UAAUK,SAAV,CAAoB,CAApB,CAAuBL,UAAUM,WAAV,CAAsB,GAAtB,EAA6B,CAApD,CAApB;AACD;AACF;;AAED,MAAOT,kBAAP;AACD;;AAED,QAASU,2BAAT;AACEC,WADF;AAEQ;AACNb,yBAA2Ba,WAA3B;AACD;;;;;;AAMD,QAASC,mBAAT,CAA4BC,MAA5B,CAA+D;AAC7D,GAAI,MAAOA,OAAP,GAAkB,QAAtB,CAAgC;AAC9B,MAAOA,OAAP;AACD;;AAED,GAAIC,OAAQpB,cAAcqB,YAAd,CAA2BF,MAA3B,CAAZ;AACA,GAAI,CAACC,KAAL,CAAY;AACV,MAAO,KAAP;AACD;;AAED,GAAME,UAAW,GAAIpB,oBAAJ,CAAwBK,iBAAxB,CAA2CK,qBAA3C,CAAkEQ,KAAlE,CAAjB;AACA,GAAIhB,wBAAJ,CAA8B;AAC5B,MAAOA,0BAAyBkB,QAAzB,CAAP;AACD;AACD,MAAOA,UAASC,YAAT,EAAP;AACD;;AAEDC,OAAOC,OAAP,CAAiBP,kBAAjB;AACAM,OAAOC,OAAP,CAAeC,SAAf,CAA2BxB,oBAAoBwB,SAA/C;AACAF,OAAOC,OAAP,CAAeT,0BAAf,CAA4CA,0BAA5C,C,0GAtEIZ,wB,8KAA0BC,U,gKAAYC,iB,uKAEjCC,e,qKAeAK,mB,yKAwBAI,0B,gLAUAE,kB","file":"resolveAssetSource.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule resolveAssetSource\n * @flow\n *\n * Resolves an asset into a `source` for `Image`.\n */\n'use strict';\n\nconst AssetRegistry = require('AssetRegistry');\nconst AssetSourceResolver = require('AssetSourceResolver');\nconst NativeModules = require('NativeModules');\n\nimport type { ResolvedAssetSource } from 'AssetSourceResolver';\n\nlet _customSourceTransformer, _serverURL, _bundleSourcePath;\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    var scriptURL = NativeModules.SourceCode.scriptURL;\n    var match = scriptURL && scriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // Bundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // Bundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction getBundleSourcePath(): ?string {\n  if (_bundleSourcePath === undefined) {\n    const scriptURL = NativeModules.SourceCode.scriptURL;\n    if (!scriptURL) {\n      // scriptURL is falsy, we have nothing to go on here\n      _bundleSourcePath = null;\n      return _bundleSourcePath;\n    }\n    if (scriptURL.startsWith('assets://')) {\n      // running from within assets, no offline path to use\n      _bundleSourcePath = null;\n      return _bundleSourcePath;\n    }\n    if (scriptURL.startsWith('file://')) {\n      // cut off the protocol\n      _bundleSourcePath = scriptURL.substring(7, scriptURL.lastIndexOf('/') + 1);\n    } else {\n      _bundleSourcePath = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    }\n  }\n\n  return _bundleSourcePath;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), getBundleSourcePath(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = AssetSourceResolver.pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;\n"]}