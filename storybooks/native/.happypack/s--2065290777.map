{"version":3,"sources":["node_modules/react-native/Libraries/Components/WebView/WebView.ios.js"],"names":["ActivityIndicator","require","EdgeInsetsPropType","React","PropTypes","ReactNative","StyleSheet","Text","UIManager","View","ViewPropTypes","ScrollView","deprecatedPropType","invariant","keyMirror","processDecelerationRate","requireNativeComponent","resolveAssetSource","RCTWebViewManager","WebViewManager","BGWASH","RCT_WEBVIEW_REF","WebViewState","IDLE","LOADING","ERROR","NavigationType","click","formsubmit","backforward","reload","formresubmit","other","JSNavigationScheme","DataDetectorTypes","defaultRenderLoading","styles","loadingView","defaultRenderError","errorDomain","errorCode","errorDesc","errorContainer","errorTextTitle","errorText","WebView","state","viewState","lastErrorEvent","startInLoadingState","goForward","goBack","stopLoading","postMessage","injectJavaScript","_updateNavigationState","getWebViewHandle","_onLoadingStart","_onLoadingError","_onLoadingFinish","_onMessage","props","setState","otherView","renderLoading","errorEvent","renderError","domain","code","description","console","error","loading","webViewStyles","container","webView","style","push","hidden","onShouldStartLoadWithRequest","event","shouldStart","nativeEvent","startLoadWithResult","lockIdentifier","decelerationRate","source","html","url","uri","messagingEnabled","onMessage","injectedJavaScript","bounces","scrollEnabled","contentInset","automaticallyAdjustContentInsets","scalesPageToFit","allowsInlineMediaPlayback","mediaPlaybackRequiresUserAction","dataDetectorTypes","dispatchViewManagerCommand","RCTWebView","Commands","data","String","onNavigationStateChange","findNodeHandle","refs","onLoadStart","persist","onError","onLoadEnd","warn","onLoad","Component","propTypes","string","oneOfType","shape","method","headers","object","body","baseUrl","number","func","bool","oneOf","arrayOf","javaScriptEnabled","thirdPartyCookiesEnabled","domStorageEnabled","userAgent","mixedContentMode","defaultProps","nativeOnly","onLoadingStart","onLoadingError","onLoadingFinish","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","marginBottom","fontWeight","height","module","exports"],"mappings":"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","file":"WebView.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule WebView\n * @noflow\n */\n'use strict';\n\nvar ActivityIndicator = require('ActivityIndicator');\nvar EdgeInsetsPropType = require('EdgeInsetsPropType');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar StyleSheet = require('StyleSheet');\nvar Text = require('Text');\nvar UIManager = require('UIManager');\nvar View = require('View');\nvar ViewPropTypes = require('ViewPropTypes');\nvar ScrollView = require('ScrollView');\n\nvar deprecatedPropType = require('deprecatedPropType');\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar processDecelerationRate = require('processDecelerationRate');\nvar requireNativeComponent = require('requireNativeComponent');\nvar resolveAssetSource = require('resolveAssetSource');\n\nvar RCTWebViewManager = require('NativeModules').WebViewManager;\n\nvar BGWASH = 'rgba(255,255,255,0.8)';\nvar RCT_WEBVIEW_REF = 'webview';\n\nvar WebViewState = keyMirror({\n  IDLE: null,\n  LOADING: null,\n  ERROR: null,\n});\n\nconst NavigationType = keyMirror({\n  click: true,\n  formsubmit: true,\n  backforward: true,\n  reload: true,\n  formresubmit: true,\n  other: true,\n});\n\nconst JSNavigationScheme = 'react-js-navigation';\n\ntype ErrorEvent = {\n  domain: any,\n  code: any,\n  description: any,\n}\n\ntype Event = Object;\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\nvar defaultRenderLoading = () => (\n  <View style={styles.loadingView}>\n    <ActivityIndicator />\n  </View>\n);\nvar defaultRenderError = (errorDomain, errorCode, errorDesc) => (\n  <View style={styles.errorContainer}>\n    <Text style={styles.errorTextTitle}>\n      Error loading page\n    </Text>\n    <Text style={styles.errorText}>\n      {'Domain: ' + errorDomain}\n    </Text>\n    <Text style={styles.errorText}>\n      {'Error Code: ' + errorCode}\n    </Text>\n    <Text style={styles.errorText}>\n      {'Description: ' + errorDesc}\n    </Text>\n  </View>\n);\n\n/**\n * `WebView` renders web content in a native view.\n *\n *```\n * import React, { Component } from 'react';\n * import { WebView } from 'react-native';\n *\n * class MyWeb extends Component {\n *   render() {\n *     return (\n *       <WebView\n *         source={{uri: 'https://github.com/facebook/react-native'}}\n *         style={{marginTop: 20}}\n *       />\n *     );\n *   }\n * }\n *```\n *\n * You can use this component to navigate back and forth in the web view's\n * history and configure various properties for the web content.\n */\nclass WebView extends React.Component {\n  static JSNavigationScheme = JSNavigationScheme;\n  static NavigationType = NavigationType;\n\n  static propTypes = {\n    ...ViewPropTypes,\n\n    html: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    url: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    /**\n     * Loads static html or a uri (with optional headers) in the WebView.\n     */\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        /*\n         * The URI to load in the `WebView`. Can be a local or remote file.\n         */\n        uri: PropTypes.string,\n        /*\n         * The HTTP Method to use. Defaults to GET if not specified.\n         * NOTE: On Android, only GET and POST are supported.\n         */\n        method: PropTypes.string,\n        /*\n         * Additional HTTP headers to send with the request.\n         * NOTE: On Android, this can only be used with GET requests.\n         */\n        headers: PropTypes.object,\n        /*\n         * The HTTP body to send with the request. This must be a valid\n         * UTF-8 string, and will be sent exactly as specified, with no\n         * additional encoding (e.g. URL-escaping or base64) applied.\n         * NOTE: On Android, this can only be used with POST requests.\n         */\n        body: PropTypes.string,\n      }),\n      PropTypes.shape({\n        /*\n         * A static HTML page to display in the WebView.\n         */\n        html: PropTypes.string,\n        /*\n         * The base URL to be used for any relative links in the HTML.\n         */\n        baseUrl: PropTypes.string,\n      }),\n      /*\n       * Used internally by packager.\n       */\n      PropTypes.number,\n    ]),\n\n    /**\n     * Function that returns a view to show if there's an error.\n     */\n    renderError: PropTypes.func, // view to show if there's an error\n    /**\n     * Function that returns a loading indicator.\n     */\n    renderLoading: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` has finished loading.\n     */\n    onLoad: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` load succeeds or fails.\n     */\n    onLoadEnd: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` starts loading.\n     */\n    onLoadStart: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` load fails.\n     */\n    onError: PropTypes.func,\n    /**\n     * Boolean value that determines whether the web view bounces\n     * when it reaches the edge of the content. The default value is `true`.\n     * @platform ios\n     */\n    bounces: PropTypes.bool,\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use the\n     * string shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS\n     * settings for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively:\n     *\n     *   - normal: 0.998\n     *   - fast: 0.99 (the default for iOS web view)\n     * @platform ios\n     */\n    decelerationRate: ScrollView.propTypes.decelerationRate,\n    /**\n     * Boolean value that determines whether scrolling is enabled in the\n     * `WebView`. The default value is `true`.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * Controls whether to adjust the content inset for web views that are\n     * placed behind a navigation bar, tab bar, or toolbar. The default value\n     * is `true`.\n     */\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    /**\n     * The amount by which the web view content is inset from the edges of\n     * the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.\n     */\n    contentInset: EdgeInsetsPropType,\n    /**\n     * Function that is invoked when the `WebView` loading starts or ends.\n     */\n    onNavigationStateChange: PropTypes.func,\n    /**\n     * A function that is invoked when the webview calls `window.postMessage`.\n     * Setting this property will inject a `postMessage` global into your\n     * webview, but will still call pre-existing values of `postMessage`.\n     *\n     * `window.postMessage` accepts one argument, `data`, which will be\n     * available on the event object, `event.nativeEvent.data`. `data`\n     * must be a string.\n     */\n    onMessage: PropTypes.func,\n    /**\n     * Boolean value that forces the `WebView` to show the loading view\n     * on the first load.\n     */\n    startInLoadingState: PropTypes.bool,\n    /**\n     * The style to apply to the `WebView`.\n     */\n    style: ViewPropTypes.style,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the web view’s content.\n     * By default only phone numbers are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n\n    /**\n     * Boolean value to enable JavaScript in the `WebView`. Used on Android only\n     * as JavaScript is enabled by default on iOS. The default value is `true`.\n     * @platform android\n     */\n    javaScriptEnabled: PropTypes.bool,\n\n    /**\n     * Boolean value to enable third party cookies in the `WebView`. Used on\n     * Android Lollipop and above only as third party cookies are enabled by\n     * default on Android Kitkat and below and on iOS. The default value is `true`.\n     * @platform android\n     */\n    thirdPartyCookiesEnabled: PropTypes.bool,\n\n    /**\n     * Boolean value to control whether DOM Storage is enabled. Used only in\n     * Android.\n     * @platform android\n     */\n    domStorageEnabled: PropTypes.bool,\n\n    /**\n     * Set this to provide JavaScript that will be injected into the web page\n     * when the view loads.\n     */\n    injectedJavaScript: PropTypes.string,\n\n    /**\n     * Sets the user-agent for the `WebView`.\n     * @platform android\n     */\n    userAgent: PropTypes.string,\n\n    /**\n     * Boolean that controls whether the web content is scaled to fit\n     * the view and enables the user to change the scale. The default value\n     * is `true`.\n     */\n    scalesPageToFit: PropTypes.bool,\n\n    /**\n     * Function that allows custom handling of any web view requests. Return\n     * `true` from the function to continue loading the request and `false`\n     * to stop loading.\n     * @platform ios\n     */\n    onShouldStartLoadWithRequest: PropTypes.func,\n\n    /**\n     * Boolean that determines whether HTML5 videos play inline or use the\n     * native full-screen controller. The default value is `false`.\n     *\n     * **NOTE** : In order for video to play inline, not only does this\n     * property need to be set to `true`, but the video element in the HTML\n     * document must also include the `webkit-playsinline` attribute.\n     * @platform ios\n     */\n    allowsInlineMediaPlayback: PropTypes.bool,\n\n    /**\n     * Boolean that determines whether HTML5 audio and video requires the user\n     * to tap them before they start playing. The default value is `true`.\n     */\n    mediaPlaybackRequiresUserAction: PropTypes.bool,\n\n    /**\n     * Function that accepts a string that will be passed to the WebView and\n     * executed immediately as JavaScript.\n     */\n    injectJavaScript: PropTypes.func,\n\n    /**\n     * Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.\n     *\n     * Possible values for `mixedContentMode` are:\n     *\n     * - `'never'` (default) - WebView will not allow a secure origin to load content from an insecure origin.\n     * - `'always'` - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.\n     * - `'compatibility'` -  WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.\n     * @platform android\n     */\n    mixedContentMode: PropTypes.oneOf([\n      'never',\n      'always',\n      'compatibility'\n    ]),\n  };\n\n  static defaultProps = {\n    scalesPageToFit: true,\n  };\n\n  state = {\n    viewState: WebViewState.IDLE,\n    lastErrorEvent: (null: ?ErrorEvent),\n    startInLoadingState: true,\n  };\n\n  componentWillMount() {\n    if (this.props.startInLoadingState) {\n      this.setState({viewState: WebViewState.LOADING});\n    }\n  }\n\n  render() {\n    var otherView = null;\n\n    if (this.state.viewState === WebViewState.LOADING) {\n      otherView = (this.props.renderLoading || defaultRenderLoading)();\n    } else if (this.state.viewState === WebViewState.ERROR) {\n      var errorEvent = this.state.lastErrorEvent;\n      invariant(\n        errorEvent != null,\n        'lastErrorEvent expected to be non-null'\n      );\n      otherView = (this.props.renderError || defaultRenderError)(\n        errorEvent.domain,\n        errorEvent.code,\n        errorEvent.description\n      );\n    } else if (this.state.viewState !== WebViewState.IDLE) {\n      console.error(\n        'RCTWebView invalid state encountered: ' + this.state.loading\n      );\n    }\n\n    var webViewStyles = [styles.container, styles.webView, this.props.style];\n    if (this.state.viewState === WebViewState.LOADING ||\n      this.state.viewState === WebViewState.ERROR) {\n      // if we're in either LOADING or ERROR states, don't show the webView\n      webViewStyles.push(styles.hidden);\n    }\n\n    var onShouldStartLoadWithRequest = this.props.onShouldStartLoadWithRequest && ((event: Event) => {\n      var shouldStart = this.props.onShouldStartLoadWithRequest &&\n        this.props.onShouldStartLoadWithRequest(event.nativeEvent);\n      RCTWebViewManager.startLoadWithResult(!!shouldStart, event.nativeEvent.lockIdentifier);\n    });\n\n    var decelerationRate = processDecelerationRate(this.props.decelerationRate);\n\n    var source = this.props.source || {};\n    if (this.props.html) {\n      source.html = this.props.html;\n    } else if (this.props.url) {\n      source.uri = this.props.url;\n    }\n\n    const messagingEnabled = typeof this.props.onMessage === 'function';\n\n    var webView =\n      <RCTWebView\n        ref={RCT_WEBVIEW_REF}\n        key=\"webViewKey\"\n        style={webViewStyles}\n        source={resolveAssetSource(source)}\n        injectedJavaScript={this.props.injectedJavaScript}\n        bounces={this.props.bounces}\n        scrollEnabled={this.props.scrollEnabled}\n        decelerationRate={decelerationRate}\n        contentInset={this.props.contentInset}\n        automaticallyAdjustContentInsets={this.props.automaticallyAdjustContentInsets}\n        onLoadingStart={this._onLoadingStart}\n        onLoadingFinish={this._onLoadingFinish}\n        onLoadingError={this._onLoadingError}\n        messagingEnabled={messagingEnabled}\n        onMessage={this._onMessage}\n        onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}\n        scalesPageToFit={this.props.scalesPageToFit}\n        allowsInlineMediaPlayback={this.props.allowsInlineMediaPlayback}\n        mediaPlaybackRequiresUserAction={this.props.mediaPlaybackRequiresUserAction}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n      />;\n\n    return (\n      <View style={styles.container}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n\n  /**\n   * Go forward one page in the web view's history.\n   */\n  goForward = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goForward,\n      null\n    );\n  };\n\n  /**\n   * Go back one page in the web view's history.\n   */\n  goBack = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goBack,\n      null\n    );\n  };\n\n  /**\n   * Reloads the current page.\n   */\n  reload = () => {\n    this.setState({viewState: WebViewState.LOADING});\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.reload,\n      null\n    );\n  };\n\n  /**\n   * Stop loading the current page.\n   */\n  stopLoading = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.stopLoading,\n      null\n    );\n  };\n\n  /**\n   * Posts a message to the web view, which will emit a `message` event.\n   * Accepts one argument, `data`, which must be a string.\n   *\n   * In your webview, you'll need to something like the following.\n   *\n   * ```js\n   * document.addEventListener('message', e => { document.title = e.data; });\n   * ```\n   */\n  postMessage = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.postMessage,\n      [String(data)]\n    );\n  };\n\n  /**\n  * Injects a javascript string into the referenced WebView. Deliberately does not\n  * return a response because using eval() to return a response breaks this method\n  * on pages with a Content Security Policy that disallows eval(). If you need that\n  * functionality, look into postMessage/onMessage.\n  */\n  injectJavaScript = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.injectJavaScript,\n      [data]\n    );\n  };\n\n  /**\n   * We return an event with a bunch of fields including:\n   *  url, title, loading, canGoBack, canGoForward\n   */\n  _updateNavigationState = (event: Event) => {\n    if (this.props.onNavigationStateChange) {\n      this.props.onNavigationStateChange(event.nativeEvent);\n    }\n  };\n\n  /**\n   * Returns the native `WebView` node.\n   */\n  getWebViewHandle = (): any => {\n    return ReactNative.findNodeHandle(this.refs[RCT_WEBVIEW_REF]);\n  };\n\n  _onLoadingStart = (event: Event) => {\n    var onLoadStart = this.props.onLoadStart;\n    onLoadStart && onLoadStart(event);\n    this._updateNavigationState(event);\n  };\n\n  _onLoadingError = (event: Event) => {\n    event.persist(); // persist this event because we need to store it\n    var {onError, onLoadEnd} = this.props;\n    onError && onError(event);\n    onLoadEnd && onLoadEnd(event);\n    console.warn('Encountered an error loading page', event.nativeEvent);\n\n    this.setState({\n      lastErrorEvent: event.nativeEvent,\n      viewState: WebViewState.ERROR\n    });\n  };\n\n  _onLoadingFinish = (event: Event) => {\n    var {onLoad, onLoadEnd} = this.props;\n    onLoad && onLoad(event);\n    onLoadEnd && onLoadEnd(event);\n    this.setState({\n      viewState: WebViewState.IDLE,\n    });\n    this._updateNavigationState(event);\n  };\n\n  _onMessage = (event: Event) => {\n    var {onMessage} = this.props;\n    onMessage && onMessage(event);\n  }\n}\n\nvar RCTWebView = requireNativeComponent('RCTWebView', WebView, {\n  nativeOnly: {\n    onLoadingStart: true,\n    onLoadingError: true,\n    onLoadingFinish: true,\n    onMessage: true,\n    messagingEnabled: PropTypes.bool,\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: BGWASH,\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  errorTextTitle: {\n    fontSize: 15,\n    fontWeight: '500',\n    marginBottom: 10,\n  },\n  hidden: {\n    height: 0,\n    flex: 0, // disable 'flex:1' when hiding a View\n  },\n  loadingView: {\n    backgroundColor: BGWASH,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 100,\n  },\n  webView: {\n    backgroundColor: '#ffffff',\n  }\n});\n\nmodule.exports = WebView;\n"]}