{"version":3,"sources":["node_modules/react-native/Libraries/Alert/Alert.js"],"names":["AlertIOS","require","NativeModules","Platform","Alert","title","message","buttons","options","type","OS","console","warn","alert","AlertAndroid","config","cancelable","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","DialogManagerAndroid","showAlert","errorMessage","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,UAAWC,QAAQ,UAAR,CAAjB;AACA,GAAMC,eAAgBD,QAAQ,eAAR,CAAtB;AACA,GAAME,UAAWF,QAAQ,UAAR,CAAjB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DMG,K;;;AAGFC,K;AACAC,O;AACAC,O;AACAC,O;AACAC,I;AACM;AACN,GAAIN,SAASO,EAAT,GAAgB,KAApB,CAA2B;AACzB,GAAI,MAAOD,KAAP,GAAgB,WAApB,CAAiC;AAC/BE,QAAQC,IAAR,CAAa,6GAAb;AACAZ,SAASa,KAAT,CAAeR,KAAf,CAAsBC,OAAtB,CAA+BC,OAA/B,CAAwCE,IAAxC;AACA;AACD;AACDT,SAASa,KAAT,CAAeR,KAAf,CAAsBC,OAAtB,CAA+BC,OAA/B;AACD,CAPD,IAOO,IAAIJ,SAASO,EAAT,GAAgB,SAApB,CAA+B;AACpCI,aAAaD,KAAb,CAAmBR,KAAnB,CAA0BC,OAA1B,CAAmCC,OAAnC,CAA4CC,OAA5C;AACD;AACF,C;;;;;;AAMGM,Y;;;AAGFT,K;AACAC,O;AACAC,O;AACAC,O;AACM;AACN,GAAIO,QAAS;AACXV,MAAOA,OAAS,EADL;AAEXC,QAASA,SAAW,EAFT,CAAb;;;AAKA,GAAIE,OAAJ,CAAa;AACXO,mBAAaA,MAAb,EAAqBC,WAAYR,QAAQQ,UAAzC;AACD;;;AAGD,GAAIC,cAAwBV,QAAUA,QAAQW,KAAR,CAAc,CAAd,CAAiB,CAAjB,CAAV,CAAgC,CAAC,CAACC,KAAM,IAAP,CAAD,CAA5D;AACA,GAAIC,gBAAiBH,aAAaI,GAAb,EAArB;AACA,GAAIC,gBAAiBL,aAAaI,GAAb,EAArB;AACA,GAAIE,eAAgBN,aAAaI,GAAb,EAApB;AACA,GAAIE,aAAJ,CAAmB;AACjBR,mBAAaA,MAAb,EAAqBQ,cAAeA,cAAcJ,IAAd,EAAsB,EAA1D;AACD;AACD,GAAIG,cAAJ,CAAoB;AAClBP,mBAAaA,MAAb,EAAqBO,eAAgBA,eAAeH,IAAf,EAAuB,EAA5D;AACD;AACD,GAAIC,cAAJ,CAAoB;AAClBL,mBAAaA,MAAb,EAAqBK,eAAgBA,eAAeD,IAAf,EAAuB,EAA5D;AACD;AACDjB,cAAcsB,oBAAd,CAAmCC,SAAnC;AACEV,MADF;AAEE,SAACW,YAAD,QAAkBf,SAAQC,IAAR,CAAac,YAAb,CAAlB,EAFF;AAGE,SAACC,MAAD,CAASC,SAAT,CAAuB;AACrB,GAAID,SAAWzB,cAAcsB,oBAAd,CAAmCK,aAAlD,CAAiE;AAC/D,GAAID,YAAc1B,cAAcsB,oBAAd,CAAmCD,aAArD,CAAoE;AAClEA,cAAcO,OAAd,EAAyBP,cAAcO,OAAd,EAAzB;AACD,CAFD,IAEO,IAAIF,YAAc1B,cAAcsB,oBAAd,CAAmCF,cAArD,CAAqE;AAC1EA,eAAeQ,OAAf,EAA0BR,eAAeQ,OAAf,EAA1B;AACD,CAFM,IAEA,IAAIF,YAAc1B,cAAcsB,oBAAd,CAAmCJ,cAArD,CAAqE;AAC1EA,eAAeU,OAAf,EAA0BV,eAAeU,OAAf,EAA1B;AACD;AACF,CARD,IAQO,IAAIH,SAAWzB,cAAcsB,oBAAd,CAAmCO,SAAlD,CAA6D;AAClEvB,SAAWA,QAAQwB,SAAnB,EAAgCxB,QAAQwB,SAAR,EAAhC;AACD;AACF,CAfH;;AAiBD,C;;;AAGHC,OAAOC,OAAP,CAAiB9B,KAAjB,C,0GA5EMA,K,8IAyBAU,Y","file":"Alert.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Alert\n * @flow\n */\n'use strict';\n\nconst AlertIOS = require('AlertIOS');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nimport type { AlertType, AlertButtonStyle } from 'AlertIOS';\n\ntype Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  style?: AlertButtonStyle,\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  onDismiss?: ?Function,\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * Optionally provide a list of buttons. Tapping any button will fire the\n * respective onPress callback and dismiss the alert. By default, the only\n * button will be an 'OK' button.\n *\n * This is an API that works both on iOS and Android and can show static\n * alerts. To show an alert that prompts the user to enter some information,\n * see `AlertIOS`; entering text in an alert is common on iOS only.\n *\n * ## iOS\n *\n * On iOS you can specify any number of buttons. Each button can optionally\n * specify a style, which is one of 'default', 'cancel' or 'destructive'.\n *\n * ## Android\n *\n * On Android at most three buttons can be specified. Android has a concept\n * of a neutral, negative and a positive button:\n *\n *   - If you specify one button, it will be the 'positive' one (such as 'OK')\n *   - Two buttons mean 'negative', 'positive' (such as 'Cancel', 'OK')\n *   - Three buttons mean 'neutral', 'negative', 'positive' (such as 'Later', 'Cancel', 'OK')\n *\n * By default alerts on Android can be dismissed by tapping outside of the alert\n * box. This event can be handled by providing an optional `options` parameter,\n * with an `onDismiss` callback property `{ onDismiss: () => {} }`.\n *\n * Alternatively, the dismissing behavior can be disabled altogether by providing\n * an optional `options` parameter with the `cancelable` property set to `false`\n * i.e. `{ cancelable: false }`\n *\n * Example usage:\n * ```\n * // Works on both iOS and Android\n * Alert.alert(\n *   'Alert Title',\n *   'My Alert Msg',\n *   [\n *     {text: 'Ask me later', onPress: () => console.log('Ask me later pressed')},\n *     {text: 'Cancel', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},\n *     {text: 'OK', onPress: () => console.log('OK Pressed')},\n *   ],\n *   { cancelable: false }\n * )\n * ```\n */\nclass Alert {\n\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n    type?: AlertType,\n  ): void {\n    if (Platform.OS === 'ios') {\n      if (typeof type !== 'undefined') {\n        console.warn('Alert.alert() with a 5th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');\n        AlertIOS.alert(title, message, buttons, type);\n        return;\n      }\n      AlertIOS.alert(title, message, buttons);\n    } else if (Platform.OS === 'android') {\n      AlertAndroid.alert(title, message, buttons, options);\n    }\n  }\n}\n\n/**\n * Wrapper around the Android native module.\n */\nclass AlertAndroid {\n\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    var config = {\n      title: title || '',\n      message: message || '',\n    };\n\n    if (options) {\n      config = {...config, cancelable: options.cancelable};\n    }\n    // At most three buttons (neutral, negative, positive). Ignore rest.\n    // The text 'OK' should be probably localized. iOS Alert does that in native.\n    var validButtons: Buttons = buttons ? buttons.slice(0, 3) : [{text: 'OK'}];\n    var buttonPositive = validButtons.pop();\n    var buttonNegative = validButtons.pop();\n    var buttonNeutral = validButtons.pop();\n    if (buttonNeutral) {\n      config = {...config, buttonNeutral: buttonNeutral.text || '' };\n    }\n    if (buttonNegative) {\n      config = {...config, buttonNegative: buttonNegative.text || '' };\n    }\n    if (buttonPositive) {\n      config = {...config, buttonPositive: buttonPositive.text || '' };\n    }\n    NativeModules.DialogManagerAndroid.showAlert(\n      config,\n      (errorMessage) => console.warn(errorMessage),\n      (action, buttonKey) => {\n        if (action === NativeModules.DialogManagerAndroid.buttonClicked) {\n          if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === NativeModules.DialogManagerAndroid.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      }\n    );\n  }\n}\n\nmodule.exports = Alert;\n"]}