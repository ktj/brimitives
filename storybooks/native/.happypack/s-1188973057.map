{"version":3,"sources":["node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android.js"],"names":["Platform","require","React","PropTypes","ReactNative","Touchable","TouchableWithoutFeedback","UIManager","createReactClass","ensurePositiveDelayProps","processColor","rippleBackgroundPropType","shape","type","oneOf","color","number","borderless","bool","themeAttributeBackgroundPropType","attribute","string","isRequired","backgroundPropType","oneOfType","PRESS_RETENTION_OFFSET","top","left","right","bottom","TouchableNativeFeedback","displayName","propTypes","background","useForeground","statics","SelectableBackground","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","OS","Version","mixins","Mixin","getDefaultProps","getInitialState","touchableGetInitialState","componentDidMount","props","componentWillReceiveProps","nextProps","touchableHandleActivePressIn","e","onPressIn","_dispatchPressedStateChange","_dispatchHotspotUpdate","pressInLocation","locationX","locationY","touchableHandleActivePressOut","onPressOut","touchableHandlePress","onPress","touchableHandleLongPress","onLongPress","touchableGetPressRectOffset","pressRetentionOffset","touchableGetHitSlop","hitSlop","touchableGetHighlightDelayMS","delayPressIn","touchableGetLongPressDelayMS","delayLongPress","touchableGetPressOutDelayMS","delayPressOut","_handleResponderMove","touchableHandleResponderMove","nativeEvent","destX","destY","dispatchViewManagerCommand","findNodeHandle","RCTView","Commands","hotspotUpdate","pressed","setPressed","render","child","Children","only","children","TOUCH_TARGET_DEBUG","Array","isArray","push","renderDebugView","console","warn","drawableProp","childProps","accessible","accessibilityLabel","accessibilityComponentType","accessibilityTraits","testID","onLayout","touchableHandleStartShouldSetResponder","touchableHandleResponderTerminationRequest","touchableHandleResponderGrant","touchableHandleResponderRelease","touchableHandleResponderTerminate","cloneElement","module","exports"],"mappings":"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","file":"TouchableNativeFeedback.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TouchableNativeFeedback\n */\n'use strict';\n\nvar Platform = require('Platform');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar Touchable = require('Touchable');\nvar TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nvar UIManager = require('UIManager');\n\nvar createReactClass = require('create-react-class');\nvar ensurePositiveDelayProps = require('ensurePositiveDelayProps');\nvar processColor = require('processColor');\n\nvar rippleBackgroundPropType = PropTypes.shape({\n  type: PropTypes.oneOf(['RippleAndroid']),\n  color: PropTypes.number,\n  borderless: PropTypes.bool,\n});\n\nvar themeAttributeBackgroundPropType = PropTypes.shape({\n  type: PropTypes.oneOf(['ThemeAttrAndroid']),\n  attribute: PropTypes.string.isRequired,\n});\n\nvar backgroundPropType = PropTypes.oneOfType([\n  rippleBackgroundPropType,\n  themeAttributeBackgroundPropType,\n]);\n\ntype Event = Object;\n\nvar PRESS_RETENTION_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\n/**\n * A wrapper for making views respond properly to touches (Android only).\n * On Android this component uses native state drawable to display touch\n * feedback.\n *\n * At the moment it only supports having a single View instance as a child\n * node, as it's implemented by replacing that View with another instance of\n * RCTView node with some additional properties set.\n *\n * Background drawable of native feedback touchable can be customized with\n * `background` property.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableNativeFeedback\n *         onPress={this._onPressButton}\n *         background={TouchableNativeFeedback.SelectableBackground()}>\n *       <View style={{width: 150, height: 100, backgroundColor: 'red'}}>\n *         <Text style={{margin: 30}}>Button</Text>\n *       </View>\n *     </TouchableNativeFeedback>\n *   );\n * },\n * ```\n */\n\nvar TouchableNativeFeedback = createReactClass({\n  displayName: 'TouchableNativeFeedback',\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n\n    /**\n     * Determines the type of background drawable that's going to be used to\n     * display feedback. It takes an object with `type` property and extra data\n     * depending on the `type`. It's recommended to use one of the static\n     * methods to generate that dictionary.\n     */\n    background: backgroundPropType,\n\n    /**\n     * Set to true to add the ripple effect to the foreground of the view, instead of the\n     * background. This is useful if one of your child views has a background of its own, or you're\n     * e.g. displaying images, and you don't want the ripple to be covered by them.\n     *\n     * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is only available on\n     * Android 6.0 and above. If you try to use this on older versions you will get a warning and\n     * fallback to background.\n     */\n    useForeground: PropTypes.bool,\n  },\n\n  statics: {\n    /**\n     * Creates an object that represents android theme's default background for\n     * selectable elements (?android:attr/selectableItemBackground).\n     */\n    SelectableBackground: function() {\n      return {type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground'};\n    },\n    /**\n     * Creates an object that represent android theme's default background for borderless\n     * selectable elements (?android:attr/selectableItemBackgroundBorderless).\n     * Available on android API level 21+.\n     */\n    SelectableBackgroundBorderless: function() {\n      return {type: 'ThemeAttrAndroid', attribute: 'selectableItemBackgroundBorderless'};\n    },\n    /**\n     * Creates an object that represents ripple drawable with specified color (as a\n     * string). If property `borderless` evaluates to true the ripple will\n     * render outside of the view bounds (see native actionbar buttons as an\n     * example of that behavior). This background type is available on Android\n     * API level 21+.\n     *\n     * @param color The ripple color\n     * @param borderless If the ripple can render outside it's bounds\n     */\n    Ripple: function(color: string, borderless: boolean) {\n      return {type: 'RippleAndroid', color: processColor(color), borderless: borderless};\n    },\n\n    canUseNativeForeground: function() {\n      return Platform.OS === 'android' && Platform.Version >= 23;\n    }\n  },\n\n  mixins: [Touchable.Mixin],\n\n  getDefaultProps: function() {\n    return {\n      background: this.SelectableBackground(),\n    };\n  },\n\n  getInitialState: function() {\n    return this.touchableGetInitialState();\n  },\n\n  componentDidMount: function() {\n    ensurePositiveDelayProps(this.props);\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    ensurePositiveDelayProps(nextProps);\n  },\n\n  /**\n   * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are\n   * defined on your component.\n   */\n  touchableHandleActivePressIn: function(e: Event) {\n    this.props.onPressIn && this.props.onPressIn(e);\n    this._dispatchPressedStateChange(true);\n    this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);\n  },\n\n  touchableHandleActivePressOut: function(e: Event) {\n    this.props.onPressOut && this.props.onPressOut(e);\n    this._dispatchPressedStateChange(false);\n  },\n\n  touchableHandlePress: function(e: Event) {\n    this.props.onPress && this.props.onPress(e);\n  },\n\n  touchableHandleLongPress: function(e: Event) {\n    this.props.onLongPress && this.props.onLongPress(e);\n  },\n\n  touchableGetPressRectOffset: function() {\n    // Always make sure to predeclare a constant!\n    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n\n  touchableGetHitSlop: function() {\n    return this.props.hitSlop;\n  },\n\n  touchableGetHighlightDelayMS: function() {\n    return this.props.delayPressIn;\n  },\n\n  touchableGetLongPressDelayMS: function() {\n    return this.props.delayLongPress;\n  },\n\n  touchableGetPressOutDelayMS: function() {\n    return this.props.delayPressOut;\n  },\n\n  _handleResponderMove: function(e) {\n    this.touchableHandleResponderMove(e);\n    this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);\n  },\n\n  _dispatchHotspotUpdate: function(destX, destY) {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.RCTView.Commands.hotspotUpdate,\n      [destX || 0, destY || 0]\n    );\n  },\n\n  _dispatchPressedStateChange: function(pressed) {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.RCTView.Commands.setPressed,\n      [pressed]\n    );\n  },\n\n  render: function() {\n    const child = React.Children.only(this.props.children);\n    let children = child.props.children;\n    if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {\n      if (!Array.isArray(children)) {\n        children = [children];\n      }\n      children.push(Touchable.renderDebugView({color: 'brown', hitSlop: this.props.hitSlop}));\n    }\n    if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {\n      console.warn(\n        'Requested foreground ripple, but it is not available on this version of Android. ' +\n        'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' +\n        'Touchable if the result is false.');\n    }\n    const drawableProp =\n      this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground()\n        ? 'nativeForegroundAndroid'\n        : 'nativeBackgroundAndroid';\n    var childProps = {\n      ...child.props,\n      [drawableProp]: this.props.background,\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityTraits: this.props.accessibilityTraits,\n      children,\n      testID: this.props.testID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,\n      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,\n      onResponderGrant: this.touchableHandleResponderGrant,\n      onResponderMove: this._handleResponderMove,\n      onResponderRelease: this.touchableHandleResponderRelease,\n      onResponderTerminate: this.touchableHandleResponderTerminate,\n    };\n\n    // We need to clone the actual element so that the ripple background drawable\n    // can be applied directly to the background of this element rather than to\n    // a wrapper view as done in other Touchable*\n    return React.cloneElement(\n      child,\n      childProps\n    );\n  }\n});\n\nmodule.exports = TouchableNativeFeedback;\n"]}