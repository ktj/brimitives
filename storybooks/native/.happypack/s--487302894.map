{"version":3,"sources":["node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js"],"names":["Animated","require","I18nManager","PanResponder","React","PropTypes","StyleSheet","TimerMixin","View","createReactClass","emptyFunction","IS_RTL","isRTL","CLOSED_LEFT_POSITION","HORIZONTAL_SWIPE_DISTANCE_THRESHOLD","HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD","SLOW_SPEED_SWIPE_FACTOR","SWIPE_DURATION","ON_MOUNT_BOUNCE_DELAY","ON_MOUNT_BOUNCE_DURATION","RIGHT_SWIPE_BOUNCE_BACK_DISTANCE","RIGHT_SWIPE_BOUNCE_BACK_DURATION","RIGHT_SWIPE_THRESHOLD","SwipeableRow","displayName","_panResponder","_previousLeft","mixins","propTypes","children","any","isOpen","bool","preventSwipeRight","maxSwipeDistance","number","isRequired","onOpen","func","onClose","onSwipeEnd","onSwipeStart","shouldBounceOnMount","slideoutView","node","swipeThreshold","getInitialState","currentLeft","Value","isSwipeableViewRendered","rowHeight","getDefaultProps","componentWillMount","create","onMoveShouldSetPanResponderCapture","_handleMoveShouldSetPanResponderCapture","onPanResponderGrant","_handlePanResponderGrant","onPanResponderMove","_handlePanResponderMove","onPanResponderRelease","_handlePanResponderEnd","onPanResponderTerminationRequest","_onPanResponderTerminationRequest","onPanResponderTerminate","onShouldBlockNativeResponder","event","gestureState","componentDidMount","props","setTimeout","_animateBounceBack","componentWillReceiveProps","nextProps","_animateToClosedPosition","shouldComponentUpdate","nextState","render","slideOutView","state","styles","slideOutContainer","height","swipeableView","_onSwipeableViewLayout","transform","translateX","panHandlers","close","setState","nativeEvent","layout","dy","_isValidSwipe","_isSwipingExcessivelyRightFromClosedPosition","_isSwipingRightFromClosed","_swipeSlowSpeed","_swipeFullSpeed","gestureStateDx","dx","setValue","_animateTo","toValue","duration","callback","timing","useNativeDriver","start","_animateToOpenPosition","_animateToOpenPositionWith","speed","distMoved","Math","abs","_animateToClosedPositionDuringBounce","swipeBounceBackDistance","_shouldAnimateRemainder","vx","horizontalDistance","bottom","left","position","right","top","module","exports"],"mappings":"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","file":"SwipeableRow.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SwipeableRow\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst I18nManager = require('I18nManager');\nconst PanResponder = require('PanResponder');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst TimerMixin = require('react-timer-mixin');\nconst View = require('View');\n\nconst createReactClass = require('create-react-class');\nconst emptyFunction = require('fbjs/lib/emptyFunction');\n\nconst IS_RTL = I18nManager.isRTL;\n\n// NOTE: Eventually convert these consts to an input object of configurations\n\n// Position of the left of the swipable item when closed\nconst CLOSED_LEFT_POSITION = 0;\n// Minimum swipe distance before we recognize it as such\nconst HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;\n// Minimum swipe speed before we fully animate the user's action (open/close)\nconst HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;\n// Factor to divide by to get slow speed; i.e. 4 means 1/4 of full speed\nconst SLOW_SPEED_SWIPE_FACTOR = 4;\n// Time, in milliseconds, of how long the animated swipe should be\nconst SWIPE_DURATION = 300;\n\n/**\n * On SwipeableListView mount, the 1st item will bounce to show users it's\n * possible to swipe\n */\nconst ON_MOUNT_BOUNCE_DELAY = 700;\nconst ON_MOUNT_BOUNCE_DURATION = 400;\n\n// Distance left of closed position to bounce back when right-swiping from closed\nconst RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;\nconst RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;\n/**\n * Max distance of right swipe to allow (right swipes do functionally nothing).\n * Must be multiplied by SLOW_SPEED_SWIPE_FACTOR because gestureState.dx tracks\n * how far the finger swipes, and not the actual animation distance.\n*/\nconst RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;\n\n/**\n * Creates a swipable row that allows taps on the main item and a custom View\n * on the item hidden behind the row. Typically this should be used in\n * conjunction with SwipeableListView for additional functionality, but can be\n * used in a normal ListView. See the renderRow for SwipeableListView to see how\n * to use this component separately.\n */\nconst SwipeableRow = createReactClass({\n  displayName: 'SwipeableRow',\n  _panResponder: {},\n  _previousLeft: CLOSED_LEFT_POSITION,\n\n  mixins: [TimerMixin],\n\n  propTypes: {\n    children: PropTypes.any,\n    isOpen: PropTypes.bool,\n    preventSwipeRight: PropTypes.bool,\n    maxSwipeDistance: PropTypes.number.isRequired,\n    onOpen: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onSwipeEnd: PropTypes.func.isRequired,\n    onSwipeStart: PropTypes.func.isRequired,\n    // Should bounce the row on mount\n    shouldBounceOnMount: PropTypes.bool,\n    /**\n     * A ReactElement that is unveiled when the user swipes\n     */\n    slideoutView: PropTypes.node.isRequired,\n    /**\n     * The minimum swipe distance required before fully animating the swipe. If\n     * the user swipes less than this distance, the item will return to its\n     * previous (open/close) position.\n     */\n    swipeThreshold: PropTypes.number.isRequired,\n  },\n\n  getInitialState(): Object {\n    return {\n      currentLeft: new Animated.Value(this._previousLeft),\n      /**\n       * In order to render component A beneath component B, A must be rendered\n       * before B. However, this will cause \"flickering\", aka we see A briefly\n       * then B. To counter this, _isSwipeableViewRendered flag is used to set\n       * component A to be transparent until component B is loaded.\n       */\n      isSwipeableViewRendered: false,\n      rowHeight: (null: ?number),\n    };\n  },\n\n  getDefaultProps(): Object {\n    return {\n      isOpen: false,\n      preventSwipeRight: false,\n      maxSwipeDistance: 0,\n      onOpen: emptyFunction,\n      onClose: emptyFunction,\n      onSwipeEnd: emptyFunction,\n      onSwipeStart: emptyFunction,\n      swipeThreshold: 30,\n    };\n  },\n\n  componentWillMount(): void {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,\n      onPanResponderTerminate: this._handlePanResponderEnd,\n      onShouldBlockNativeResponder: (event, gestureState) => false,\n    });\n  },\n\n  componentDidMount(): void {\n    if (this.props.shouldBounceOnMount) {\n      /**\n       * Do the on mount bounce after a delay because if we animate when other\n       * components are loading, the animation will be laggy\n       */\n      this.setTimeout(() => {\n        this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);\n      }, ON_MOUNT_BOUNCE_DELAY);\n    }\n  },\n\n  componentWillReceiveProps(nextProps: Object): void {\n    /**\n     * We do not need an \"animateOpen(noCallback)\" because this animation is\n     * handled internally by this component.\n     */\n    if (this.props.isOpen && !nextProps.isOpen) {\n      this._animateToClosedPosition();\n    }\n  },\n\n  shouldComponentUpdate(nextProps: Object, nextState: Object): boolean {\n    if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {\n      // No need to rerender if SwipeableListView is disabling the bounce flag\n      return false;\n    }\n\n    return true;\n  },\n\n  render(): React.Element<any> {\n    // The view hidden behind the main view\n    let slideOutView;\n    if (this.state.isSwipeableViewRendered && this.state.rowHeight) {\n      slideOutView = (\n        <View style={[\n          styles.slideOutContainer,\n          {height: this.state.rowHeight},\n          ]}>\n          {this.props.slideoutView}\n        </View>\n      );\n    }\n\n    // The swipeable item\n    const swipeableView = (\n      <Animated.View\n        onLayout={this._onSwipeableViewLayout}\n        style={{transform: [{translateX: this.state.currentLeft}]}}>\n        {this.props.children}\n      </Animated.View>\n    );\n\n    return (\n      <View\n        {...this._panResponder.panHandlers}>\n        {slideOutView}\n        {swipeableView}\n      </View>\n    );\n  },\n\n  close(): void {\n    this.props.onClose();\n    this._animateToClosedPosition();\n  },\n\n  _onSwipeableViewLayout(event: Object): void {\n    this.setState({\n      isSwipeableViewRendered: true,\n      rowHeight: event.nativeEvent.layout.height,\n    });\n  },\n\n  _handleMoveShouldSetPanResponderCapture(\n    event: Object,\n    gestureState: Object,\n  ): boolean {\n    // Decides whether a swipe is responded to by this component or its child\n    return gestureState.dy < 10 && this._isValidSwipe(gestureState);\n  },\n\n  _handlePanResponderGrant(event: Object, gestureState: Object): void {\n\n  },\n\n  _handlePanResponderMove(event: Object, gestureState: Object): void {\n    if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {\n      return;\n    }\n\n    this.props.onSwipeStart();\n\n    if (this._isSwipingRightFromClosed(gestureState)) {\n      this._swipeSlowSpeed(gestureState);\n    } else {\n      this._swipeFullSpeed(gestureState);\n    }\n  },\n\n  _isSwipingRightFromClosed(gestureState: Object): boolean {\n    const gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;\n    return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;\n  },\n\n  _swipeFullSpeed(gestureState: Object): void {\n    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);\n  },\n\n  _swipeSlowSpeed(gestureState: Object): void {\n    this.state.currentLeft.setValue(\n      this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR,\n    );\n  },\n\n  _isSwipingExcessivelyRightFromClosedPosition(gestureState: Object): boolean {\n    /**\n     * We want to allow a BIT of right swipe, to allow users to know that\n     * swiping is available, but swiping right does not do anything\n     * functionally.\n     */\n    const gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;\n    return (\n      this._isSwipingRightFromClosed(gestureState) &&\n      gestureStateDx > RIGHT_SWIPE_THRESHOLD\n    );\n  },\n\n  _onPanResponderTerminationRequest(\n    event: Object,\n    gestureState: Object,\n  ): boolean {\n    return false;\n  },\n\n  _animateTo(\n    toValue: number,\n    duration: number = SWIPE_DURATION,\n    callback: Function = emptyFunction,\n  ): void {\n    Animated.timing(\n      this.state.currentLeft,\n      {\n        duration,\n        toValue,\n        useNativeDriver: true,\n      },\n    ).start(() => {\n      this._previousLeft = toValue;\n      callback();\n    });\n  },\n\n  _animateToOpenPosition(): void {\n    const maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;\n    this._animateTo(-maxSwipeDistance);\n  },\n\n  _animateToOpenPositionWith(\n    speed: number,\n    distMoved: number,\n  ): void {\n    /**\n     * Ensure the speed is at least the set speed threshold to prevent a slow\n     * swiping animation\n     */\n    speed = (\n      speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ?\n      speed :\n      HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD\n    );\n    /**\n     * Calculate the duration the row should take to swipe the remaining distance\n     * at the same speed the user swiped (or the speed threshold)\n     */\n    const duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);\n    const maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;\n    this._animateTo(-maxSwipeDistance, duration);\n  },\n\n  _animateToClosedPosition(duration: number = SWIPE_DURATION): void {\n    this._animateTo(CLOSED_LEFT_POSITION, duration);\n  },\n\n  _animateToClosedPositionDuringBounce(): void {\n    this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);\n  },\n\n  _animateBounceBack(duration: number): void {\n    /**\n     * When swiping right, we want to bounce back past closed position on release\n     * so users know they should swipe right to get content.\n     */\n    const swipeBounceBackDistance = IS_RTL ?\n      -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE :\n      RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;\n    this._animateTo(\n      -swipeBounceBackDistance,\n      duration,\n      this._animateToClosedPositionDuringBounce,\n    );\n  },\n\n  // Ignore swipes due to user's finger moving slightly when tapping\n  _isValidSwipe(gestureState: Object): boolean {\n    if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {\n      return false;\n    }\n\n    return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;\n  },\n\n  _shouldAnimateRemainder(gestureState: Object): boolean {\n    /**\n     * If user has swiped past a certain distance, animate the rest of the way\n     * if they let go\n     */\n    return (\n      Math.abs(gestureState.dx) > this.props.swipeThreshold ||\n      gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD\n    );\n  },\n\n  _handlePanResponderEnd(event: Object, gestureState: Object): void {\n    const horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;\n    if (this._isSwipingRightFromClosed(gestureState)) {\n      this.props.onOpen();\n      this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);\n    } else if (this._shouldAnimateRemainder(gestureState)) {\n      if (horizontalDistance < 0) {\n        // Swiped left\n        this.props.onOpen();\n        this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);\n      } else {\n        // Swiped right\n        this.props.onClose();\n        this._animateToClosedPosition();\n      }\n    } else {\n      if (this._previousLeft === CLOSED_LEFT_POSITION) {\n        this._animateToClosedPosition();\n      } else {\n        this._animateToOpenPosition();\n      }\n    }\n\n    this.props.onSwipeEnd();\n  },\n});\n\nconst styles = StyleSheet.create({\n  slideOutContainer: {\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n});\n\nmodule.exports = SwipeableRow;\n"]}