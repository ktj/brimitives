{"version":3,"sources":["node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js"],"names":["ReactNativeStyleAttributes","require","UIManager","UnimplementedView","createReactNativeComponentClass","insetsDiffer","matricesDiffer","pointsDiffer","processColor","resolveAssetSource","sizesDiffer","verifyPropTypes","warning","requireNativeComponent","viewName","componentInterface","extraConfig","viewConfig","NativeProps","uiViewClassName","validAttributes","propTypes","__propTypesSecretDontUseThesePlease","baseModuleName","nativeProps","baseModule","key","useAttribute","attribute","differ","TypeToDifferMap","diff","processor","TypeToProcessorMap","process","style","__DEV__","nativeOnly","CATransform3D","CGPoint","CGSize","UIEdgeInsets","processColorArray","colors","map","CGColor","CGColorArray","UIColor","UIColorArray","CGImage","UIImage","RCTImageSource","Color","ColorArray","module","exports"],"mappings":"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","file":"requireNativeComponent.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule requireNativeComponent\n * @flow\n */\n'use strict';\n\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst UIManager = require('UIManager');\nconst UnimplementedView = require('UnimplementedView');\n\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst insetsDiffer = require('insetsDiffer');\nconst matricesDiffer = require('matricesDiffer');\nconst pointsDiffer = require('pointsDiffer');\nconst processColor = require('processColor');\nconst resolveAssetSource = require('resolveAssetSource');\nconst sizesDiffer = require('sizesDiffer');\nconst verifyPropTypes = require('verifyPropTypes');\nconst warning = require('fbjs/lib/warning');\n\n/**\n * Used to create React components that directly wrap native component\n * implementations.  Config information is extracted from data exported from the\n * UIManager module.  You should also wrap the native component in a\n * hand-written component with full propTypes definitions and other\n * documentation - pass the hand-written component in as `componentInterface` to\n * verify all the native props are documented via `propTypes`.\n *\n * If some native props shouldn't be exposed in the wrapper interface, you can\n * pass null for `componentInterface` and call `verifyPropTypes` directly\n * with `nativePropsToIgnore`;\n *\n * Common types are lined up with the appropriate prop differs with\n * `TypeToDifferMap`.  Non-scalar types not in the map default to `deepDiffer`.\n */\nimport type { ComponentInterface } from 'verifyPropTypes';\n\nfunction requireNativeComponent(\n  viewName: string,\n  componentInterface?: ?ComponentInterface,\n  extraConfig?: ?{nativeOnly?: Object},\n): ReactClass<any> | string {\n  const viewConfig = UIManager[viewName];\n  if (!viewConfig || !viewConfig.NativeProps) {\n    warning(false, 'Native component for \"%s\" does not exist', viewName);\n    return UnimplementedView;\n  }\n\n  viewConfig.uiViewClassName = viewName;\n  viewConfig.validAttributes = {};\n\n  // ReactNative `View.propTypes` have been deprecated in favor of\n  // `ViewPropTypes`. In their place a temporary getter has been added with a\n  // deprecated warning message. Avoid triggering that warning here by using\n  // temporary workaround, __propTypesSecretDontUseThesePlease.\n  // TODO (bvaughn) Revert this particular change any time after April 1\n  if (componentInterface) {\n    viewConfig.propTypes =\n      typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object'\n        ? componentInterface.__propTypesSecretDontUseThesePlease\n        : componentInterface.propTypes;\n  } else {\n    viewConfig.propTypes = null;\n  }\n\n  let baseModuleName = viewConfig.baseModuleName;\n  let nativeProps = { ...viewConfig.NativeProps };\n  while (baseModuleName) {\n    const baseModule = UIManager[baseModuleName];\n    if (!baseModule) {\n      warning(false, 'Base module \"%s\" does not exist', baseModuleName);\n      baseModuleName = null;\n    } else {\n      nativeProps = { ...nativeProps, ...baseModule.NativeProps };\n      baseModuleName = baseModule.baseModuleName;\n    }\n  }\n\n  for (const key in nativeProps) {\n    let useAttribute = false;\n    const attribute = {};\n\n    const differ = TypeToDifferMap[nativeProps[key]];\n    if (differ) {\n      attribute.diff = differ;\n      useAttribute = true;\n    }\n\n    const processor = TypeToProcessorMap[nativeProps[key]];\n    if (processor) {\n      attribute.process = processor;\n      useAttribute = true;\n    }\n\n    viewConfig.validAttributes[key] = useAttribute ? attribute : true;\n  }\n\n  // Unfortunately, the current set up puts the style properties on the top\n  // level props object. We also need to add the nested form for API\n  // compatibility. This allows these props on both the top level and the\n  // nested style level. TODO: Move these to nested declarations on the\n  // native side.\n  viewConfig.validAttributes.style = ReactNativeStyleAttributes;\n\n  if (__DEV__) {\n    componentInterface && verifyPropTypes(\n      componentInterface,\n      viewConfig,\n      extraConfig && extraConfig.nativeOnly\n    );\n  }\n\n  return createReactNativeComponentClass(viewConfig);\n}\n\nconst TypeToDifferMap = {\n  // iOS Types\n  CATransform3D: matricesDiffer,\n  CGPoint: pointsDiffer,\n  CGSize: sizesDiffer,\n  UIEdgeInsets: insetsDiffer,\n  // Android Types\n  // (not yet implemented)\n};\n\nfunction processColorArray(colors: ?Array<any>): ?Array<?number> {\n  return colors && colors.map(processColor);\n}\n\nconst TypeToProcessorMap = {\n  // iOS Types\n  CGColor: processColor,\n  CGColorArray: processColorArray,\n  UIColor: processColor,\n  UIColorArray: processColorArray,\n  CGImage: resolveAssetSource,\n  UIImage: resolveAssetSource,\n  RCTImageSource: resolveAssetSource,\n  // Android Types\n  Color: processColor,\n  ColorArray: processColorArray,\n};\n\nmodule.exports = requireNativeComponent;\n"]}