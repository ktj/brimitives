{"version":3,"sources":["node_modules/react-native/Libraries/Lists/VirtualizedList.js"],"names":["Batchinator","require","FillRateHelper","PropTypes","React","ReactNative","RefreshControl","ScrollView","StyleSheet","View","ViewabilityHelper","flattenStyle","infoLog","invariant","warning","computeWindowedRenderLimits","_usedIndexForKey","VirtualizedList","params","animated","veryLast","props","getItemCount","data","frame","_getFrameMetricsApprox","offset","Math","max","length","_footerLength","_scrollMetrics","visibleLength","_scrollRef","scrollTo","horizontal","x","y","getItemLayout","index","viewOffset","viewPosition","_highestMeasuredFrameIndex","item","getItem","itemCount","scrollToIndex","_viewabilityHelper","recordInteraction","_updateViewableItems","flashScrollIndicators","getScrollResponder","getScrollableNode","findNodeHandle","setNativeProps","virtualizedList","context","_onUpdateSeparators","_averageCellLength","_cellRefs","_hasDataChangedSinceEndReached","_hasWarned","_headerLength","_initialScrollIndexTimeout","_frames","contentLength","dOffset","dt","timestamp","velocity","_sentEndForContentLength","_totalCellLength","_totalCellsMeasured","_captureScrollRef","_defaultRenderScrollComponent","_onCellUnmount","_onLayout","_onLayoutEmpty","_onLayoutFooter","_onLayoutHeader","_onContentSizeChange","_onScroll","_onScrollBeginDrag","_onScrollEndDrag","_onMomentumScrollEnd","_updateCellsToRender","_createViewToken","_getFrameMetrics","onScroll","__isNative","_isNestedWithSameOrientation","onViewableItemsChanged","_fillRateHelper","_updateCellsToRenderBatcher","updateCellsBatchingPeriod","viewabilityConfig","state","first","initialScrollIndex","last","min","initialNumToRender","setTimeout","dispose","deactivateAndFlush","clearTimeout","newProps","extraData","maxToRenderPerBatch","setState","cells","stickyHeaderIndices","stickyIndicesFromProps","inversionStyle","ItemSeparatorComponent","keyExtractor","stickyOffset","ListHeaderComponent","end","prevCellKey","ii","key","has","push","undefined","_onCellLayout","e","ref","keys","forEach","updateSeparatorProps","disableVirtualization","nestedContext","__DEV__","flatStyles","contentContainerStyle","flexWrap","ListEmptyComponent","ListFooterComponent","isVirtualizationDisabled","_isVirtualizationDisabled","inverted","styles","horizontallyInverted","verticallyInverted","Set","element","isValidElement","spacerKey","lastInitialIndex","_pushCells","firstAfterInitial","insertedStickySpacer","size","initBlock","stickyBlock","leadSpace","trailSpace","firstSpace","console","warn","lastFrame","endFrame","tailSpacerLength","scrollProps","onContentSizeChange","onLayout","onScrollBeginDrag","onScrollEndDrag","onMomentumScrollEnd","scrollEventThrottle","style","ret","cloneElement","renderScrollComponent","debug","flex","_renderDebugOverlay","_scheduleCellsToRenderUpdate","computeBlankness","onRefresh","refreshing","JSON","stringify","progressViewOffset","cellKey","layout","nativeEvent","next","_selectOffset","_selectLength","inLayout","curr","_computeBlankness","_maybeCallOnEndReached","normalize","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","baseStyle","position","top","right","bottom","width","borderColor","borderWidth","map","f","left","height","backgroundColor","metrics","onEndReached","onEndReachedThreshold","distanceFromEnd","timeStamp","layoutMeasurement","contentSize","contentOffset","perf","prevDt","activate","hiPri","distTop","distBottom","scrollingThreshold","abort","schedule","newState","renderAhead","isViewable","frameType","shape","number","isRequired","checkPropTypes","onUpdate","PureComponent","defaultProps","String","windowSize","contextTypes","bool","childContextTypes","CellRenderer","separatorProps","highlighted","leadingItem","_separators","highlight","onUpdateSeparators","unhighlight","updateProps","select","onUnmount","fillRateHelper","parentProps","renderItem","separators","enabled","Component","create","transform","scaleY","scaleX","module","exports"],"mappings":"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","file":"VirtualizedList.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule VirtualizedList\n * @flow\n * @format\n */\n'use strict';\n\nconst Batchinator = require('Batchinator');\nconst FillRateHelper = require('FillRateHelper');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst ViewabilityHelper = require('ViewabilityHelper');\n\nconst flattenStyle = require('flattenStyle');\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\nconst warning = require('fbjs/lib/warning');\n\nconst {computeWindowedRenderLimits} = require('VirtualizeUtils');\n\nimport type {StyleObj} from 'StyleSheetTypes';\nimport type {ViewabilityConfig, ViewToken} from 'ViewabilityHelper';\n\ntype Item = any;\n\ntype renderItemType = (info: any) => ?React.Element<any>;\n\ntype RequiredProps = {\n  renderItem: renderItemType,\n  /**\n   * The default accessor functions assume this is an Array<{key: string}> but you can override\n   * getItem, getItemCount, and keyExtractor to handle any type of index-based data.\n   */\n  data?: any,\n  /**\n   * A generic accessor for extracting an item from any sort of data blob.\n   */\n  getItem: (data: any, index: number) => ?Item,\n  /**\n   * Determines how many items are in the data blob.\n   */\n  getItemCount: (data: any) => number,\n};\ntype OptionalProps = {\n  /**\n   * `debug` will turn on extra logging and visual overlays to aid with debugging both usage and\n   * implementation, but with a significant perf hit.\n   */\n  debug?: ?boolean,\n  /**\n   * DEPRECATED: Virtualization provides significant performance and memory optimizations, but fully\n   * unmounts react instances that are outside of the render window. You should only need to disable\n   * this for debugging purposes.\n   */\n  disableVirtualization: boolean,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  getItemLayout?: (\n    data: any,\n    index: number,\n  ) => {length: number, offset: number, index: number}, // e.g. height, y\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  keyExtractor: (item: Item, index: number) => string,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * The maximum number of items to render in each incremental render batch. The more rendered at\n   * once, the better the fill rate, but responsiveness my suffer because rendering content may\n   * interfere with responding to button taps or other interactions.\n   */\n  maxToRenderPerBatch: number,\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  onEndReachedThreshold?: ?number, // units of visible length\n  onLayout?: ?Function,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Called when the viewability of rows changes, as defined by the\n   * `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\n   */\n  renderScrollComponent?: (props: Object) => React.Element<any>,\n  /**\n   * Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off\n   * screen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.\n   */\n  updateCellsBatchingPeriod: number,\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * Determines the maximum number of items rendered outside of the visible area, in units of\n   * visible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will\n   * render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing\n   * this number will reduce memory consumption and may improve performance, but will increase the\n   * chance that fast scrolling may reveal momentary blank areas of unrendered content.\n   */\n  windowSize: number,\n};\n/* $FlowFixMe - this Props seems to be missing a bunch of stuff. Remove this\n * comment to see the errors */\nexport type Props = RequiredProps & OptionalProps;\n\nlet _usedIndexForKey = false;\n\ntype State = {first: number, last: number};\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](/react-native/docs/flatlist.html)\n * and [`<SectionList>`](/react-native/docs/sectionlist.html) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nclass VirtualizedList extends React.PureComponent<OptionalProps, Props, State> {\n  props: Props;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    const frame = this._getFrameMetricsApprox(veryLast);\n    const offset = Math.max(\n      0,\n      frame.offset +\n        frame.length +\n        this._footerLength -\n        this._scrollMetrics.visibleLength,\n    );\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    const {data, horizontal, getItemCount, getItemLayout} = this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      `scrollToIndex out of range: ${index} vs ${getItemCount(data) - 1}`,\n    );\n    invariant(\n      getItemLayout || index <= this._highestMeasuredFrameIndex,\n      'scrollToIndex should be used in conjunction with getItemLayout, ' +\n        'otherwise there is no way to know the location of an arbitrary index.',\n    );\n    const frame = this._getFrameMetricsApprox(index);\n    const offset =\n      Math.max(\n        0,\n        frame.offset -\n          (viewPosition || 0) *\n            (this._scrollMetrics.visibleLength - frame.length),\n      ) - (viewOffset || 0);\n    this._scrollRef.scrollTo(\n      horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: Item,\n    viewPosition?: number,\n  }) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  recordInteraction() {\n    this._viewabilityHelper.recordInteraction();\n    this._updateViewableItems(this.props.data);\n  }\n\n  flashScrollIndicators() {\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder() {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollRef);\n    }\n  }\n\n  setNativeProps(props: Object) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  }\n\n  static defaultProps = {\n    disableVirtualization: false,\n    horizontal: false,\n    initialNumToRender: 10,\n    keyExtractor: (item: Item, index: number) => {\n      if (item.key != null) {\n        return item.key;\n      }\n      _usedIndexForKey = true;\n      return String(index);\n    },\n    maxToRenderPerBatch: 10,\n    onEndReachedThreshold: 2, // multiples of length\n    scrollEventThrottle: 50,\n    updateCellsBatchingPeriod: 50,\n    windowSize: 21, // multiples of length\n  };\n\n  static contextTypes = {\n    virtualizedList: PropTypes.shape({\n      horizontal: PropTypes.bool,\n    }),\n  };\n\n  static childContextTypes = {\n    virtualizedList: PropTypes.shape({\n      horizontal: PropTypes.bool,\n    }),\n  };\n\n  getChildContext() {\n    return {\n      virtualizedList: {\n        horizontal: this.props.horizontal,\n        // TODO: support nested virtualization and onViewableItemsChanged\n      },\n    };\n  }\n\n  state: State;\n\n  constructor(props: Props, context: Object) {\n    super(props, context);\n    invariant(\n      !props.onScroll || !props.onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n        'to support native onScroll events with useNativeDriver',\n    );\n    invariant(\n      !(this._isNestedWithSameOrientation() && props.onViewableItemsChanged),\n      'Nesting lists that scroll in the same direction does not support onViewableItemsChanged' +\n        'on the inner list.',\n    );\n\n    this._fillRateHelper = new FillRateHelper(this._getFrameMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod,\n    );\n    this._viewabilityHelper = new ViewabilityHelper(\n      this.props.viewabilityConfig,\n    );\n    this.state = {\n      first: this.props.initialScrollIndex || 0,\n      last:\n        Math.min(\n          this.props.getItemCount(this.props.data),\n          (this.props.initialScrollIndex || 0) + this.props.initialNumToRender,\n        ) - 1,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.initialScrollIndex) {\n      this._initialScrollIndexTimeout = setTimeout(\n        () =>\n          this.scrollToIndex({\n            animated: false,\n            index: this.props.initialScrollIndex,\n          }),\n        0,\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this._updateViewableItems(null);\n    this._updateCellsToRenderBatcher.dispose();\n    this._viewabilityHelper.dispose();\n    this._fillRateHelper.deactivateAndFlush();\n    clearTimeout(this._initialScrollIndexTimeout);\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    const {data, extraData, getItemCount, maxToRenderPerBatch} = newProps;\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    this.setState({\n      first: Math.max(\n        0,\n        Math.min(\n          this.state.first,\n          getItemCount(data) - 1 - maxToRenderPerBatch,\n        ),\n      ),\n      last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1)),\n    });\n    if (data !== this.props.data || extraData !== this.props.extraData) {\n      this._hasDataChangedSinceEndReached = true;\n    }\n  }\n\n  _pushCells(\n    cells: Array<Object>,\n    stickyHeaderIndices: Array<number>,\n    stickyIndicesFromProps: Set<number>,\n    first: number,\n    last: number,\n    inversionStyle: ?StyleObj,\n  ) {\n    const {\n      ItemSeparatorComponent,\n      data,\n      getItem,\n      getItemCount,\n      keyExtractor,\n    } = this.props;\n    const stickyOffset = this.props.ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      invariant(item, 'No item for index ' + ii);\n      const key = keyExtractor(item, ii);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n      cells.push(\n        <CellRenderer\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          cellKey={key}\n          fillRateHelper={this._fillRateHelper}\n          index={ii}\n          inversionStyle={inversionStyle}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onLayout={e => this._onCellLayout(e, key, ii)}\n          onUnmount={this._onCellUnmount}\n          parentProps={this.props}\n          ref={ref => {\n            this._cellRefs[key] = ref;\n          }}\n        />,\n      );\n      prevCellKey = key;\n    }\n  }\n\n  _onUpdateSeparators = (keys: Array<?string>, newProps: Object) => {\n    keys.forEach(key => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  _isVirtualizationDisabled(): boolean {\n    return (\n      this.props.disableVirtualization || this._isNestedWithSameOrientation()\n    );\n  }\n\n  _isNestedWithSameOrientation(): boolean {\n    const nestedContext = this.context.virtualizedList;\n    return !!(\n      nestedContext && !!nestedContext.horizontal === !!this.props.horizontal\n    );\n  }\n\n  render() {\n    if (__DEV__) {\n      const flatStyles = flattenStyle(this.props.contentContainerStyle);\n      warning(\n        flatStyles == null || flatStyles.flexWrap !== 'wrap',\n        '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n          'Consider using `numColumns` with `FlatList` instead.',\n      );\n    }\n\n    const {\n      ListEmptyComponent,\n      ListFooterComponent,\n      ListHeaderComponent,\n    } = this.props;\n    const {data, horizontal} = this.props;\n    const isVirtualizationDisabled = this._isVirtualizationDisabled();\n    const inversionStyle = this.props.inverted\n      ? this.props.horizontal\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : null;\n    const cells = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n    if (ListHeaderComponent) {\n      const element = React.isValidElement(ListHeaderComponent)\n        ? ListHeaderComponent // $FlowFixMe\n        : <ListHeaderComponent />;\n      cells.push(\n        <View\n          key=\"$header\"\n          onLayout={this._onLayoutHeader}\n          style={inversionStyle}>\n          {element}\n        </View>,\n      );\n    }\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      const spacerKey = !horizontal ? 'height' : 'width';\n      const lastInitialIndex = this.props.initialScrollIndex\n        ? -1\n        : this.props.initialNumToRender - 1;\n      const {first, last} = this.state;\n      this._pushCells(\n        cells,\n        stickyHeaderIndices,\n        stickyIndicesFromProps,\n        0,\n        lastInitialIndex,\n        inversionStyle,\n      );\n      const firstAfterInitial = Math.max(lastInitialIndex + 1, first);\n      if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {\n        let insertedStickySpacer = false;\n        if (stickyIndicesFromProps.size > 0) {\n          const stickyOffset = ListHeaderComponent ? 1 : 0;\n          // See if there are any sticky headers in the virtualized space that we need to render.\n          for (let ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {\n            if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n              const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n              const stickyBlock = this._getFrameMetricsApprox(ii);\n              const leadSpace =\n                stickyBlock.offset - (initBlock.offset + initBlock.length);\n              cells.push(\n                <View key=\"$sticky_lead\" style={{[spacerKey]: leadSpace}} />,\n              );\n              this._pushCells(\n                cells,\n                stickyHeaderIndices,\n                stickyIndicesFromProps,\n                ii,\n                ii,\n                inversionStyle,\n              );\n              const trailSpace =\n                this._getFrameMetricsApprox(first).offset -\n                (stickyBlock.offset + stickyBlock.length);\n              cells.push(\n                <View key=\"$sticky_trail\" style={{[spacerKey]: trailSpace}} />,\n              );\n              insertedStickySpacer = true;\n              break;\n            }\n          }\n        }\n        if (!insertedStickySpacer) {\n          const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n          const firstSpace =\n            this._getFrameMetricsApprox(first).offset -\n            (initBlock.offset + initBlock.length);\n          cells.push(\n            <View key=\"$lead_spacer\" style={{[spacerKey]: firstSpace}} />,\n          );\n        }\n      }\n      this._pushCells(\n        cells,\n        stickyHeaderIndices,\n        stickyIndicesFromProps,\n        firstAfterInitial,\n        last,\n        inversionStyle,\n      );\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key property on each ' +\n            'item or provide a custom keyExtractor.',\n        );\n        this._hasWarned.keys = true;\n      }\n      if (!isVirtualizationDisabled && last < itemCount - 1) {\n        const lastFrame = this._getFrameMetricsApprox(last);\n        // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n        // prevent the user for hyperscrolling into un-measured area because otherwise content will\n        // likely jump around as it renders in above the viewport.\n        const end = this.props.getItemLayout\n          ? itemCount - 1\n          : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);\n        const endFrame = this._getFrameMetricsApprox(end);\n        const tailSpacerLength =\n          endFrame.offset +\n          endFrame.length -\n          (lastFrame.offset + lastFrame.length);\n        cells.push(\n          <View key=\"$tail_spacer\" style={{[spacerKey]: tailSpacerLength}} />,\n        );\n      }\n    } else if (ListEmptyComponent) {\n      const element = React.isValidElement(ListEmptyComponent)\n        ? ListEmptyComponent // $FlowFixMe\n        : <ListEmptyComponent />;\n      cells.push(\n        <View\n          key=\"$empty\"\n          onLayout={this._onLayoutEmpty}\n          style={inversionStyle}>\n          {element}\n        </View>,\n      );\n    }\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent)\n        ? ListFooterComponent // $FlowFixMe\n        : <ListFooterComponent />;\n      cells.push(\n        <View\n          key=\"$footer\"\n          onLayout={this._onLayoutFooter}\n          style={inversionStyle}>\n          {element}\n        </View>,\n      );\n    }\n    const scrollProps = {\n      ...this.props,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      scrollEventThrottle: this.props.scrollEventThrottle, // TODO: Android support\n      stickyHeaderIndices,\n    };\n    if (inversionStyle) {\n      scrollProps.style = [inversionStyle, this.props.style];\n    }\n    const ret = React.cloneElement(\n      (this.props.renderScrollComponent || this._defaultRenderScrollComponent)(\n        scrollProps,\n      ),\n      {\n        ref: this._captureScrollRef,\n      },\n      cells,\n    );\n    if (this.props.debug) {\n      return (\n        <View style={{flex: 1}}>\n          {ret}\n          {this._renderDebugOverlay()}\n        </View>\n      );\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate() {\n    this._scheduleCellsToRenderUpdate();\n  }\n\n  _averageCellLength = 0;\n  _cellRefs = {};\n  _hasDataChangedSinceEndReached = true;\n  _hasWarned = {};\n  _highestMeasuredFrameIndex = 0;\n  _headerLength = 0;\n  _initialScrollIndexTimeout = 0;\n  _fillRateHelper: FillRateHelper;\n  _frames = {};\n  _footerLength = 0;\n  _scrollMetrics = {\n    contentLength: 0,\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0,\n  };\n  _scrollRef = (null: any);\n  _sentEndForContentLength = 0;\n  _totalCellLength = 0;\n  _totalCellsMeasured = 0;\n  _updateCellsToRenderBatcher: Batchinator;\n  _viewabilityHelper: ViewabilityHelper;\n\n  _captureScrollRef = ref => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state,\n      this._scrollMetrics,\n    );\n  }\n\n  _defaultRenderScrollComponent = props => {\n    if (this._isNestedWithSameOrientation()) {\n      return <View {...props} />;\n    } else if (props.onRefresh) {\n      invariant(\n        typeof props.refreshing === 'boolean',\n        '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n          JSON.stringify(props.refreshing) +\n          '`',\n      );\n      return (\n        <ScrollView\n          {...props}\n          refreshControl={\n            <RefreshControl\n              refreshing={props.refreshing}\n              onRefresh={props.onRefresh}\n              progressViewOffset={props.progressViewOffset}\n            />\n          }\n        />\n      );\n    } else {\n      return <ScrollView {...props} />;\n    }\n  };\n\n  _onCellLayout(e, cellKey, index) {\n    const layout = e.nativeEvent.layout;\n    const next = {\n      offset: this._selectOffset(layout),\n      length: this._selectLength(layout),\n      index,\n      inLayout: true,\n    };\n    const curr = this._frames[cellKey];\n    if (\n      !curr ||\n      next.offset !== curr.offset ||\n      next.length !== curr.length ||\n      index !== curr.index\n    ) {\n      this._totalCellLength += next.length - (curr ? curr.length : 0);\n      this._totalCellsMeasured += curr ? 0 : 1;\n      this._averageCellLength =\n        this._totalCellLength / this._totalCellsMeasured;\n      this._frames[cellKey] = next;\n      this._highestMeasuredFrameIndex = Math.max(\n        this._highestMeasuredFrameIndex,\n        index,\n      );\n      this._scheduleCellsToRenderUpdate();\n    } else {\n      this._frames[cellKey].inLayout = true;\n    }\n    this._computeBlankness();\n  }\n\n  _onCellUnmount = (cellKey: string) => {\n    const curr = this._frames[cellKey];\n    if (curr) {\n      this._frames[cellKey] = {...curr, inLayout: false};\n    }\n  };\n\n  _onLayout = (e: Object) => {\n    this._scrollMetrics.visibleLength = this._selectLength(\n      e.nativeEvent.layout,\n    );\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onLayoutEmpty = e => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _onLayoutFooter = e => {\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = e => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _renderDebugOverlay() {\n    const normalize =\n      this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._getFrameMetricsApprox(ii);\n      if (frame.inLayout) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._getFrameMetricsApprox(this.state.first).offset;\n    const frameLast = this._getFrameMetricsApprox(this.state.last);\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n    const baseStyle = {position: 'absolute', top: 0, right: 0};\n    return (\n      <View\n        style={{\n          ...baseStyle,\n          bottom: 0,\n          width: 20,\n          borderColor: 'blue',\n          borderWidth: 1,\n        }}>\n        {framesInLayout.map((f, ii) =>\n          <View\n            key={'f' + ii}\n            style={{\n              ...baseStyle,\n              left: 0,\n              top: f.offset * normalize,\n              height: f.length * normalize,\n              backgroundColor: 'orange',\n            }}\n          />,\n        )}\n        <View\n          style={{\n            ...baseStyle,\n            left: 0,\n            top: windowTop * normalize,\n            height: windowLen * normalize,\n            borderColor: 'green',\n            borderWidth: 2,\n          }}\n        />\n        <View\n          style={{\n            ...baseStyle,\n            left: 0,\n            top: visTop * normalize,\n            height: visLen * normalize,\n            borderColor: 'red',\n            borderWidth: 2,\n          }}\n        />\n      </View>\n    );\n  }\n\n  _selectLength(metrics: {height: number, width: number}): number {\n    return !this.props.horizontal ? metrics.height : metrics.width;\n  }\n\n  _selectOffset(metrics: {x: number, y: number}): number {\n    return !this.props.horizontal ? metrics.y : metrics.x;\n  }\n\n  _maybeCallOnEndReached() {\n    const {\n      data,\n      getItemCount,\n      onEndReached,\n      onEndReachedThreshold,\n    } = this.props;\n    const {contentLength, visibleLength, offset} = this._scrollMetrics;\n    const distanceFromEnd = contentLength - visibleLength - offset;\n    if (\n      onEndReached &&\n      this.state.last === getItemCount(data) - 1 &&\n      distanceFromEnd < onEndReachedThreshold * visibleLength &&\n      (this._hasDataChangedSinceEndReached ||\n        this._scrollMetrics.contentLength !== this._sentEndForContentLength)\n    ) {\n      // Only call onEndReached once for a given dataset + content length.\n      this._hasDataChangedSinceEndReached = false;\n      this._sentEndForContentLength = this._scrollMetrics.contentLength;\n      onEndReached({distanceFromEnd});\n    }\n  }\n\n  _onContentSizeChange = (width: number, height: number) => {\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scrollMetrics.contentLength = this._selectLength({height, width});\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onScroll = (e: Object) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    const visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    const contentLength = this._selectLength(e.nativeEvent.contentSize);\n    const offset = this._selectOffset(e.nativeEvent.contentOffset);\n    const dt = this._scrollMetrics.timestamp\n      ? Math.max(1, timestamp - this._scrollMetrics.timestamp)\n      : 1;\n    if (\n      dt > 500 &&\n      this._scrollMetrics.dt > 500 &&\n      contentLength > 5 * visibleLength &&\n      !this._hasWarned.perf\n    ) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n          'renderItem function renders components that follow React performance best practices ' +\n          'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n    const dOffset = offset - this._scrollMetrics.offset;\n    const velocity = dOffset / dt;\n    this._scrollMetrics = {\n      contentLength,\n      dt,\n      dOffset,\n      offset,\n      timestamp,\n      velocity,\n      visibleLength,\n    };\n    this._updateViewableItems(this.props.data);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEndReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _scheduleCellsToRenderUpdate() {\n    const {first, last} = this.state;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    if (first > 0 || last < itemCount - 1) {\n      const distTop = offset - this._getFrameMetricsApprox(first).offset;\n      const distBottom =\n        this._getFrameMetricsApprox(last).offset - (offset + visibleLength);\n      const scrollingThreshold =\n        this.props.onEndReachedThreshold * visibleLength / 2;\n      hiPri =\n        Math.min(distTop, distBottom) < 0 ||\n        (velocity < -2 && distTop < scrollingThreshold) ||\n        (velocity > 2 && distBottom < scrollingThreshold);\n    }\n    // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n    if (hiPri && this._averageCellLength) {\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({abort: true});\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _onScrollBeginDrag = (e): void => {\n    this._viewabilityHelper.recordInteraction();\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  _onScrollEndDrag = (e): void => {\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  _onMomentumScrollEnd = (e): void => {\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    const {data, getItemCount, onEndReachedThreshold} = this.props;\n    const isVirtualizationDisabled = this._isVirtualizationDisabled();\n    this._updateViewableItems(data);\n    if (!data) {\n      return;\n    }\n    this.setState(state => {\n      let newState;\n      if (!isVirtualizationDisabled) {\n        // If we run this with bogus data, we'll force-render window {first: 0, last: 0},\n        // and wipe out the initialNumToRender rendered elements.\n        // So let's wait until the scroll view metrics have been set up. And until then,\n        // we will trust the initialNumToRender suggestion\n        if (this._scrollMetrics.visibleLength) {\n          // If we have a non-zero initialScrollIndex and run this before we've scrolled,\n          // we'll wipe out the initialNumToRender rendered elements starting at initialScrollIndex.\n          // So let's wait until we've scrolled the view to the right place. And until then,\n          // we will trust the initialScrollIndex suggestion.\n          if (!this.props.initialScrollIndex || this._scrollMetrics.offset) {\n            newState = computeWindowedRenderLimits(\n              this.props,\n              state,\n              this._getFrameMetricsApprox,\n              this._scrollMetrics,\n            );\n          }\n        }\n      } else {\n        const {contentLength, offset, visibleLength} = this._scrollMetrics;\n        const distanceFromEnd = contentLength - visibleLength - offset;\n        const renderAhead =\n          distanceFromEnd < onEndReachedThreshold * visibleLength\n            ? this.props.maxToRenderPerBatch\n            : 0;\n        newState = {\n          first: 0,\n          last: Math.min(state.last + renderAhead, getItemCount(data) - 1),\n        };\n      }\n      return newState;\n    });\n  };\n\n  _createViewToken = (index: number, isViewable: boolean) => {\n    const {data, getItem, keyExtractor} = this.props;\n    const item = getItem(data, index);\n    invariant(item, 'Missing item for index ' + index);\n    return {index, item, key: keyExtractor(item, index), isViewable};\n  };\n\n  _getFrameMetricsApprox = (\n    index: number,\n  ): {length: number, offset: number} => {\n    const frame = this._getFrameMetrics(index);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {getItemLayout} = this.props;\n      invariant(\n        !getItemLayout,\n        'Should not have to estimate frames when a measurement metrics function is provided',\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n      };\n    }\n  };\n\n  _getFrameMetrics = (\n    index: number,\n  ): ?{\n    length: number,\n    offset: number,\n    index: number,\n    inLayout?: boolean,\n  } => {\n    const {\n      data,\n      getItem,\n      getItemCount,\n      getItemLayout,\n      keyExtractor,\n    } = this.props;\n    invariant(\n      getItemCount(data) > index,\n      'Tried to get frame for out of range index ' + index,\n    );\n    const item = getItem(data, index);\n    let frame = item && this._frames[keyExtractor(item, index)];\n    if (!frame || frame.index !== index) {\n      if (getItemLayout) {\n        frame = getItemLayout(data, index);\n        if (__DEV__) {\n          const frameType = PropTypes.shape({\n            length: PropTypes.number.isRequired,\n            offset: PropTypes.number.isRequired,\n            index: PropTypes.number.isRequired,\n          }).isRequired;\n          PropTypes.checkPropTypes(\n            {frame: frameType},\n            {frame},\n            'frame',\n            'VirtualizedList.getItemLayout',\n          );\n        }\n      }\n    }\n    return frame;\n  };\n\n  _updateViewableItems(data: any) {\n    const {getItemCount, onViewableItemsChanged} = this.props;\n    if (!onViewableItemsChanged) {\n      return;\n    }\n    this._viewabilityHelper.onUpdate(\n      getItemCount(data),\n      this._scrollMetrics.offset,\n      this._scrollMetrics.visibleLength,\n      this._getFrameMetrics,\n      this._createViewToken,\n      onViewableItemsChanged,\n      this.state,\n    );\n  }\n}\n\nclass CellRenderer extends React.Component {\n  props: {\n    ItemSeparatorComponent: ?ReactClass<*>,\n    cellKey: string,\n    fillRateHelper: FillRateHelper,\n    index: number,\n    inversionStyle: ?StyleObj,\n    item: Item,\n    onLayout: (event: Object) => void, // This is extracted by ScrollViewStickyHeader\n    onUnmount: (cellKey: string) => void,\n    onUpdateSeparators: (cellKeys: Array<?string>, props: Object) => void,\n    parentProps: {\n      getItemLayout?: ?Function,\n      renderItem: renderItemType,\n    },\n    prevCellKey: ?string,\n  };\n\n  state = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: true,\n      });\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: false,\n      });\n    },\n    updateProps: (select: 'leading' | 'trailing', newProps: Object) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators(\n        [select === 'leading' ? prevCellKey : cellKey],\n        newProps,\n      );\n    },\n  };\n\n  updateSeparatorProps(newProps: Object) {\n    this.setState(state => ({\n      separatorProps: {...state.separatorProps, ...newProps},\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  render() {\n    const {\n      ItemSeparatorComponent,\n      fillRateHelper,\n      item,\n      index,\n      inversionStyle,\n      parentProps,\n    } = this.props;\n    const {renderItem, getItemLayout} = parentProps;\n    invariant(renderItem, 'no renderItem!');\n    const element = renderItem({\n      item,\n      index,\n      separators: this._separators,\n    });\n    const onLayout =\n      getItemLayout && !parentProps.debug && !fillRateHelper.enabled()\n        ? undefined\n        : this.props.onLayout;\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    return (\n      <View onLayout={onLayout} style={inversionStyle}>\n        {element}\n        {ItemSeparatorComponent &&\n          <ItemSeparatorComponent {...this.state.separatorProps} />}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  verticallyInverted: {\n    transform: [{scaleY: -1}],\n  },\n  horizontallyInverted: {\n    transform: [{scaleX: -1}],\n  },\n});\n\nmodule.exports = VirtualizedList;\n"]}