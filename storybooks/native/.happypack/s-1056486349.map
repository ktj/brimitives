{"version":3,"sources":["node_modules/react-inspector/lib/tree-view/pathUtils.js"],"names":["Object","defineProperty","exports","value","hasChildNodes","DEFAULT_ROOT_PATH","WILDCARD","data","dataIterator","next","done","wildcardPathsFromLevel","level","Array","from","length","_","i","concat","join","getExpandedPaths","expandPaths","expandLevel","initialState","arguments","undefined","wildcardPaths","filter","path","expandedPaths","forEach","wildcardPath","keyPaths","split","populatePaths","curData","curPath","depth","push","key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","_ref2","name","_data","err","return","reduce","obj"],"mappings":"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","file":"pathUtils.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasChildNodes = hasChildNodes;\nvar DEFAULT_ROOT_PATH = exports.DEFAULT_ROOT_PATH = '$';\n\nvar WILDCARD = '*';\n\nfunction hasChildNodes(data, dataIterator) {\n  return !dataIterator(data).next().done;\n}\n\nvar wildcardPathsFromLevel = exports.wildcardPathsFromLevel = function wildcardPathsFromLevel(level) {\n  // i is depth\n  return Array.from({ length: level }, function (_, i) {\n    return [DEFAULT_ROOT_PATH].concat(Array.from({ length: i }, function () {\n      return '*';\n    })).join('.');\n  });\n};\n\nvar getExpandedPaths = exports.getExpandedPaths = function getExpandedPaths(data, dataIterator, expandPaths, expandLevel) {\n  var initialState = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var wildcardPaths = [].concat(wildcardPathsFromLevel(expandLevel)).concat(expandPaths).filter(function (path) {\n    return typeof path === 'string';\n  }); // could be undefined\n\n  var expandedPaths = [];\n  wildcardPaths.forEach(function (wildcardPath) {\n    var keyPaths = wildcardPath.split('.');\n    var populatePaths = function populatePaths(curData, curPath, depth) {\n      if (depth === keyPaths.length) {\n        expandedPaths.push(curPath);\n        return;\n      }\n      var key = keyPaths[depth];\n      if (depth === 0) {\n        if (hasChildNodes(curData, dataIterator) && (key === DEFAULT_ROOT_PATH || key === WILDCARD)) {\n          populatePaths(curData, DEFAULT_ROOT_PATH, depth + 1);\n        }\n      } else {\n        if (key === WILDCARD) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = dataIterator(curData)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _ref2 = _step.value;\n              var name = _ref2.name,\n                  _data = _ref2.data;\n\n              if (hasChildNodes(_data, dataIterator)) {\n                populatePaths(_data, curPath + '.' + name, depth + 1);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } else {\n          var value = curData[key];\n          if (hasChildNodes(value, dataIterator)) {\n            populatePaths(value, curPath + '.' + key, depth + 1);\n          }\n        }\n      }\n    };\n\n    populatePaths(data, '', 0);\n  });\n\n  return expandedPaths.reduce(function (obj, path) {\n    obj[path] = true;\n    return obj;\n  }, initialState);\n};"]}