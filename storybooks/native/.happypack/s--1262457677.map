{"version":3,"sources":["node_modules/react-native/Libraries/Utilities/HMRClient.js"],"names":["Platform","require","invariant","HMRClient","enable","platform","bundleEntry","host","port","WebSocket","wsHostPort","wsUrl","replace","activeWS","onerror","e","error","OS","message","Error","onmessage","data","HMRLoadingView","JSON","parse","type","showMessage","body","modules","sourceMappingURLs","sourceURLs","inverseDependencies","RCTRedBox","RedBox","dismiss","RCTExceptionsManager","ExceptionsManager","dismissRedbox","forEach","i","id","code","injectFunction","global","nativeInjectHMRUpdate","eval","stringify","join","hide","description","module","exports"],"mappings":"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","file":"HMRClient.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HMRClient\n * @flow\n */\n'use strict';\n\nconst Platform = require('Platform');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient = {\n  enable(platform: string, bundleEntry: string, host: string, port: number) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');\n    invariant(host, 'Missing required paramenter `host`');\n\n    // need to require WebSocket inside of `enable` function because\n    // this module is defined as a `polyfillGlobal`.\n    // See `InitializeJavascriptAppEngine.js`\n    const WebSocket = require('WebSocket');\n\n    const wsHostPort = port !== null && port !== ''\n      ? `${host}:${port}`\n      : host;\n\n    // Build the websocket url\n    const wsUrl = `ws://${wsHostPort}/hot?` +\n      `platform=${platform}&` +\n      `bundleEntry=${bundleEntry.replace('.bundle', '.js')}`;\n\n    const activeWS = new WebSocket(wsUrl);\n    activeWS.onerror = (e) => {\n      let error = (\n`Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network`\n      );\n\n      if (Platform.OS === 'ios') {\n        error += (\n`\n- Ensure that the Packager server URL is correctly set in AppDelegate`\n        );\n      } else {\n        error += (\n`\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`\n        );\n      }\n\n      error += (\n`\n\nURL: ${host}:${port}\n\nError: ${e.message}`\n      );\n\n      throw new Error(error);\n    };\n    activeWS.onmessage = ({data}) => {\n      // Moving to top gives errors due to NativeModules not being initialized\n      const HMRLoadingView = require('HMRLoadingView');\n\n      data = JSON.parse(data);\n\n      switch (data.type) {\n        case 'update-start': {\n          HMRLoadingView.showMessage('Hot Loading...');\n          break;\n        }\n        case 'update': {\n          const {\n            modules,\n            sourceMappingURLs,\n            sourceURLs,\n            inverseDependencies,\n          } = data.body;\n\n          if (Platform.OS === 'ios') {\n            const RCTRedBox = require('NativeModules').RedBox;\n            RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();\n          } else {\n            const RCTExceptionsManager = require('NativeModules').ExceptionsManager;\n            RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();\n          }\n\n          modules.forEach(({id, code}, i) => {\n            code = code + '\\n\\n' + sourceMappingURLs[i];\n\n            // on JSC we need to inject from native for sourcemaps to work\n            // (Safari doesn't support `sourceMappingURL` nor any variant when\n            // evaluating code) but on Chrome we can simply use eval\n            const injectFunction = typeof global.nativeInjectHMRUpdate === 'function'\n              ? global.nativeInjectHMRUpdate\n              : eval;\n\n            code = [\n              '__accept(',\n                `${id},`,\n                'function(global,require,module,exports){',\n                  `${code}`,\n                '\\n},',\n                `${JSON.stringify(inverseDependencies)}`,\n              ');',\n            ].join('');\n\n            injectFunction(code, sourceURLs[i]);\n          });\n\n          HMRLoadingView.hide();\n          break;\n        }\n        case 'update-done': {\n          HMRLoadingView.hide();\n          break;\n        }\n        case 'error': {\n          HMRLoadingView.hide();\n          throw new Error(data.body.type + ' ' + data.body.description);\n        }\n        default: {\n          throw new Error(`Unexpected message: ${data}`);\n        }\n      }\n    };\n  },\n};\n\nmodule.exports = HMRClient;\n"]}