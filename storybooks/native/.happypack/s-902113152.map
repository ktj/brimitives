{"version":3,"sources":["node_modules/react-native/Libraries/Network/FormData.js"],"names":["FormData","_parts","key","value","push","map","name","contentDisposition","headers","type","fieldName","string","String","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCMA,Q;;;AAGJ,mBAAc;AACZ,KAAKC,MAAL,CAAc,EAAd;AACD,C;;AAEMC,G,CAAaC,K,CAAsB;;;;;;AAMxC,KAAKF,MAAL,CAAYG,IAAZ,CAAiB,CAACF,GAAD,CAAMC,KAAN,CAAjB;AACD,C;;AAE+B;AAC9B,MAAO,MAAKF,MAAL,CAAYI,GAAZ,CAAgB,cAAmB,kCAAjBC,IAAiB,UAAXH,KAAW;AACxC,GAAII,oBAAqB,oBAAsBD,IAAtB,CAA6B,GAAtD;;AAEA,GAAIE,SAAmB,CAAC,sBAAuBD,kBAAxB,CAAvB;;;;;;AAMA,GAAI,MAAOJ,MAAP,GAAiB,QAAjB,EAA6BA,KAAjC,CAAwC;AACtC,GAAI,MAAOA,OAAMG,IAAb,GAAsB,QAA1B,CAAoC;AAClCE,QAAQ,qBAAR,GAAkC,eAAiBL,MAAMG,IAAvB,CAA8B,GAAhE;AACD;AACD,GAAI,MAAOH,OAAMM,IAAb,GAAsB,QAA1B,CAAoC;AAClCD,QAAQ,cAAR,EAA0BL,MAAMM,IAAhC;AACD;AACD,mBAAWN,KAAX,EAAkBK,eAAlB,CAA2BE,UAAWJ,IAAtC;AACD;;AAED,MAAO,CAACK,OAAQC,OAAOT,KAAP,CAAT,CAAwBK,eAAxB,CAAiCE,UAAWJ,IAA5C,CAAP;AACD,CApBM,CAAP;AAqBD,C;;;AAGHO,OAAOC,OAAP,CAAiBd,QAAjB,C,0GAzCMA,Q","file":"FormData.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FormData\n * @flow\n */\n'use strict';\n\ntype FormDataValue = any;\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string};\ntype FormDataPart = {\n  string: string,\n  headers: Headers,\n} | {\n  uri: string,\n  headers: Headers,\n  name?: string,\n  type?: string,\n};\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      var contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      var headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"]}