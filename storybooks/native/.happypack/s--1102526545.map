{"version":3,"sources":["node_modules/react-native/Libraries/Components/TextInput/TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","warning","onlyMultiline","onTextInput","children","OS","AndroidTextInput","RCTTextView","RCTTextField","DataDetectorTypes","TextInput","displayName","statics","State","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","node","placeholderTextColor","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","mixins","isFocused","currentlyFocusedField","findNodeHandle","_inputRef","contextTypes","onFocusRequested","focusEmitter","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","context","requestAnimationFrame","focus","addListener","el","blur","componentWillUnmount","remove","getChildContext","isInAParentText","childContextTypes","clear","setNativeProps","text","render","_renderIOS","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityTraits","nativeID","testID","Constants","AutoCapitalizationType","accessibilityComponentType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","create","paddingTop","module","exports"],"mappings":"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","file":"TextInput.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TextInput\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextInputState = require('TextInputState');\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nif (Platform.OS === 'android') {\n  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);\n} else if (Platform.OS === 'ios') {\n  var RCTTextView = requireNativeComponent('RCTTextView', null);\n  var RCTTextField = requireNativeComponent('RCTTextField', null);\n}\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n// $FlowFixMe(>=0.41.0)\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    /* TODO(brentvatne) docs are needed for this */\n    State: TextInputState,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `email-address`\n     * - `phone-pad`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'number-pad',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf([\n      'default',\n      'light',\n      'dark',\n    ]),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     * @platform ios\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.node,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n    * The highlight and cursor color of the text input.\n    */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported,\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     */\n    caretHidden: PropTypes.bool,\n  },\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef);\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    if (!this.context.focusEmitter) {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n      return;\n    }\n    this._focusSubscription = this.context.focusEmitter.addListener(\n      'focus',\n      (el) => {\n        if (this === el) {\n          this.requestAnimationFrame(this.focus);\n        } else if (this.isFocused()) {\n          this.blur();\n        }\n      }\n    );\n    if (this.props.autoFocus) {\n      this.context.onFocusRequested(this);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n  },\n\n  getChildContext: function(): Object {\n    return {isInAParentText: true};\n  },\n\n  childContextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    if (Platform.OS === 'ios') {\n      return this._renderIOS();\n    } else if (Platform.OS === 'android') {\n      return this._renderAndroid();\n    }\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string' ?\n      this.props.value :\n      (\n        typeof this.props.defaultValue === 'string' ?\n        this.props.defaultValue :\n        ''\n      );\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOS: function() {\n    var textContainer;\n\n    var props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {start: props.selection.start, end: props.selection.start};\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (var propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' + propKey + '` is only supported with multiline.'\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer =\n        <RCTTextField\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />;\n    } else {\n      var children = props.children;\n      var childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.'\n      );\n      if (childCount >= 1) {\n        children = <Text style={props.style}>{children}</Text>;\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer =\n        <RCTTextView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />;\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityTraits={props.accessibilityTraits}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[this.props.autoCapitalize];\n    var children = this.props.children;\n    var childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.'\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {start: props.selection.start, end: props.selection.start};\n    }\n\n    const textContainer =\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />;\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={this.props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityComponentType={this.props.accessibilityComponentType}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    var text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function () {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (this._lastNativeSelection && selection &&\n        (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nvar styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTTextView seem as close as possible\n    // to single-line RCTTextField defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TextInput;\n"]}