{"version":3,"sources":["node_modules/react-native/Libraries/Components/Button.js"],"names":["ColorPropType","require","Platform","React","PropTypes","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","invariant","Button","props","accessibilityLabel","color","onPress","title","disabled","testID","buttonStyles","styles","button","textStyles","text","OS","push","backgroundColor","accessibilityTraits","buttonDisabled","textDisabled","formattedTitle","toUpperCase","Touchable","Component","propTypes","string","isRequired","bool","func","create","select","ios","android","elevation","borderRadius","textAlign","padding","fontSize","fontWeight","module","exports"],"mappings":"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","file":"Button.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Button\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableNativeFeedback = require('TouchableNativeFeedback');\nconst TouchableOpacity = require('TouchableOpacity');\nconst View = require('View');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * A basic button component that should render nicely on any platform. Supports\n * a minimal level of customization.\n *\n * <center><img src=\"img/buttonExample.png\"></img></center>\n *\n * If this button doesn't look right for your app, you can build your own\n * button using [TouchableOpacity](docs/touchableopacity.html)\n * or [TouchableNativeFeedback](docs/touchablenativefeedback.html).\n * For inspiration, look at the [source code for this button component](https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js).\n * Or, take a look at the [wide variety of button components built by the community](https://js.coach/react-native?search=button).\n *\n * Example usage:\n *\n * ```\n * <Button\n *   onPress={onPressLearnMore}\n *   title=\"Learn More\"\n *   color=\"#841584\"\n *   accessibilityLabel=\"Learn more about this purple button\"\n * />\n * ```\n *\n */\n\nclass Button extends React.Component {\n\n  props: {\n    title: string,\n    onPress: () => any,\n    color?: ?string,\n    accessibilityLabel?: ?string,\n    disabled?: ?boolean,\n    testID?: ?string,\n  };\n\n  static propTypes = {\n    /**\n     * Text to display inside the button\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Text to display for blindness accessibility features\n     */\n    accessibilityLabel: PropTypes.string,\n    /**\n     * Color of the text (iOS), or background color of the button (Android)\n     */\n    color: ColorPropType,\n    /**\n     * If true, disable all interactions for this component.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Handler to be called when the user taps the button\n     */\n    onPress: PropTypes.func.isRequired,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      title,\n      disabled,\n      testID,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    if (color) {\n      if (Platform.OS === 'ios') {\n        textStyles.push({color: color});\n      } else {\n        buttonStyles.push({backgroundColor: color});\n      }\n    }\n    const accessibilityTraits = ['button'];\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n      accessibilityTraits.push('disabled');\n    }\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;\n    const Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n    return (\n      <Touchable\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={accessibilityTraits}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>{formattedTitle}</Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: Platform.select({\n    ios: {\n      // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n      color: '#007AFF',\n      textAlign: 'center',\n      padding: 8,\n      fontSize: 18,\n    },\n    android: {\n      color: 'white',\n      textAlign: 'center',\n      padding: 8,\n      fontWeight: '500',\n    },\n  }),\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    }\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    }\n  }),\n});\n\nmodule.exports = Button;\n"]}