{"version":3,"sources":["node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js"],"names":["createReactClass","require","Keyboard","LayoutAnimation","Platform","PropTypes","React","TimerMixin","View","ViewPropTypes","viewRef","KeyboardAvoidingView","displayName","mixins","propTypes","behavior","oneOf","contentContainerStyle","style","keyboardVerticalOffset","number","isRequired","getDefaultProps","getInitialState","bottom","subscriptions","frame","relativeKeyboardHeight","keyboardFrame","keyboardY","screenY","props","Math","max","y","height","onKeyboardChange","event","setState","duration","easing","endCoordinates","configureNext","update","type","Types","onLayout","nativeEvent","layout","componentWillUpdate","nextProps","nextState","nextContext","state","componentWillMount","OS","addListener","componentWillUnmount","forEach","sub","remove","render","children","heightStyle","flex","positionStyle","paddingStyle","paddingBottom","module","exports"],"mappings":"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","file":"KeyboardAvoidingView.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule KeyboardAvoidingView\n * @flow\n */\n'use strict';\n\nconst createReactClass = require('create-react-class');\nconst Keyboard = require('Keyboard');\nconst LayoutAnimation = require('LayoutAnimation');\nconst Platform = require('Platform');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst TimerMixin = require('react-timer-mixin');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\n\nimport type EmitterSubscription from 'EmitterSubscription';\nimport type {ViewLayout, ViewLayoutEvent} from 'ViewPropTypes';\n\ntype ScreenRect = {\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n};\ntype KeyboardChangeEvent = {\n  startCoordinates?: ScreenRect,\n  endCoordinates: ScreenRect,\n  duration?: number,\n  easing?: string,\n};\n\nconst viewRef = 'VIEW';\n\n/**\n * It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard.\n * It can automatically adjust either its position or bottom padding based on the position of the keyboard.\n */\n// $FlowFixMe(>=0.41.0)\nconst KeyboardAvoidingView = createReactClass({\n  displayName: 'KeyboardAvoidingView',\n  mixins: [TimerMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    behavior: PropTypes.oneOf(['height', 'position', 'padding']),\n\n    /**\n     * The style of the content container(View) when behavior is 'position'.\n     */\n    contentContainerStyle: ViewPropTypes.style,\n\n    /**\n     * This is the distance between the top of the user screen and the react native view,\n     * may be non-zero in some use cases.\n     */\n    keyboardVerticalOffset: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      keyboardVerticalOffset: 0,\n    };\n  },\n\n  getInitialState() {\n    return {\n      bottom: 0,\n    };\n  },\n\n  subscriptions: ([]: Array<EmitterSubscription>),\n  frame: (null: ?ViewLayout),\n\n  relativeKeyboardHeight(keyboardFrame: ScreenRect): number {\n    const frame = this.frame;\n    if (!frame || !keyboardFrame) {\n      return 0;\n    }\n\n    const keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;\n\n    // Calculate the displacement needed for the view such that it\n    // no longer overlaps with the keyboard\n    return Math.max(frame.y + frame.height - keyboardY, 0);\n  },\n\n  onKeyboardChange(event: ?KeyboardChangeEvent) {\n    if (!event) {\n      this.setState({bottom: 0});\n      return;\n    }\n\n    const {duration, easing, endCoordinates} = event;\n    const height = this.relativeKeyboardHeight(endCoordinates);\n\n    if (duration && easing) {\n      LayoutAnimation.configureNext({\n        duration: duration,\n        update: {\n          duration: duration,\n          type: LayoutAnimation.Types[easing] || 'keyboard',\n        },\n      });\n    }\n    this.setState({bottom: height});\n  },\n\n  onLayout(event: ViewLayoutEvent) {\n    this.frame = event.nativeEvent.layout;\n  },\n\n  componentWillUpdate(nextProps: Object, nextState: Object, nextContext?: Object): void {\n    if (nextState.bottom === this.state.bottom &&\n        this.props.behavior === 'height' &&\n        nextProps.behavior === 'height') {\n      // If the component rerenders without an internal state change, e.g.\n      // triggered by parent component re-rendering, no need for bottom to change.\n      nextState.bottom = 0;\n    }\n  },\n\n  componentWillMount() {\n    if (Platform.OS === 'ios') {\n      this.subscriptions = [\n        Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange),\n      ];\n    } else {\n      this.subscriptions = [\n        Keyboard.addListener('keyboardDidHide', this.onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', this.onKeyboardChange),\n      ];\n    }\n  },\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((sub) => sub.remove());\n  },\n\n  render(): React.Element<any> {\n    // $FlowFixMe(>=0.41.0)\n    const {behavior, children, style, ...props} = this.props;\n\n    switch (behavior) {\n      case 'height':\n        let heightStyle;\n        if (this.frame) {\n          // Note that we only apply a height change when there is keyboard present,\n          // i.e. this.state.bottom is greater than 0. If we remove that condition,\n          // this.frame.height will never go back to its original value.\n          // When height changes, we need to disable flex.\n          heightStyle = {height: this.frame.height - this.state.bottom, flex: 0};\n        }\n        return (\n          <View ref={viewRef} style={[style, heightStyle]} onLayout={this.onLayout} {...props}>\n            {children}\n          </View>\n        );\n\n      case 'position':\n        const positionStyle = {bottom: this.state.bottom};\n        const { contentContainerStyle } = this.props;\n\n        return (\n          <View ref={viewRef} style={style} onLayout={this.onLayout} {...props}>\n            <View style={[contentContainerStyle, positionStyle]}>\n              {children}\n            </View>\n          </View>\n        );\n\n      case 'padding':\n        const paddingStyle = {paddingBottom: this.state.bottom};\n        return (\n          <View ref={viewRef} style={[style, paddingStyle]} onLayout={this.onLayout} {...props}>\n            {children}\n          </View>\n        );\n\n      default:\n        return (\n          <View ref={viewRef} onLayout={this.onLayout} style={style} {...props}>\n            {children}\n          </View>\n        );\n    }\n  },\n});\n\nmodule.exports = KeyboardAvoidingView;\n"]}