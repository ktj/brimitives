{"version":3,"sources":["node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js"],"names":["NativeModules","require","Promise","RCTDeviceEventEmitter","AccessibilityManager","VOICE_OVER_EVENT","ANNOUNCEMENT_DID_FINISH_EVENT","_subscriptions","Map","AccessibilityInfo","fetch","resolve","reject","getCurrentVoiceOverState","addEventListener","eventName","handler","listener","addListener","set","remove","removeEventListener","bind","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","get","delete","module","exports"],"mappings":";;;;;;;;;;;AAWA;;AAEA,GAAIA,eAAgBC,QAAQ,eAAR,CAApB;AACA,GAAIC,SAAUD,QAAQ,SAAR,CAAd;AACA,GAAIE,uBAAwBF,QAAQ,uBAAR,CAA5B;;AAEA,GAAIG,sBAAuBJ,cAAcI,oBAAzC;;AAEA,GAAIC,kBAAmB,oBAAvB;AACA,GAAIC,+BAAgC,uBAApC;;;;;;;AAOA,GAAIC,gBAAiB,GAAIC,IAAJ,EAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,GAAIC,mBAAoB;;;;;;;AAOtBC,MAAO,gBAAoB;AACzB,MAAO,IAAIR,QAAJ,CAAY,SAACS,OAAD,CAAUC,MAAV,CAAqB;AACtCR,qBAAqBS,wBAArB;AACEF,OADF;AAEEC,MAFF;;AAID,CALM,CAAP;AAMD,CAdqB;;;;;;;;;;;;;;AA4BtBE,iBAAkB;AAChBC,SADgB;AAEhBC,OAFgB;AAGR;AACR,GAAIC,SAAJ;;AAEA,GAAIF,YAAc,QAAlB,CAA4B;AAC1BE,SAAWd,sBAAsBe,WAAtB;AACTb,gBADS;AAETW,OAFS,CAAX;;AAID,CALD,IAKO,IAAID,YAAc,sBAAlB,CAA0C;AAC/CE,SAAWd,sBAAsBe,WAAtB;AACTZ,6BADS;AAETU,OAFS,CAAX;;AAID;;AAEDT,eAAeY,GAAf,CAAmBH,OAAnB,CAA4BC,QAA5B;AACA,MAAO;AACLG,OAAQX,kBAAkBY,mBAAlB,CAAsCC,IAAtC,CAA2C,IAA3C,CAAiDP,SAAjD,CAA4DC,OAA5D,CADH,CAAP;;AAGD,CAlDqB;;;;;AAuDtBO,sBAAuB;AACrBC,QADqB;AAEf;AACNpB,qBAAqBmB,qBAArB,CAA2CC,QAA3C;AACD,CA3DqB;;;;;AAgEtBC,yBAA0B;AACxBC,YADwB;AAElB;AACNtB,qBAAqBqB,wBAArB,CAA8CC,YAA9C;AACD,CApEqB;;;;;AAyEtBL,oBAAqB;AACnBN,SADmB;AAEnBC,OAFmB;AAGb;AACN,GAAIC,UAAWV,eAAeoB,GAAf,CAAmBX,OAAnB,CAAf;AACA,GAAI,CAACC,QAAL,CAAe;AACb;AACD;AACDA,SAASG,MAAT;AACAb,eAAeqB,MAAf,CAAsBZ,OAAtB;AACD,CAnFqB,CAAxB;;;;AAuFAa,OAAOC,OAAP,CAAiBrB,iBAAjB,C,0GArJIL,oB,oMAEAC,gB,gMACAC,6B,6MAOAC,c,8LAoDAE,iB","file":"AccessibilityInfo.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AccessibilityInfo\n * @flow\n */\n'use strict';\n\nvar NativeModules = require('NativeModules');\nvar Promise = require('Promise');\nvar RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nvar AccessibilityManager = NativeModules.AccessibilityManager;\n\nvar VOICE_OVER_EVENT = 'voiceOverDidChange';\nvar ANNOUNCEMENT_DID_FINISH_EVENT = 'announcementDidFinish';\n\ntype ChangeEventName = $Enum<{\n  change: string,\n  announcementFinished: string\n}>;\n\nvar _subscriptions = new Map();\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader that is currently active. The\n * `AccessibilityInfo` API is designed for this purpose. You can use it to query the current state of the\n * screen reader as well as to register to be notified when the state of the screen reader changes.\n *\n * Here's a small example illustrating how to use `AccessibilityInfo`:\n *\n * ```javascript\n * class ScreenReaderStatusExample extends React.Component {\n *   state = {\n *     screenReaderEnabled: false,\n *   }\n *\n *   componentDidMount() {\n *     AccessibilityInfo.addEventListener(\n *       'change',\n *       this._handleScreenReaderToggled\n *     );\n *     AccessibilityInfo.fetch().done((isEnabled) => {\n *       this.setState({\n *         screenReaderEnabled: isEnabled\n *       });\n *     });\n *   }\n *\n *   componentWillUnmount() {\n *     AccessibilityInfo.removeEventListener(\n *       'change',\n *       this._handleScreenReaderToggled\n *     );\n *   }\n *\n *   _handleScreenReaderToggled = (isEnabled) => {\n *     this.setState({\n *       screenReaderEnabled: isEnabled,\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <View>\n *         <Text>\n *           The screen reader is {this.state.screenReaderEnabled ? 'enabled' : 'disabled'}.\n *         </Text>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nvar AccessibilityInfo = {\n\n  /**\n   * Query whether a screen reader is currently enabled. Returns a promise which\n   * resolves to a boolean. The result is `true` when a screen reader is enabled\n   * and `false` otherwise.\n   */\n  fetch: function(): Promise {\n    return new Promise((resolve, reject) => {\n      AccessibilityManager.getCurrentVoiceOverState(\n        resolve,\n        reject\n      );\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a dictionary\n   *   with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was successfully made.\n   */\n  addEventListener: function (\n    eventName: ChangeEventName,\n    handler: Function\n  ): Object {\n    var listener;\n\n    if (eventName === 'change') {\n      listener = RCTDeviceEventEmitter.addListener(\n        VOICE_OVER_EVENT,\n        handler\n      );\n    } else if (eventName === 'announcementFinished') {\n      listener = RCTDeviceEventEmitter.addListener(\n        ANNOUNCEMENT_DID_FINISH_EVENT,\n        handler\n      );\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: AccessibilityInfo.removeEventListener.bind(null, eventName, handler),\n    };\n  },\n\n  /**\n   * iOS-Only. Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function(\n    reactTag: number\n  ): void {\n    AccessibilityManager.setAccessibilityFocus(reactTag);\n  },\n\n  /**\n   * iOS-Only. Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function(\n    announcement: string\n  ): void {\n    AccessibilityManager.announceForAccessibility(announcement);\n  },\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function\n  ): void {\n    var listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n};\n\nmodule.exports = AccessibilityInfo;\n"]}