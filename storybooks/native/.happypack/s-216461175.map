{"version":3,"sources":["node_modules/react-native/Libraries/Components/Picker/PickerIOS.ios.js"],"names":["NativeMethodsMixin","require","React","PropTypes","StyleSheet","StyleSheetPropType","TextStylePropTypes","View","ViewPropTypes","processColor","createReactClass","itemStylePropType","requireNativeComponent","PickerIOS","displayName","mixins","propTypes","itemStyle","onValueChange","func","selectedValue","any","getInitialState","_stateFromProps","props","componentWillReceiveProps","nextProps","setState","selectedIndex","items","Children","toArray","children","forEach","child","index","value","push","label","textColor","color","render","style","_picker","picker","styles","pickerIOS","state","_onChange","event","onChange","nativeEvent","newValue","newIndex","setNativeProps","Item","Component","string","create","height","RCTPickerIOS","nativeOnly","module","exports"],"mappings":"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","file":"PickerIOS.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PickerIOS\n *\n * This is a controlled component version of RCTPickerIOS\n */\n'use strict';\n\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar React = require('React');\nconst PropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar StyleSheetPropType = require('StyleSheetPropType');\nvar TextStylePropTypes = require('TextStylePropTypes');\nvar View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nvar processColor = require('processColor');\n\nvar createReactClass = require('create-react-class');\nvar itemStylePropType = StyleSheetPropType(TextStylePropTypes);\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar PickerIOS = createReactClass({\n  displayName: 'PickerIOS',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    itemStyle: itemStylePropType,\n    onValueChange: PropTypes.func,\n    selectedValue: PropTypes.any, // string or integer basically\n  },\n\n  getInitialState: function() {\n    return this._stateFromProps(this.props);\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    this.setState(this._stateFromProps(nextProps));\n  },\n\n  // Translate PickerIOS prop and children into stuff that RCTPickerIOS understands.\n  _stateFromProps: function(props) {\n    var selectedIndex = 0;\n    var items = [];\n    React.Children.toArray(props.children).forEach(function (child, index) {\n      if (child.props.value === props.selectedValue) {\n        selectedIndex = index;\n      }\n      items.push({\n        value: child.props.value,\n        label: child.props.label,\n        textColor: processColor(child.props.color),\n      });\n    });\n    return {selectedIndex, items};\n  },\n\n  render: function() {\n    return (\n      <View style={this.props.style}>\n        <RCTPickerIOS\n          ref={picker => this._picker = picker}\n          style={[styles.pickerIOS, this.props.itemStyle]}\n          items={this.state.items}\n          selectedIndex={this.state.selectedIndex}\n          onChange={this._onChange}\n          onStartShouldSetResponder={() => true}\n          onResponderTerminationRequest={() => false}\n        />\n      </View>\n    );\n  },\n\n  _onChange: function(event) {\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n    if (this.props.onValueChange) {\n      this.props.onValueChange(event.nativeEvent.newValue, event.nativeEvent.newIndex);\n    }\n\n    // The picker is a controlled component. This means we expect the\n    // on*Change handlers to be in charge of updating our\n    // `selectedValue` prop. That way they can also\n    // disallow/undo/mutate the selection of certain values. In other\n    // words, the embedder of this component should be the source of\n    // truth, not the native component.\n    if (this._picker && this.state.selectedIndex !== event.nativeEvent.newIndex) {\n      this._picker.setNativeProps({\n        selectedIndex: this.state.selectedIndex\n      });\n    }\n  },\n});\n\nPickerIOS.Item = class extends React.Component {\n  static propTypes = {\n    value: PropTypes.any, // string or integer basically\n    label: PropTypes.string,\n    color: PropTypes.string,\n  };\n\n  render() {\n    // These items don't get rendered directly.\n    return null;\n  }\n};\n\nvar styles = StyleSheet.create({\n  pickerIOS: {\n    // The picker will conform to whatever width is given, but we do\n    // have to set the component's height explicitly on the\n    // surrounding view to ensure it gets rendered.\n    height: 216,\n  },\n});\n\nvar RCTPickerIOS = requireNativeComponent('RCTPicker', {\n  propTypes: {\n    style: itemStylePropType,\n  },\n}, {\n  nativeOnly: {\n    items: true,\n    onChange: true,\n    selectedIndex: true,\n  },\n});\n\nmodule.exports = PickerIOS;\n"]}