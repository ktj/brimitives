{"version":3,"sources":["node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js"],"names":["NativeMethodsMixin","require","React","PropTypes","StyleSheet","ViewPropTypes","createReactClass","requireNativeComponent","SEGMENTED_CONTROL_REFERENCE","SegmentedControlIOS","displayName","mixins","propTypes","values","arrayOf","string","selectedIndex","number","onValueChange","func","onChange","enabled","bool","tintColor","momentary","getDefaultProps","_onChange","event","props","nativeEvent","value","render","styles","segmentedControl","style","create","height","RCTSegmentedControl","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAIA,oBAAqBC,QAAQ,oBAAR,CAAzB;AACA,GAAIC,OAAQD,QAAQ,OAAR,CAAZ;AACA,GAAIE,WAAYF,QAAQ,YAAR,CAAhB;AACA,GAAIG,YAAaH,QAAQ,YAAR,CAAjB;AACA,GAAII,eAAgBJ,QAAQ,eAAR,CAApB;;AAEA,GAAIK,kBAAmBL,QAAQ,oBAAR,CAAvB;AACA,GAAIM,wBAAyBN,QAAQ,wBAAR,CAA7B;;;;;;;AAOA,GAAIO,6BAA8B,kBAAlC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,GAAIC,qBAAsBH,iBAAiB;AACzCI,YAAa,qBAD4B;AAEzCC,OAAQ,CAACX,kBAAD,CAFiC;;AAIzCY;AACKP,aADL;;;;AAKEQ,OAAQV,UAAUW,OAAV,CAAkBX,UAAUY,MAA5B,CALV;;;;;AAUEC,cAAeb,UAAUc,MAV3B;;;;;;AAgBEC,cAAef,UAAUgB,IAhB3B;;;;;;AAsBEC,SAAUjB,UAAUgB,IAtBtB;;;;;;AA4BEE,QAASlB,UAAUmB,IA5BrB;;;;;AAiCEC,UAAWpB,UAAUY,MAjCvB;;;;;;AAuCES,UAAWrB,UAAUmB,IAvCvB,EAJyC;;;AA8CzCG,gBAAiB,0BAAyB;AACxC,MAAO;AACLZ,OAAQ,EADH;AAELQ,QAAS,IAFJ,CAAP;;AAID,CAnDwC;;AAqDzCK,UAAW,mBAASC,KAAT,CAAuB;AAChC,KAAKC,KAAL,CAAWR,QAAX,EAAuB,KAAKQ,KAAL,CAAWR,QAAX,CAAoBO,KAApB,CAAvB;AACA,KAAKC,KAAL,CAAWV,aAAX,EAA4B,KAAKU,KAAL,CAAWV,aAAX,CAAyBS,MAAME,WAAN,CAAkBC,KAA3C,CAA5B;AACD,CAxDwC;;AA0DzCC,OAAQ,iBAAW;AACjB;AACE,oBAAC,mBAAD;AACM,KAAKH,KADX;AAEE,IAAKpB,2BAFP;AAGE,MAAO,CAACwB,OAAOC,gBAAR,CAA0B,KAAKL,KAAL,CAAWM,KAArC,CAHT;AAIE,SAAU,KAAKR,SAJjB,mDADF;;;AAQD,CAnEwC,CAAjB,CAA1B;;;AAsEA,GAAIM,QAAS5B,WAAW+B,MAAX,CAAkB;AAC7BF,iBAAkB;AAChBG,OAAQ,EADQ,CADW,CAAlB,CAAb;;;;AAMA,GAAIC,qBAAsB9B;AACxB,qBADwB;AAExBE,mBAFwB,CAA1B;;;AAKA6B,OAAOC,OAAP,CAAiB9B,mBAAjB,C,0GA1GID,2B,+MAyBAC,mB,uMAsEAuB,M,0LAMAK,mB","file":"SegmentedControlIOS.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SegmentedControlIOS\n * @flow\n */\n'use strict';\n\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar createReactClass = require('create-react-class');\nvar requireNativeComponent = require('requireNativeComponent');\n\ntype DefaultProps = {\n  values: Array<string>,\n  enabled: boolean,\n};\n\nvar SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';\n\ntype Event = Object;\n\n/**\n * Use `SegmentedControlIOS` to render a UISegmentedControl iOS.\n *\n * #### Programmatically changing selected index\n *\n * The selected index can be changed on the fly by assigning the\n * selectIndex prop to a state variable, then changing that variable.\n * Note that the state variable would need to be updated as the user\n * selects a value and changes the index, as shown in the example below.\n *\n * ````\n * <SegmentedControlIOS\n *   values={['One', 'Two']}\n *   selectedIndex={this.state.selectedIndex}\n *   onChange={(event) => {\n *     this.setState({selectedIndex: event.nativeEvent.selectedSegmentIndex});\n *   }}\n * />\n * ````\n */\n// $FlowFixMe(>=0.41.0)\nvar SegmentedControlIOS = createReactClass({\n  displayName: 'SegmentedControlIOS',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * The labels for the control's segment buttons, in order.\n     */\n    values: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * The index in `props.values` of the segment to be (pre)selected.\n     */\n    selectedIndex: PropTypes.number,\n\n    /**\n     * Callback that is called when the user taps a segment;\n     * passes the segment's value as an argument\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Callback that is called when the user taps a segment;\n     * passes the event as an argument\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * If false the user won't be able to interact with the control.\n     * Default value is true.\n     */\n    enabled: PropTypes.bool,\n\n    /**\n     * Accent color of the control.\n     */\n    tintColor: PropTypes.string,\n\n    /**\n     * If true, then selecting a segment won't persist visually.\n     * The `onValueChange` callback will still work as expected.\n     */\n    momentary: PropTypes.bool\n  },\n\n  getDefaultProps: function(): DefaultProps {\n    return {\n      values: [],\n      enabled: true\n    };\n  },\n\n  _onChange: function(event: Event) {\n    this.props.onChange && this.props.onChange(event);\n    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);\n  },\n\n  render: function() {\n    return (\n      <RCTSegmentedControl\n        {...this.props}\n        ref={SEGMENTED_CONTROL_REFERENCE}\n        style={[styles.segmentedControl, this.props.style]}\n        onChange={this._onChange}\n      />\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  segmentedControl: {\n    height: 28,\n  },\n});\n\nvar RCTSegmentedControl = requireNativeComponent(\n  'RCTSegmentedControl',\n  SegmentedControlIOS\n);\n\nmodule.exports = SegmentedControlIOS;\n"]}