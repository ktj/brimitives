{"version":3,"sources":["node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js"],"names":["ColorPropType","require","React","ReactPropTypes","StyleSheet","StyleSheetPropType","ViewPropTypes","ViewStylePropTypes","processColor","requireNativeComponent","REF_PICKER","MODE_DROPDOWN","pickerStyleType","color","PickerAndroid","props","context","_stateFromProps","_onChange","state","initialSelectedIndex","selectedIndex","nextProps","setState","items","Children","map","children","child","index","value","selectedValue","childProps","label","Picker","mode","DropdownPicker","DialogPicker","nativeProps","enabled","onSelect","prompt","selected","testID","style","styles","pickerAndroid","accessibilityLabel","event","onValueChange","position","nativeEvent","toArray","_lastNativePosition","forceUpdate","refs","setNativeProps","Component","propTypes","any","bool","oneOf","func","string","create","height","cfg","nativeOnly","module","exports"],"mappings":"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","file":"PickerAndroid.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PickerAndroid\n * @flow\n */\n\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar React = require('React');\nvar ReactPropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar StyleSheetPropType = require('StyleSheetPropType');\nconst ViewPropTypes = require('ViewPropTypes');\nvar ViewStylePropTypes = require('ViewStylePropTypes');\n\nvar processColor = require('processColor');\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar REF_PICKER = 'picker';\nvar MODE_DROPDOWN = 'dropdown';\n\nvar pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\ntype Event = Object;\n\n/**\n * Not exposed as a public API - use <Picker> instead.\n */\nclass PickerAndroid extends React.Component {\n  props: {\n    style?: $FlowFixMe,\n    selectedValue?: any,\n    enabled?: boolean,\n    mode?: 'dialog' | 'dropdown',\n    onValueChange?: Function,\n    prompt?: string,\n    testID?: string,\n  };\n\n  state: *;\n\n  static propTypes = {\n    ...ViewPropTypes,\n    style: pickerStyleType,\n    selectedValue: ReactPropTypes.any,\n    enabled: ReactPropTypes.bool,\n    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),\n    onValueChange: ReactPropTypes.func,\n    prompt: ReactPropTypes.string,\n    testID: ReactPropTypes.string,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    var state = this._stateFromProps(props);\n\n    this.state = {\n      ...state,\n      initialSelectedIndex: state.selectedIndex,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState(this._stateFromProps(nextProps));\n  }\n\n  // Translate prop and children into stuff that the native picker understands.\n  _stateFromProps = (props) => {\n    var selectedIndex = 0;\n    const items = React.Children.map(props.children, (child, index) => {\n      if (child.props.value === props.selectedValue) {\n        selectedIndex = index;\n      }\n      const childProps = {\n        value: child.props.value,\n        label: child.props.label,\n      };\n      if (child.props.color) {\n        childProps.color = processColor(child.props.color);\n      }\n      return childProps;\n    });\n    return {selectedIndex, items};\n  };\n\n  render() {\n    var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;\n\n    var nativeProps = {\n      enabled: this.props.enabled,\n      items: this.state.items,\n      mode: this.props.mode,\n      onSelect: this._onChange,\n      prompt: this.props.prompt,\n      selected: this.state.initialSelectedIndex,\n      testID: this.props.testID,\n      style: [styles.pickerAndroid, this.props.style],\n      accessibilityLabel: this.props.accessibilityLabel,\n    };\n\n    return <Picker ref={REF_PICKER} {...nativeProps} />;\n  }\n\n  _onChange = (event: Event) => {\n    if (this.props.onValueChange) {\n      var position = event.nativeEvent.position;\n      if (position >= 0) {\n        var children = React.Children.toArray(this.props.children);\n        var value = children[position].props.value;\n        this.props.onValueChange(value, position);\n      } else {\n        this.props.onValueChange(null, position);\n      }\n    }\n    this._lastNativePosition = event.nativeEvent.position;\n    this.forceUpdate();\n  };\n\n  componentDidMount() {\n    this._lastNativePosition = this.state.initialSelectedIndex;\n  }\n\n  componentDidUpdate() {\n    // The picker is a controlled component. This means we expect the\n    // on*Change handlers to be in charge of updating our\n    // `selectedValue` prop. That way they can also\n    // disallow/undo/mutate the selection of certain values. In other\n    // words, the embedder of this component should be the source of\n    // truth, not the native component.\n    if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {\n      this.refs[REF_PICKER].setNativeProps({selected: this.state.selectedIndex});\n      this._lastNativePosition = this.state.selectedIndex;\n    }\n  }\n}\n\nvar styles = StyleSheet.create({\n  pickerAndroid: {\n    // The picker will conform to whatever width is given, but we do\n    // have to set the component's height explicitly on the\n    // surrounding view to ensure it gets rendered.\n    // TODO would be better to export a native constant for this,\n    // like in iOS the RCTDatePickerManager.m\n    height: 50,\n  },\n});\n\nvar cfg = {\n  nativeOnly: {\n    items: true,\n    selected: true,\n  }\n};\n\nvar DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);\nvar DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);\n\nmodule.exports = PickerAndroid;\n"]}