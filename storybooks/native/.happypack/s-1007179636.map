{"version":3,"sources":["node_modules/react-native/Libraries/Components/Picker/Picker.js"],"names":["ColorPropType","require","PickerIOS","PickerAndroid","Platform","React","PropTypes","StyleSheetPropType","TextStylePropTypes","UnimplementedView","ViewPropTypes","ViewStylePropTypes","itemStylePropType","pickerStyleType","color","MODE_DIALOG","MODE_DROPDOWN","PickerItem","Component","propTypes","label","string","isRequired","value","any","testID","Picker","OS","props","children","Item","defaultProps","mode","style","selectedValue","onValueChange","func","enabled","bool","oneOf","itemStyle","prompt","module","exports"],"mappings":";;;;;;;;;;;;AAYA,a;;AAEA,GAAIA,eAAgBC,QAAQ,eAAR,CAApB;AACA,GAAIC,WAAYD,QAAQ,WAAR,CAAhB;AACA,GAAIE,eAAgBF,QAAQ,eAAR,CAApB;AACA,GAAIG,UAAWH,QAAQ,UAAR,CAAf;AACA,GAAII,OAAQJ,QAAQ,OAAR,CAAZ;AACA,GAAMK,WAAYL,QAAQ,YAAR,CAAlB;AACA,GAAIM,oBAAqBN,QAAQ,oBAAR,CAAzB;AACA,GAAIO,oBAAqBP,QAAQ,oBAAR,CAAzB;AACA,GAAIQ,mBAAoBR,QAAQ,mBAAR,CAAxB;AACA,GAAMS,eAAgBT,QAAQ,eAAR,CAAtB;AACA,GAAIU,oBAAqBV,QAAQ,oBAAR,CAAzB;;AAEA,GAAIW,mBAAoBL,mBAAmBC,kBAAnB,CAAxB;;AAEA,GAAIK,iBAAkBN;AACjBI,kBADiB;AAEpBG,MAAOd,aAFa,GAAtB;;;AAKA,GAAIe,aAAc,QAAlB;AACA,GAAIC,eAAgB,UAApB,C;;;;;AAKMC,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BI;;AAEP,KAAM,KAAN;AACD,C,wBAhCuBZ,MAAMa,S,SAQvBC,S,CAAY,CAIjBC,MAAOd,UAAUe,MAAV,CAAiBC,UAJP,CASjBC,MAAOjB,UAAUkB,GATA,CAcjBV,MAAOd,aAdU,CAkBjByB,OAAQnB,UAAUe,MAlBD,C;;;;;;;;;;;;;AAqCdK,M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEI;AACL,GAAItB,SAASuB,EAAT,GAAgB,KAApB,CAA2B;;AAEzB,MAAO,qBAAC,SAAD,aAAe,KAAKC,KAApB,oDAA4B,KAAKA,KAAL,CAAWC,QAAvC,CAAP;AACD,CAHD,IAGO,IAAIzB,SAASuB,EAAT,GAAgB,SAApB,CAA+B;;AAEpC,MAAO,qBAAC,aAAD,aAAmB,KAAKC,KAAxB,oDAAgC,KAAKA,KAAL,CAAWC,QAA3C,CAAP;AACD,CAHM,IAGA;AACL,MAAO,qBAAC,iBAAD,mDAAP;AACD;AACJ,C,oBAnFmBxB,MAAMa,S,UAenBH,W,CAAcA,W,SAKdC,a,CAAgBA,a,SAEhBc,I,CAAOb,U,SAEPc,Y,CAAe,CACpBC,KAAMjB,WADc,C,SAKfI,S,aACFT,a,EACHuB,MAAOpB,e,CAIPqB,cAAe5B,UAAUkB,G,CAMzBW,cAAe7B,UAAU8B,I,CAMzBC,QAAS/B,UAAUgC,I,CASnBN,KAAM1B,UAAUiC,KAAV,CAAgB,CAAC,QAAD,CAAW,UAAX,CAAhB,C,CAKNC,UAAW5B,iB,CAKX6B,OAAQnC,UAAUe,M,CAIlBI,OAAQnB,UAAUe,M;;;AAgBrBqB,OAAOC,OAAP,CAAiBjB,MAAjB,C,2GAhJId,iB,uKAEAC,e,qKAKAE,W,iKACAC,a,mKAKEC,U,gKA6CAS,M","file":"Picker.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Picker\n * @flow\n */\n\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar PickerIOS = require('PickerIOS');\nvar PickerAndroid = require('PickerAndroid');\nvar Platform = require('Platform');\nvar React = require('React');\nconst PropTypes = require('prop-types');\nvar StyleSheetPropType = require('StyleSheetPropType');\nvar TextStylePropTypes = require('TextStylePropTypes');\nvar UnimplementedView = require('UnimplementedView');\nconst ViewPropTypes = require('ViewPropTypes');\nvar ViewStylePropTypes = require('ViewStylePropTypes');\n\nvar itemStylePropType = StyleSheetPropType(TextStylePropTypes);\n\nvar pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\nvar MODE_DIALOG = 'dialog';\nvar MODE_DROPDOWN = 'dropdown';\n\n/**\n * Individual selectable item in a Picker.\n */\nclass PickerItem extends React.Component {\n props: {\n  label: string,\n  value?: any,\n  color?: ColorPropType,\n  testID?: string,\n };\n\n static propTypes = {\n   /**\n    * Text to display for this item.\n    */\n   label: PropTypes.string.isRequired,\n   /**\n    * The value to be passed to picker's `onValueChange` callback when\n    * this item is selected. Can be a string or an integer.\n    */\n   value: PropTypes.any,\n   /**\n    * Color of this item's text.\n    * @platform android\n    */\n   color: ColorPropType,\n   /**\n    * Used to locate the item in end-to-end tests.\n    */\n   testID: PropTypes.string,\n };\n\n render() {\n   // The items are not rendered directly\n   throw null;\n }\n}\n\n/**\n * Renders the native picker component on iOS and Android. Example:\n *\n *     <Picker\n *       selectedValue={this.state.language}\n *       onValueChange={(itemValue, itemIndex) => this.setState({language: itemValue})}>\n *       <Picker.Item label=\"Java\" value=\"java\" />\n *       <Picker.Item label=\"JavaScript\" value=\"js\" />\n *     </Picker>\n */\nclass Picker extends React.Component {\n props: {\n  style?: $FlowFixMe,\n  selectedValue?: any,\n  onValueChange?: Function,\n  enabled?: boolean,\n  mode?: 'dialog' | 'dropdown',\n  itemStyle?: $FlowFixMe,\n  prompt?: string,\n  testID?: string,\n };\n\n /**\n  * On Android, display the options in a dialog.\n  */\n static MODE_DIALOG = MODE_DIALOG;\n\n /**\n  * On Android, display the options in a dropdown (this is the default).\n  */\n static MODE_DROPDOWN = MODE_DROPDOWN;\n\n static Item = PickerItem;\n\n static defaultProps = {\n   mode: MODE_DIALOG,\n };\n\n // $FlowFixMe(>=0.41.0)\n static propTypes = {\n   ...ViewPropTypes,\n   style: pickerStyleType,\n   /**\n    * Value matching value of one of the items. Can be a string or an integer.\n    */\n   selectedValue: PropTypes.any,\n   /**\n    * Callback for when an item is selected. This is called with the following parameters:\n    *   - `itemValue`: the `value` prop of the item that was selected\n    *   - `itemPosition`: the index of the selected item in this picker\n    */\n   onValueChange: PropTypes.func,\n   /**\n    * If set to false, the picker will be disabled, i.e. the user will not be able to make a\n    * selection.\n    * @platform android\n    */\n   enabled: PropTypes.bool,\n   /**\n    * On Android, specifies how to display the selection items when the user taps on the picker:\n    *\n    *   - 'dialog': Show a modal dialog. This is the default.\n    *   - 'dropdown': Shows a dropdown anchored to the picker view\n    *\n    * @platform android\n    */\n   mode: PropTypes.oneOf(['dialog', 'dropdown']),\n   /**\n    * Style to apply to each of the item labels.\n    * @platform ios\n    */\n   itemStyle: itemStylePropType,\n   /**\n    * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n    * @platform android\n    */\n   prompt: PropTypes.string,\n   /**\n    * Used to locate this view in end-to-end tests.\n    */\n   testID: PropTypes.string,\n };\n\n render() {\n     if (Platform.OS === 'ios') {\n       // $FlowFixMe found when converting React.createClass to ES6\n       return <PickerIOS {...this.props}>{this.props.children}</PickerIOS>;\n     } else if (Platform.OS === 'android') {\n       // $FlowFixMe found when converting React.createClass to ES6\n       return <PickerAndroid {...this.props}>{this.props.children}</PickerAndroid>;\n     } else {\n       return <UnimplementedView />;\n     }\n }\n}\n\nmodule.exports = Picker;\n"]}