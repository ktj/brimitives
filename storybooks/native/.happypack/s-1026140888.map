{"version":3,"sources":["node_modules/react-native/Libraries/ReactNative/UIManager.js"],"names":["NativeModules","require","Platform","defineLazyObjectProperty","invariant","UIManager","__takeSnapshot","takeSnapshot","OS","Object","keys","forEach","viewConfig","viewName","Manager","get","viewManager","constants","value","key","commands","index","AndroidLazyViewManagersEnabled","ViewManagerNames","viewManagerName","replace","module","exports"],"mappings":";;;;;;;;;;;AAWA;;AAEA,GAAMA,eAAgBC,QAAQ,eAAR,CAAtB;AACA,GAAMC,UAAWD,QAAQ,UAAR,CAAjB;;AAEA,GAAME,0BAA2BF,QAAQ,0BAAR,CAAjC;AACA,GAAMG,WAAYH,QAAQ,oBAAR,CAAlB,C;;AAEQI,S,CAAcL,a,CAAdK,S;;AAERD,UAAUC,SAAV,CAAqB,yEAArB;;;;;;;AAOAA,UAAUC,cAAV,CAA2BD,UAAUE,YAArC;AACAF,UAAUE,YAAV,CAAyB,UAAW;AAClCH;AACE,KADF;AAEE;AACA,uCAHF;;AAKD,CAND;;;;;;;AAaA,GAAIF,SAASM,EAAT,GAAgB,KAApB,CAA2B;AACzBC,OAAOC,IAAP,CAAYL,SAAZ,EAAuBM,OAAvB,CAA+B,kBAAY;AACzC,GAAMC,YAAaP,UAAUQ,QAAV,CAAnB;AACA,GAAID,WAAWE,OAAf,CAAwB;AACtBX,yBAAyBS,UAAzB,CAAqC,WAArC,CAAkD;AAChDG,IAAK,cAAM;AACT,GAAMC,aAAchB,cAAcY,WAAWE,OAAzB,CAApB;AACA,GAAMG,WAAY,EAAlB;AACAD,aAAeP,OAAOC,IAAP,CAAYM,WAAZ,EAAyBL,OAAzB,CAAiC,aAAO;AACrD,GAAMO,OAAQF,YAAYG,GAAZ,CAAd;AACA,GAAI,MAAOD,MAAP,GAAiB,UAArB,CAAiC;AAC/BD,UAAUE,GAAV,EAAiBD,KAAjB;AACD;AACF,CALc,CAAf;AAMA,MAAOD,UAAP;AACD,CAX+C,CAAlD;;AAaAd,yBAAyBS,UAAzB,CAAqC,UAArC,CAAiD;AAC/CG,IAAK,cAAM;AACT,GAAMC,aAAchB,cAAcY,WAAWE,OAAzB,CAApB;AACA,GAAMM,UAAW,EAAjB;AACA,GAAIC,OAAQ,CAAZ;AACAL,aAAeP,OAAOC,IAAP,CAAYM,WAAZ,EAAyBL,OAAzB,CAAiC,aAAO;AACrD,GAAMO,OAAQF,YAAYG,GAAZ,CAAd;AACA,GAAI,MAAOD,MAAP,GAAiB,UAArB,CAAiC;AAC/BE,SAASD,GAAT,EAAgBE,OAAhB;AACD;AACF,CALc,CAAf;AAMA,MAAOD,SAAP;AACD,CAZ8C,CAAjD;;AAcD;AACF,CA/BD;AAgCD,CAjCD,IAiCO,IAAIlB,SAASM,EAAT,GAAgB,SAAhB,EAA6BH,UAAUiB,8BAA3C,CAA2E;AAChFjB,UAAUkB,gBAAV,CAA2BZ,OAA3B,CAAmC,yBAAmB;AACpDR,yBAAyBE,SAAzB,CAAoCmB,eAApC,CAAqD;AACnDT,IAAK,qBAAMf,eAAcwB,gBAAgBC,OAAhB,CAAwB,WAAxB,CAAqC,EAArC,CAAd,CAAN,EAD8C,CAArD;;AAGD,CAJD;AAKD;;AAEDC,OAAOC,OAAP,CAAiBtB,SAAjB,C,0GAhEQA,S","file":"UIManager.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule UIManager\n * @flow\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nconst defineLazyObjectProperty = require('defineLazyObjectProperty');\nconst invariant = require('fbjs/lib/invariant');\n\nconst { UIManager } = NativeModules;\n\ninvariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');\n\n// In past versions of ReactNative users called UIManager.takeSnapshot()\n// However takeSnapshot was moved to ReactNative in order to support flat\n// bundles and to avoid a cyclic dependency between UIManager and ReactNative.\n// UIManager.takeSnapshot still exists though. In order to avoid confusion or\n// accidental usage, mask the method with a deprecation warning.\nUIManager.__takeSnapshot = UIManager.takeSnapshot;\nUIManager.takeSnapshot = function() {\n  invariant(\n    false,\n    'UIManager.takeSnapshot should not be called directly. ' +\n    'Use ReactNative.takeSnapshot instead.'\n  );\n};\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(UIManager).forEach(viewName => {\n    const viewConfig = UIManager[viewName];\n    if (viewConfig.Manager) {\n      defineLazyObjectProperty(viewConfig, 'Constants', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const constants = {};\n          viewManager && Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n          return constants;\n        },\n      });\n      defineLazyObjectProperty(viewConfig, 'Commands', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const commands = {};\n          let index = 0;\n          viewManager && Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n          return commands;\n        },\n      });\n    }\n  });\n} else if (Platform.OS === 'android' && UIManager.AndroidLazyViewManagersEnabled) {\n  UIManager.ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(UIManager, viewManagerName, {\n      get: () => NativeModules[viewManagerName.replace(/^(RCT|RK)/, '')],\n    });\n  });\n}\n\nmodule.exports = UIManager;\n"]}