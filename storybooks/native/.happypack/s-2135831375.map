{"version":3,"sources":["node_modules/react-native/Libraries/Modal/Modal.js"],"names":["AppContainer","require","I18nManager","Platform","React","PropTypes","StyleSheet","View","deprecatedPropType","requireNativeComponent","RCTModalHostView","Modal","props","_confirmProps","nextProps","visible","containerStyles","backgroundColor","transparent","animationType","animated","presentationStyle","innerChildren","__DEV__","context","rootTag","children","hardwareAccelerated","onRequestClose","onShow","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","container","console","warn","Component","propTypes","oneOf","bool","OS","func","isRequired","arrayOf","defaultProps","contextTypes","number","side","isRTL","create","position","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,cAAeC,QAAQ,cAAR,CAArB;AACA,GAAMC,aAAcD,QAAQ,aAAR,CAApB;AACA,GAAME,UAAWF,QAAQ,UAAR,CAAjB;AACA,GAAMG,OAAQH,QAAQ,OAAR,CAAd;AACA,GAAMI,WAAYJ,QAAQ,YAAR,CAAlB;AACA,GAAMK,YAAaL,QAAQ,YAAR,CAAnB;AACA,GAAMM,MAAON,QAAQ,MAAR,CAAb;;AAEA,GAAMO,oBAAqBP,QAAQ,oBAAR,CAA3B;AACA,GAAMQ,wBAAyBR,QAAQ,wBAAR,CAA/B;AACA,GAAMS,kBAAmBD,uBAAuB,kBAAvB,CAA2C,IAA3C,CAAzB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DME,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EJ,eAAYC,KAAZ,CAA2B;AACnBA,KADmB;AAEzBD,MAAME,aAAN,CAAoBD,KAApB,EAFyB;AAG1B,C;;AAEyBE,S,CAAmB;AAC3CH,MAAME,aAAN,CAAoBC,SAApB;AACD,C;;;;;;;;AAQ6B;AAC5B,GAAI,KAAKF,KAAL,CAAWG,OAAX,GAAuB,KAA3B,CAAkC;AAChC,MAAO,KAAP;AACD;;AAED,GAAMC,iBAAkB;AACtBC,gBAAiB,KAAKL,KAAL,CAAWM,WAAX,CAAyB,aAAzB,CAAyC,OADpC,CAAxB;;;AAIA,GAAIC,eAAgB,KAAKP,KAAL,CAAWO,aAA/B;AACA,GAAI,CAACA,aAAL,CAAoB;;AAElBA,cAAgB,MAAhB;AACA,GAAI,KAAKP,KAAL,CAAWQ,QAAf,CAAyB;AACvBD,cAAgB,OAAhB;AACD;AACF;;AAED,GAAIE,mBAAoB,KAAKT,KAAL,CAAWS,iBAAnC;AACA,GAAI,CAACA,iBAAL,CAAwB;AACtBA,kBAAoB,YAApB;AACA,GAAI,KAAKT,KAAL,CAAWM,WAAf,CAA4B;AAC1BG,kBAAoB,gBAApB;AACD;AACF;;AAED,GAAMC,eAAgBC;AAClB,oBAAC,YAAD,EAAc,QAAS,KAAKC,OAAL,CAAaC,OAApC;AACG,KAAKb,KAAL,CAAWc,QADd,CADkB;;AAIpB,KAAKd,KAAL,CAAWc,QAJb;;AAMA;AACE,oBAAC,gBAAD;AACE,cAAeP,aADjB;AAEE,kBAAmBE,iBAFrB;AAGE,YAAa,KAAKT,KAAL,CAAWM,WAH1B;AAIE,oBAAqB,KAAKN,KAAL,CAAWe,mBAJlC;AAKE,eAAgB,KAAKf,KAAL,CAAWgB,cAL7B;AAME,OAAQ,KAAKhB,KAAL,CAAWiB,MANrB;AAOE,MAAOC,OAAOC,KAPhB;AAQE,0BAA2B,KAAKC,mBARlC;AASE,sBAAuB,KAAKpB,KAAL,CAAWqB,qBATpC;AAUE,oBAAqB,KAAKrB,KAAL,CAAWsB,mBAVlC;;AAYE,oBAAC,IAAD,EAAM,MAAO,CAACJ,OAAOK,SAAR,CAAmBnB,eAAnB,CAAb;AACGM,aADH,CAZF,CADF;;;;AAkBD,C;;;AAG8B;AAC7B,MAAO,KAAP;AACD,C,sDA7DoBV,K,CAAe,CAClC,GAAIA,MAAMS,iBAAN,EAA2BT,MAAMS,iBAAN,GAA4B,gBAAvD,EAA2ET,MAAMM,WAArF,CAAkG,CAChGkB,QAAQC,IAAR,iBAA4BzB,MAAMS,iBAAlC,sEACD,CACF,C,mBAxFiBjB,MAAMkC,S,SACjBC,S,CAAY,CAUjBpB,cAAed,UAAUmC,KAAV,CAAgB,CAAC,MAAD,CAAS,OAAT,CAAkB,MAAlB,CAAhB,CAVE,CAuBjBnB,kBAAmBhB,UAAUmC,KAAV,CAAgB,CAAC,YAAD,CAAe,WAAf,CAA4B,WAA5B,CAAyC,gBAAzC,CAAhB,CAvBF,CA2BjBtB,YAAab,UAAUoC,IA3BN,CAgCjBd,oBAAqBtB,UAAUoC,IAhCd,CAoCjB1B,QAASV,UAAUoC,IApCF,CAyCjBb,eAAgBzB,SAASuC,EAAT,GAAgB,SAAhB,CAA4BrC,UAAUsC,IAAV,CAAeC,UAA3C,CAAwDvC,UAAUsC,IAzCjE,CA6CjBd,OAAQxB,UAAUsC,IA7CD,CA8CjBvB,SAAUZ,mBACRH,UAAUoC,IADF,CAER,uCAFQ,CA9CO,CAwDjBR,sBAAuB5B,UAAUwC,OAAV,CAAkBxC,UAAUmC,KAAV,CAAgB,CAAC,UAAD,CAAa,sBAAb,CAAqC,WAArC,CAAkD,gBAAlD,CAAoE,iBAApE,CAAhB,CAAlB,CAxDN,CA8DjBN,oBAAqB7B,UAAUsC,IA9Dd,C,QAiEZG,Y,CAAe,CACpB/B,QAAS,IADW,CAEpBY,oBAAqB,KAFD,C,QAKfoB,Y,CAAe,CACpBtB,QAASpB,UAAU2C,MADC,C;;;AA6ExB,GAAMC,MAAO/C,YAAYgD,KAAZ,CAAoB,OAApB,CAA8B,MAA3C;AACA,GAAMpB,QAASxB,WAAW6C,MAAX,CAAkB;AAC/BpB,MAAO;AACLqB,SAAU,UADL,CADwB;;AAI/BjB;AACEiB,SAAU,UADZ;AAEGH,IAFH,CAEW,CAFX;AAGO,CAHP,aAJ+B,CAAlB,CAAf;;;;AAWAI,OAAOC,OAAP,CAAiB3C,KAAjB,C,2GA1NMD,gB,yJA0DAC,K,8IAoJAsC,I,6IACAnB,M","file":"Modal.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Modal\n * @flow\n */\n'use strict';\n\nconst AppContainer = require('AppContainer');\nconst I18nManager = require('I18nManager');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\n\nconst deprecatedPropType = require('deprecatedPropType');\nconst requireNativeComponent = require('requireNativeComponent');\nconst RCTModalHostView = requireNativeComponent('RCTModalHostView', null);\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * _Note: If you need more control over how to present modals over the rest of your app,\n * then consider using a top-level Navigator._\n *\n * ```javascript\n * import React, { Component } from 'react';\n * import { Modal, Text, TouchableHighlight, View } from 'react-native';\n *\n * class ModalExample extends Component {\n *\n *   state = {\n *     modalVisible: false,\n *   }\n *\n *   setModalVisible(visible) {\n *     this.setState({modalVisible: visible});\n *   }\n *\n *   render() {\n *     return (\n *       <View style={{marginTop: 22}}>\n *         <Modal\n *           animationType=\"slide\"\n *           transparent={false}\n *           visible={this.state.modalVisible}\n *           onRequestClose={() => {alert(\"Modal has been closed.\")}}\n *           >\n *          <View style={{marginTop: 22}}>\n *           <View>\n *             <Text>Hello World!</Text>\n *\n *             <TouchableHighlight onPress={() => {\n *               this.setModalVisible(!this.state.modalVisible)\n *             }}>\n *               <Text>Hide Modal</Text>\n *             </TouchableHighlight>\n *\n *           </View>\n *          </View>\n *         </Modal>\n *\n *         <TouchableHighlight onPress={() => {\n *           this.setModalVisible(true)\n *         }}>\n *           <Text>Show Modal</Text>\n *         </TouchableHighlight>\n *\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\n\nclass Modal extends React.Component {\n  static propTypes = {\n    /**\n     * The `animationType` prop controls how the modal animates.\n     *\n     * - `slide` slides in from the bottom\n     * - `fade` fades into view\n     * - `none` appears without an animation\n     *\n     * Default is set to `none`.\n     */\n    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),\n    /**\n     * The `presentationStyle` prop controls how the modal appears (generally on larger devices such as iPad or plus-sized iPhones).\n     * See https://developer.apple.com/reference/uikit/uimodalpresentationstyle for details.\n     * @platform ios\n     *\n     * - `fullScreen` covers the screen completely\n     * - `pageSheet` covers portrait-width view centered (only on larger devices)\n     * - `formSheet` covers narrow-width view centered (only on larger devices)\n     * - `overFullScreen` covers the screen completely, but allows transparency\n     *\n     * Default is set to `overFullScreen` or `fullScreen` depending on `transparent` property.\n     */\n    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),\n    /**\n     * The `transparent` prop determines whether your modal will fill the entire view. Setting this to `true` will render the modal over a transparent background.\n     */\n    transparent: PropTypes.bool,\n    /**\n     * The `hardwareAccelerated` prop controls whether to force hardware acceleration for the underlying window.\n     * @platform android\n     */\n    hardwareAccelerated: PropTypes.bool,\n    /**\n     * The `visible` prop determines whether your modal is visible.\n     */\n    visible: PropTypes.bool,\n    /**\n     * The `onRequestClose` callback is called when the user taps the hardware back button.\n     * @platform android\n     */\n    onRequestClose: Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,\n    /**\n     * The `onShow` prop allows passing a function that will be called once the modal has been shown.\n     */\n    onShow: PropTypes.func,\n    animated: deprecatedPropType(\n      PropTypes.bool,\n      'Use the `animationType` prop instead.'\n    ),\n    /**\n     * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n     * On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.\n     * When using `presentationStyle` of `pageSheet` or `formSheet`, this property will be ignored by iOS.\n     * @platform ios\n     */\n    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),\n    /**\n     * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n     * The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.\n     * @platform ios\n     */\n    onOrientationChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextTypes = {\n    rootTag: PropTypes.number,\n  };\n\n  constructor(props: Object) {\n    super(props);\n    Modal._confirmProps(props);\n  }\n\n  componentWillReceiveProps(nextProps: Object) {\n    Modal._confirmProps(nextProps);\n  }\n\n  static _confirmProps(props: Object) {\n    if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {\n      console.warn(`Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`);\n    }\n  }\n\n  render(): ?React.Element<any> {\n    if (this.props.visible === false) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor: this.props.transparent ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType;\n    if (!animationType) {\n      // manually setting default prop here to keep support for the deprecated 'animated' prop\n      animationType = 'none';\n      if (this.props.animated) {\n        animationType = 'slide';\n      }\n    }\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ?\n      ( <AppContainer rootTag={this.context.rootTag}>\n          {this.props.children}\n        </AppContainer>) :\n      this.props.children;\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        style={styles.modal}\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}\n        >\n        <View style={[styles.container, containerStyles]}>\n          {innerChildren}\n        </View>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    position: 'absolute',\n    [side] : 0,\n    top: 0,\n  }\n});\n\nmodule.exports = Modal;\n"]}