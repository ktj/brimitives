{"version":3,"sources":["node_modules/react-native/Libraries/Lists/ViewabilityHelper.js"],"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_lastUpdateTime","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","updateTime","Date","now","updateElapsed","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"mappings":"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","file":"ViewabilityHelper.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewabilityHelper\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n* A Utility class for calculating viewable items based on current metrics like scroll position and\n* layout.\n*\n* An item is said to be in a \"viewable\" state when any of the following\n* is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n* is true):\n*\n* - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n*   visible in the view area >= `itemVisiblePercentThreshold`.\n* - Entirely visible on screen\n*/\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  _lastUpdateTime: number = 0;\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        itemVisiblePercentThreshold !=\n          null !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    invariant(\n      last < itemCount,\n      'Invalid render range ' + JSON.stringify({renderRange, itemCount}),\n    );\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    const updateTime = Date.now();\n    if (this._lastUpdateTime === 0 && itemCount > 0 && getFrameMetrics(0)) {\n      // Only count updates after the first item is rendered and has a frame.\n      this._lastUpdateTime = updateTime;\n    }\n    const updateElapsed = this._lastUpdateTime\n      ? updateTime - this._lastUpdateTime\n      : 0;\n    if (this._config.waitForInteraction && !this._hasInteracted) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    this._lastUpdateTime = updateTime;\n    if (\n      this._config.minimumViewTime &&\n      updateElapsed < this._config.minimumViewTime\n    ) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"]}