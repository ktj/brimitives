{"version":3,"sources":["node_modules/react-native/Libraries/Inspector/NetworkOverlay.js"],"names":["ListView","require","React","ScrollView","StyleSheet","Text","TouchableHighlight","View","WebSocketInterceptor","XHRInterceptor","LISTVIEW_CELL_HEIGHT","SEPARATOR_THICKNESS","nextXHRId","NetworkOverlay","props","_requests","_detailViewItems","_listViewDataSource","DataSource","rowHasChanged","r1","r2","state","dataSource","cloneWithRows","newDetailInfo","detailRowID","_listViewHighlighted","_listViewHeight","_captureRequestListView","bind","_captureDetailScrollView","_listViewOnLayout","_renderRow","_closeButtonClicked","_socketIdMap","_xhrIdMap","isInterceptorEnabled","setOpenCallback","method","url","xhr","_index","xhrIndex","length","_xhr","push","_genDetailViewItem","setState","_scrollToBottom","setRequestHeaderCallback","header","value","_getRequestIndexByXHRID","networkInfo","requestHeaders","setSendCallback","data","dataSent","setHeaderReceivedCallback","type","size","responseHeaders","responseContentType","responseSize","setResponseCallback","status","timeout","response","responseURL","responseType","enableInterception","setConnectCallback","protocols","options","socketId","socketIndex","_webSocket","setCloseCallback","statusCode","closeReason","undefined","messages","JSON","stringify","setOnMessageCallback","message","setOnCloseCallback","serverClose","setOnErrorCallback","serverError","_enableXHRInterception","_enableWebSocketInterception","disableInterception","rowData","sectionID","rowID","highlightRow","urlCellViewStyle","styles","urlEvenCellView","methodCellViewStyle","methodEvenCellView","urlOddCellView","methodOddCellView","_pressRow","tableRow","cellText","_getTypeShortName","adjacentRowHighlighted","height","backgroundColor","_listView","scrollResponder","getScrollResponder","scrollY","Math","max","scrollResponderScrollTo","x","y","animated","listRef","event","nativeEvent","layout","_scrollToTop","_scrollView","scrollTo","scrollRef","String","substr","concat","index","detailViewItem","requestItem","key","detailViewRow","detailViewText","detailKeyCellView","detailValueCellView","_getStringByValue","Number","container","closeButton","clostButtonText","detailScrollView","listViewTitle","urlTitleCellView","methodTitleCellView","listView","_renderSeperator","Component","create","paddingTop","paddingBottom","paddingLeft","paddingRight","flex","flexDirection","color","fontSize","borderColor","borderTopWidth","borderBottomWidth","borderRightWidth","alignItems","justifyContent","borderLeftWidth","marginTop","marginBottom","paddingHorizontal","module","exports"],"mappings":"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","file":"NetworkOverlay.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NetworkOverlay\n * @flow\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst React = require('React');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableHighlight = require('TouchableHighlight');\nconst View = require('View');\nconst WebSocketInterceptor = require('WebSocketInterceptor');\nconst XHRInterceptor = require('XHRInterceptor');\n\nconst LISTVIEW_CELL_HEIGHT = 15;\nconst SEPARATOR_THICKNESS = 2;\n\n// Global id for the intercepted XMLHttpRequest objects.\nlet nextXHRId = 0;\n\ntype NetworkRequestInfo = {\n  type?: string,\n  url?: string,\n  method?: string,\n  status?: number,\n  dataSent?: any,\n  responseContentType?: string,\n  responseSize?: number,\n  requestHeaders?: Object,\n  responseHeaders?: string,\n  response?: Object | string,\n  responseURL?: string,\n  responseType?: string,\n  timeout?: number,\n  closeReason?: string,\n  messages?: string,\n  serverClose?: Object,\n  serverError?: Object,\n};\n\n/**\n * Show all the intercepted network requests over the InspectorPanel.\n */\nclass NetworkOverlay extends React.Component {\n  _requests: Array<NetworkRequestInfo>;\n  _listViewDataSource: ListView.DataSource;\n  _listView: ?ListView;\n  _listViewHighlighted: bool;\n  _listViewHeight: number;\n  _scrollView: ?ScrollView;\n  _detailViewItems: Array<Array<React.Element<any>>>;\n  _listViewOnLayout: (event: Event) => void;\n  _captureRequestListView: (listRef: ?ListView) => void;\n  _captureDetailScrollView: (scrollRef: ?ScrollView) => void;\n  _renderRow: (\n    rowData: NetworkRequestInfo,\n    sectionID: number,\n    rowID: number,\n    highlightRow: (sectionID: number, rowID: number) => void,\n  ) => React.Element<any>;\n  _closeButtonClicked: () => void;\n  // Map of `socketId` -> `index in `_requests``.\n  _socketIdMap: Object;\n  // Map of `xhr._index` -> `index in `_requests``.\n  _xhrIdMap: {[key: number]: number};\n\n  state: {\n    dataSource: ListView.DataSource,\n    newDetailInfo: bool,\n    detailRowID: ?number,\n  };\n\n  constructor(props: Object) {\n    super(props);\n    this._requests = [];\n    this._detailViewItems = [];\n    this._listViewDataSource =\n      new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n    this.state = {\n      dataSource: this._listViewDataSource.cloneWithRows([]),\n      newDetailInfo: false,\n      detailRowID: null,\n    };\n    this._listViewHighlighted = false;\n    this._listViewHeight = 0;\n    this._captureRequestListView = this._captureRequestListView.bind(this);\n    this._captureDetailScrollView = this._captureDetailScrollView.bind(this);\n    this._listViewOnLayout = this._listViewOnLayout.bind(this);\n    this._renderRow = this._renderRow.bind(this);\n    this._closeButtonClicked = this._closeButtonClicked.bind(this);\n    this._socketIdMap = {};\n    this._xhrIdMap = {};\n  }\n\n  _enableXHRInterception(): void {\n    if (XHRInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    // Show the XHR request item in listView as soon as it was opened.\n    XHRInterceptor.setOpenCallback((method, url, xhr) => {\n      // Generate a global id for each intercepted xhr object, add this id\n      // to the xhr object as a private `_index` property to identify it,\n      // so that we can distinguish different xhr objects in callbacks.\n      xhr._index = nextXHRId++;\n      const xhrIndex = this._requests.length;\n      this._xhrIdMap[xhr._index] = xhrIndex;\n\n      const _xhr: NetworkRequestInfo = {\n        'type': 'XMLHttpRequest',\n        'method': method,\n        'url': url\n      };\n      this._requests.push(_xhr);\n      this._detailViewItems.push([]);\n      this._genDetailViewItem(xhrIndex);\n      this.setState(\n        {dataSource: this._listViewDataSource.cloneWithRows(this._requests)},\n        this._scrollToBottom(),\n      );\n    });\n\n    XHRInterceptor.setRequestHeaderCallback((header, value, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      const networkInfo = this._requests[xhrIndex];\n      if (!networkInfo.requestHeaders) {\n        networkInfo.requestHeaders = {};\n      }\n      networkInfo.requestHeaders[header] = value;\n      this._genDetailViewItem(xhrIndex);\n    });\n\n    XHRInterceptor.setSendCallback((data, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      this._requests[xhrIndex].dataSent = data;\n      this._genDetailViewItem(xhrIndex);\n    });\n\n    XHRInterceptor.setHeaderReceivedCallback(\n      (type, size, responseHeaders, xhr) => {\n        const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n        if (xhrIndex === -1) {\n          return;\n        }\n        const networkInfo = this._requests[xhrIndex];\n        networkInfo.responseContentType = type;\n        networkInfo.responseSize = size;\n        networkInfo.responseHeaders = responseHeaders;\n        this._genDetailViewItem(xhrIndex);\n      }\n    );\n\n    XHRInterceptor.setResponseCallback((\n        status,\n        timeout,\n        response,\n        responseURL,\n        responseType,\n        xhr,\n      ) => {\n        const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n        if (xhrIndex === -1) {\n          return;\n        }\n        const networkInfo = this._requests[xhrIndex];\n        networkInfo.status = status;\n        networkInfo.timeout = timeout;\n        networkInfo.response = response;\n        networkInfo.responseURL = responseURL;\n        networkInfo.responseType = responseType;\n        this._genDetailViewItem(xhrIndex);\n      }\n    );\n\n    // Fire above callbacks.\n    XHRInterceptor.enableInterception();\n  }\n\n  _enableWebSocketInterception(): void {\n    if (WebSocketInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    // Show the WebSocket request item in listView when 'connect' is called.\n    WebSocketInterceptor.setConnectCallback(\n      (url, protocols, options, socketId) => {\n        const socketIndex = this._requests.length;\n        this._socketIdMap[socketId] = socketIndex;\n        const _webSocket: NetworkRequestInfo = {\n          'type': 'WebSocket',\n          'url': url,\n          'protocols': protocols,\n        };\n        this._requests.push(_webSocket);\n        this._detailViewItems.push([]);\n        this._genDetailViewItem(socketIndex);\n        this.setState(\n          {dataSource: this._listViewDataSource.cloneWithRows(this._requests)},\n          this._scrollToBottom(),\n        );\n      }\n    );\n\n    WebSocketInterceptor.setCloseCallback(\n      (statusCode, closeReason, socketId) => {\n        const socketIndex = this._socketIdMap[socketId];\n        if (socketIndex === undefined) {\n          return;\n        }\n        if (statusCode !== null && closeReason !== null) {\n          this._requests[socketIndex].status = statusCode;\n          this._requests[socketIndex].closeReason = closeReason;\n        }\n        this._genDetailViewItem(socketIndex);\n      }\n    );\n\n    WebSocketInterceptor.setSendCallback((data, socketId) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      if (!this._requests[socketIndex].messages) {\n        this._requests[socketIndex].messages = '';\n      }\n      this._requests[socketIndex].messages +=\n        'Sent: ' + JSON.stringify(data) + '\\n';\n      this._genDetailViewItem(socketIndex);\n    });\n\n    WebSocketInterceptor.setOnMessageCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      if (!this._requests[socketIndex].messages) {\n        this._requests[socketIndex].messages = '';\n      }\n      this._requests[socketIndex].messages +=\n        'Received: ' + JSON.stringify(message) + '\\n';\n      this._genDetailViewItem(socketIndex);\n    });\n\n    WebSocketInterceptor.setOnCloseCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this._requests[socketIndex].serverClose = message;\n      this._genDetailViewItem(socketIndex);\n    });\n\n    WebSocketInterceptor.setOnErrorCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this._requests[socketIndex].serverError = message;\n      this._genDetailViewItem(socketIndex);\n    });\n\n    // Fire above callbacks.\n    WebSocketInterceptor.enableInterception();\n  }\n\n  componentDidMount() {\n    this._enableXHRInterception();\n    this._enableWebSocketInterception();\n  }\n\n  componentWillUnmount() {\n    XHRInterceptor.disableInterception();\n    WebSocketInterceptor.disableInterception();\n  }\n\n  _renderRow(\n    rowData: NetworkRequestInfo,\n    sectionID: number,\n    rowID: number,\n    highlightRow: (sectionID: number, rowID: number) => void,\n  ): React.Element<any> {\n    let urlCellViewStyle = styles.urlEvenCellView;\n    let methodCellViewStyle = styles.methodEvenCellView;\n    if (rowID % 2 === 1) {\n      urlCellViewStyle = styles.urlOddCellView;\n      methodCellViewStyle = styles.methodOddCellView;\n    }\n    return (\n      <TouchableHighlight onPress={() => {\n          this._pressRow(rowID);\n          highlightRow(sectionID, rowID);\n        }}>\n        <View>\n          <View style={styles.tableRow}>\n            <View style={urlCellViewStyle}>\n              <Text style={styles.cellText} numberOfLines={1}>\n                {rowData.url}\n              </Text>\n            </View>\n            <View style={methodCellViewStyle}>\n              <Text style={styles.cellText} numberOfLines={1}>\n                {this._getTypeShortName(rowData.type)}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </TouchableHighlight>\n    );\n  }\n\n  _renderSeperator(\n    sectionID: number,\n    rowID: number,\n    adjacentRowHighlighted: bool): React.Element<any> {\n    return (\n      <View\n        key={`${sectionID}-${rowID}`}\n        style={{\n          height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,\n          backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC',\n        }}\n      />\n    );\n  }\n\n  _scrollToBottom(): void {\n    if (this._listView) {\n      const scrollResponder = this._listView.getScrollResponder();\n      if (scrollResponder) {\n        const scrollY = Math.max(\n          this._requests.length * LISTVIEW_CELL_HEIGHT +\n          (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) -\n          this._listViewHeight,\n          0,\n        );\n        scrollResponder.scrollResponderScrollTo({\n          x: 0,\n          y: scrollY,\n          animated: true\n        });\n      }\n    }\n  }\n\n  _captureRequestListView(listRef: ?ListView): void {\n    this._listView = listRef;\n  }\n\n  _listViewOnLayout(event: any): void {\n    const {height} = event.nativeEvent.layout;\n    this._listViewHeight = height;\n  }\n\n  /**\n   * Popup a scrollView to dynamically show detailed information of\n   * the request, when pressing a row in the network flow listView.\n   */\n  _pressRow(rowID: number): void {\n    this._listViewHighlighted = true;\n    this.setState(\n      {detailRowID: rowID},\n      this._scrollToTop(),\n    );\n  }\n\n  _scrollToTop(): void {\n    if (this._scrollView) {\n      this._scrollView.scrollTo({\n        y: 0,\n        animated: false,\n      });\n    }\n  }\n\n  _captureDetailScrollView(scrollRef: ?ScrollView): void {\n    this._scrollView = scrollRef;\n  }\n\n  _closeButtonClicked() {\n    this.setState({detailRowID: null});\n  }\n\n  _getStringByValue(value: any): string {\n    if (value === undefined) {\n      return 'undefined';\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    if (typeof value === 'string' && value.length > 500) {\n      return String(value).substr(0, 500).concat(\n        '\\n***TRUNCATED TO 500 CHARACTERS***');\n    }\n    return value;\n  }\n\n  _getRequestIndexByXHRID(index: number): number {\n    if (index === undefined) {\n      return -1;\n    }\n    const xhrIndex = this._xhrIdMap[index];\n    if (xhrIndex === undefined) {\n      return -1;\n    } else {\n      return xhrIndex;\n    }\n  }\n\n  _getTypeShortName(type: any): string {\n    if (type === 'XMLHttpRequest') {\n      return 'XHR';\n    } else if (type === 'WebSocket') {\n      return 'WS';\n    }\n\n    return '';\n  }\n\n  /**\n   * Generate a list of views containing network request information for\n   * a XHR object, to be shown in the detail scrollview. This function\n   * should be called every time there is a new update of the XHR object,\n   * in order to show network request/response information in real time.\n   */\n  _genDetailViewItem(index: number): void {\n    this._detailViewItems[index] = [];\n    const detailViewItem = this._detailViewItems[index];\n    const requestItem = this._requests[index];\n    for (let key in requestItem) {\n      detailViewItem.push(\n        <View style={styles.detailViewRow} key={key}>\n          <Text style={[styles.detailViewText, styles.detailKeyCellView]}>\n            {key}\n          </Text>\n          <Text style={[styles.detailViewText, styles.detailValueCellView]}>\n            {this._getStringByValue(requestItem[key])}\n          </Text>\n        </View>\n      );\n    }\n    // Re-render if this network request is showing in the detail view.\n    if (this.state.detailRowID != null &&\n        Number(this.state.detailRowID) === index) {\n      this.setState({newDetailInfo: true});\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {this.state.detailRowID != null &&\n        <TouchableHighlight\n          style={styles.closeButton}\n          onPress={this._closeButtonClicked}>\n          <View>\n            <Text style={styles.clostButtonText}>v</Text>\n          </View>\n        </TouchableHighlight>}\n        {this.state.detailRowID != null &&\n        <ScrollView\n          style={styles.detailScrollView}\n          ref={this._captureDetailScrollView}>\n          {this._detailViewItems[this.state.detailRowID]}\n        </ScrollView>}\n        <View style={styles.listViewTitle}>\n          {this._requests.length > 0 &&\n          <View style={styles.tableRow}>\n            <View style={styles.urlTitleCellView}>\n              <Text style={styles.cellText} numberOfLines={1}>URL</Text>\n            </View>\n            <View style={styles.methodTitleCellView}>\n              <Text style={styles.cellText} numberOfLines={1}>Type</Text>\n            </View>\n          </View>}\n        </View>\n        <ListView\n          style={styles.listView}\n          ref={this._captureRequestListView}\n          dataSource={this.state.dataSource}\n          renderRow={this._renderRow}\n          enableEmptySections={true}\n          renderSeparator={this._renderSeperator}\n          onLayout={this._listViewOnLayout}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 5,\n    paddingRight: 5,\n  },\n  listViewTitle: {\n    height: 20,\n  },\n  listView: {\n    flex: 1,\n    height: 60,\n  },\n  tableRow: {\n    flexDirection: 'row',\n    flex: 1,\n  },\n  cellText: {\n    color: 'white',\n    fontSize: 12,\n  },\n  methodTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 1,\n  },\n  urlTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  methodOddCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#000',\n    flex: 1,\n  },\n  urlOddCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#000',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  methodEvenCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#888',\n    flex: 1,\n  },\n  urlEvenCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#888',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  detailScrollView: {\n    flex: 1,\n    height: 180,\n    marginTop: 5,\n    marginBottom: 5,\n  },\n  detailKeyCellView: {\n    flex: 1.3,\n  },\n  detailValueCellView: {\n    flex: 2,\n  },\n  detailViewRow: {\n    flexDirection: 'row',\n    paddingHorizontal: 3,\n  },\n  detailViewText: {\n    color: 'white',\n    fontSize: 11,\n  },\n  clostButtonText: {\n    color: 'white',\n    fontSize: 10,\n  },\n  closeButton: {\n    marginTop: 5,\n    backgroundColor: '#888',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nmodule.exports = NetworkOverlay;\n"]}