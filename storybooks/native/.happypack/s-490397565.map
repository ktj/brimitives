{"version":3,"sources":["node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"names":["React","require","PropTypes","ColorPropType","Platform","processColor","StatusBarManager","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","_updatePropsStack","_propsStack","push","index","indexOf","splice","clearImmediate","_updateImmediate","setImmediate","oldProps","_currentValues","mergedProps","_defaultProps","OS","setStyle","setHidden","setNetworkActivityIndicatorVisible","setColor","setTranslucent","animation","style","visible","console","warn","color","Component","currentHeight","HEIGHT","propTypes","bool","oneOf","defaultProps","module","exports"],"mappings":"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","file":"StatusBar.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule StatusBar\n * @flow\n */\n'use strict';\n\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\n\nconst processColor = require('processColor');\n\nconst StatusBarManager = require('NativeModules').StatusBarManager;\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Enum<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  'default': string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Enum<{\n  /**\n   * No animation\n   */\n  'none': string,\n  /**\n   * Fade animation\n   */\n  'fade': string,\n  /**\n   * Slide animation\n   */\n  'slide': string,\n}>;\n\ntype DefaultProps = {\n  animated: boolean,\n};\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there is also an imperative\n * API exposed as static functions on the component. It is however not recommended\n * to use the static API and the component for the same prop because any value\n * set by the static API will get overriden by the one set by the component in\n * the next render.\n *\n * ###Â Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component {\n  props: {\n    hidden?: boolean,\n    animated?: boolean,\n    backgroundColor?: string,\n    translucent?: boolean,\n    barStyle?: 'default' | 'light-content' | 'dark-content',\n    networkActivityIndicatorVisible?: boolean,\n    showHideTransition?: 'fade' | 'slide',\n  };\n\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight = StatusBarManager.HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS'\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    StatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n    StatusBarManager.setColor(processColor(color), animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    StatusBarManager.setTranslucent(translucent);\n  }\n\n  static propTypes = {\n    /**\n     * If the status bar is hidden.\n     */\n    hidden: PropTypes.bool,\n    /**\n     * If the transition between status bar property changes should be animated.\n     * Supported for backgroundColor, barStyle and hidden.\n     */\n    animated: PropTypes.bool,\n    /**\n     * The background color of the status bar.\n     * @platform android\n     */\n    backgroundColor: ColorPropType,\n    /**\n     * If the status bar is translucent.\n     * When translucent is set to true, the app will draw under the status bar.\n     * This is useful when using a semi transparent status bar color.\n     *\n     * @platform android\n     */\n    translucent: PropTypes.bool,\n    /**\n     * Sets the color of the status bar text.\n     */\n    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),\n    /**\n     * If the network activity indicator should be visible.\n     *\n     * @platform ios\n     */\n    networkActivityIndicatorVisible: PropTypes.bool,\n    /**\n     * The transition effect when showing and hiding the status bar using the `hidden`\n     * prop. Defaults to 'fade'.\n     *\n     * @platform ios\n     */\n    showHideTransition: PropTypes.oneOf(['fade', 'slide']),\n  };\n\n  static defaultProps = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierachy will have priority.\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack.push(this._stackEntry);\n    this._updatePropsStack();\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    // $FlowFixMe found when converting React.createClass to ES6\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    StatusBar._propsStack.splice(index, 1);\n\n    this._updatePropsStack();\n  }\n\n  componentDidUpdate() {\n    // $FlowFixMe found when converting React.createClass to ES6\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack[index] = this._stackEntry;\n\n    this._updatePropsStack();\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none'\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          StatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          StatusBarManager.setColor(\n            processColor(mergedProps.backgroundColor.value),\n            mergedProps.backgroundColor.animated\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          StatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): ?React.Element<any> {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"]}