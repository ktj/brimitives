{"version":3,"sources":["node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js"],"names":["ColorPropType","require","NativeMethodsMixin","Platform","React","PropTypes","ReactNative","StatusBar","StyleSheet","UIManager","View","ViewPropTypes","DrawerConsts","AndroidDrawerLayout","Constants","createReactClass","dismissKeyboard","requireNativeComponent","RK_DRAWER_REF","INNERVIEW_REF","DRAWER_STATES","DrawerLayoutAndroid","displayName","statics","positions","DrawerPosition","propTypes","keyboardDismissMode","oneOf","drawerBackgroundColor","drawerPosition","Left","Right","drawerWidth","number","drawerLockMode","onDrawerSlide","func","onDrawerStateChanged","onDrawerOpen","onDrawerClose","renderNavigationView","isRequired","statusBarBackgroundColor","mixins","getDefaultProps","getInitialState","undefined","getInnerViewNode","refs","componentDidMount","_updateStatusBarBackground","componentDidReceiveProps","render","drawStatusBar","Version","props","drawerViewWrapper","styles","drawerSubview","width","backgroundColor","drawerStatusBar","childrenWrapper","mainSubview","state","statusBar","children","base","style","_onDrawerSlide","_onDrawerOpen","_onDrawerClose","_onDrawerStateChanged","event","nativeEvent","drawerState","openDrawer","dispatchViewManagerCommand","_getDrawerLayoutHandle","Commands","closeDrawer","findNodeHandle","requestAnimationFrame","setState","create","flex","elevation","position","top","left","right","bottom","height","currentHeight","module","exports"],"mappings":"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","file":"DrawerLayoutAndroid.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DrawerLayoutAndroid\n */\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar Platform = require('Platform');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar StatusBar = require('StatusBar');\nvar StyleSheet = require('StyleSheet');\nvar UIManager = require('UIManager');\nvar View = require('View');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar DrawerConsts = UIManager.AndroidDrawerLayout.Constants;\n\nvar createReactClass = require('create-react-class');\nvar dismissKeyboard = require('dismissKeyboard');\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar RK_DRAWER_REF = 'drawerlayout';\nvar INNERVIEW_REF = 'innerView';\n\nvar DRAWER_STATES = [\n  'Idle',\n  'Dragging',\n  'Settling',\n];\n\n/**\n * React component that wraps the platform `DrawerLayout` (Android only). The\n * Drawer (typically used for navigation) is rendered with `renderNavigationView`\n * and direct children are the main view (where your content goes). The navigation\n * view is initially not visible on the screen, but can be pulled in from the\n * side of the window specified by the `drawerPosition` prop and its width can\n * be set by the `drawerWidth` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var navigationView = (\n *     <View style={{flex: 1, backgroundColor: '#fff'}}>\n *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>\n *     </View>\n *   );\n *   return (\n *     <DrawerLayoutAndroid\n *       drawerWidth={300}\n *       drawerPosition={DrawerLayoutAndroid.positions.Left}\n *       renderNavigationView={() => navigationView}>\n *       <View style={{flex: 1, alignItems: 'center'}}>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>\n *       </View>\n *     </DrawerLayoutAndroid>\n *   );\n * },\n * ```\n */\nvar DrawerLayoutAndroid = createReactClass({\n  displayName: 'DrawerLayoutAndroid',\n  statics: {\n    positions: DrawerConsts.DrawerPosition,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag',\n    ]),\n    /**\n     * Specifies the background color of the drawer. The default value is white.\n     * If you want to set the opacity of the drawer, use rgba. Example:\n     *\n     * ```\n     * return (\n     *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n     *   </DrawerLayoutAndroid>\n     * );\n     * ```\n     */\n    drawerBackgroundColor: ColorPropType,\n    /**\n     * Specifies the side of the screen from which the drawer will slide in.\n     */\n    drawerPosition: PropTypes.oneOf([\n      DrawerConsts.DrawerPosition.Left,\n      DrawerConsts.DrawerPosition.Right\n    ]),\n    /**\n     * Specifies the width of the drawer, more precisely the width of the view that be pulled in\n     * from the edge of the window.\n     */\n    drawerWidth: PropTypes.number,\n    /**\n     * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n     * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n     * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n     * - locked-open, meaning that the drawer will stay opened and not respond to gestures.\n     * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).\n     */\n    drawerLockMode: PropTypes.oneOf([\n      'unlocked',\n      'locked-closed',\n      'locked-open'\n    ]),\n    /**\n     * Function called whenever there is an interaction with the navigation view.\n     */\n    onDrawerSlide: PropTypes.func,\n    /**\n     * Function called when the drawer state has changed. The drawer can be in 3 states:\n     * - idle, meaning there is no interaction with the navigation view happening at the time\n     * - dragging, meaning there is currently an interaction with the navigation view\n     * - settling, meaning that there was an interaction with the navigation view, and the\n     * navigation view is now finishing its closing or opening animation\n     */\n    onDrawerStateChanged: PropTypes.func,\n    /**\n     * Function called whenever the navigation view has been opened.\n     */\n    onDrawerOpen: PropTypes.func,\n    /**\n     * Function called whenever the navigation view has been closed.\n     */\n    onDrawerClose: PropTypes.func,\n    /**\n     * The navigation view that will be rendered to the side of the screen and can be pulled in.\n     */\n    renderNavigationView: PropTypes.func.isRequired,\n\n    /**\n     * Make the drawer take the entire screen and draw the background of the\n     * status bar to allow it to open over the status bar. It will only have an\n     * effect on API 21+.\n     */\n    statusBarBackgroundColor: ColorPropType,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  getDefaultProps: function(): Object {\n    return {\n      drawerBackgroundColor: 'white',\n    };\n  },\n\n  getInitialState: function() {\n    return {statusBarBackgroundColor: undefined};\n  },\n\n  getInnerViewNode: function() {\n    return this.refs[INNERVIEW_REF].getInnerViewNode();\n  },\n\n  componentDidMount: function() {\n    this._updateStatusBarBackground();\n  },\n\n  componentDidReceiveProps: function() {\n    this._updateStatusBarBackground();\n  },\n\n  render: function() {\n    var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;\n    var drawerViewWrapper =\n      <View\n        style={[\n          styles.drawerSubview,\n          {width: this.props.drawerWidth, backgroundColor: this.props.drawerBackgroundColor}\n        ]}\n        collapsable={false}>\n        {this.props.renderNavigationView()}\n        {drawStatusBar && <View style={styles.drawerStatusBar} />}\n      </View>;\n    var childrenWrapper =\n      <View ref={INNERVIEW_REF} style={styles.mainSubview} collapsable={false}>\n        {drawStatusBar &&\n        <StatusBar\n          translucent\n          backgroundColor={this.state.statusBarBackgroundColor}\n        />}\n        {drawStatusBar &&\n        <View style={[\n          styles.statusBar,\n          {backgroundColor: this.props.statusBarBackgroundColor}\n        ]} />}\n        {this.props.children}\n      </View>;\n    return (\n      <AndroidDrawerLayout\n        {...this.props}\n        ref={RK_DRAWER_REF}\n        drawerWidth={this.props.drawerWidth}\n        drawerPosition={this.props.drawerPosition}\n        drawerLockMode={this.props.drawerLockMode}\n        style={[styles.base, this.props.style]}\n        onDrawerSlide={this._onDrawerSlide}\n        onDrawerOpen={this._onDrawerOpen}\n        onDrawerClose={this._onDrawerClose}\n        onDrawerStateChanged={this._onDrawerStateChanged}>\n        {childrenWrapper}\n        {drawerViewWrapper}\n      </AndroidDrawerLayout>\n    );\n  },\n\n  _onDrawerSlide: function(event) {\n    if (this.props.onDrawerSlide) {\n      this.props.onDrawerSlide(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  },\n\n  _onDrawerOpen: function() {\n    if (this.props.onDrawerOpen) {\n      this.props.onDrawerOpen();\n    }\n  },\n\n  _onDrawerClose: function() {\n    if (this.props.onDrawerClose) {\n      this.props.onDrawerClose();\n    }\n  },\n\n  _onDrawerStateChanged: function(event) {\n    if (this.props.onDrawerStateChanged) {\n      this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);\n    }\n  },\n\n  /**\n   * Opens the drawer.\n   */\n  openDrawer: function() {\n    UIManager.dispatchViewManagerCommand(\n      this._getDrawerLayoutHandle(),\n      UIManager.AndroidDrawerLayout.Commands.openDrawer,\n      null\n    );\n  },\n\n  /**\n   * Closes the drawer.\n   */\n  closeDrawer: function() {\n    UIManager.dispatchViewManagerCommand(\n      this._getDrawerLayoutHandle(),\n      UIManager.AndroidDrawerLayout.Commands.closeDrawer,\n      null\n    );\n  },\n  /**\n  * Closing and opening example\n  * Note: To access the drawer you have to give it a ref. Refs do not work on stateless components\n  * render () {\n  *   this.openDrawer = () => {\n  *     this.refs.DRAWER.openDrawer()\n  *   }\n  *   this.closeDrawer = () => {\n  *     this.refs.DRAWER.closeDrawer()\n  *   }\n  *   return (\n  *     <DrawerLayoutAndroid ref={'DRAWER'}>\n  *     </DrawerLayoutAndroid>\n  *   )\n  * }\n  */\n  _getDrawerLayoutHandle: function() {\n    return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);\n  },\n\n  // Update the StatusBar component background color one frame after creating the\n  // status bar background View to avoid a white flicker that happens because\n  // the StatusBar background becomes transparent before the status bar View\n  // from this component has rendered.\n  _updateStatusBarBackground: function() {\n    if (Platform.Version >= 21 && this.props.statusBarBackgroundColor) {\n      // Check if the value is not already transparent to avoid an extra render.\n      if (this.state.statusBarBackgroundColor !== 'transparent') {\n        requestAnimationFrame(() => {\n          this.setState({statusBarBackgroundColor: 'transparent'});\n        });\n      }\n    } else {\n      this.setState({statusBarBackgroundColor: undefined});\n    }\n  },\n});\n\nvar styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n  },\n  statusBar: {\n    height: StatusBar.currentHeight,\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)',\n  },\n});\n\n// The View that contains both the actual drawer and the main view\nvar AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);\n\nmodule.exports = DrawerLayoutAndroid;\n"]}