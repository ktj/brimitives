{"version":3,"sources":["node_modules/react-native/Libraries/Lists/ListView/ListView.js"],"names":["ListViewDataSource","require","Platform","React","PropTypes","ReactNative","RCTScrollViewManager","ScrollViewManager","ScrollView","ScrollResponder","StaticRenderer","TimerMixin","View","cloneReferencedElement","createReactClass","isEmpty","merge","DEFAULT_PAGE_SIZE","DEFAULT_INITIAL_ROWS","DEFAULT_SCROLL_RENDER_AHEAD","DEFAULT_END_REACHED_THRESHOLD","DEFAULT_SCROLL_CALLBACK_THROTTLE","ListView","displayName","_childFrames","_sentEndForContentLength","_scrollComponent","_prevRenderedRowsCount","_visibleRows","scrollProperties","mixins","Mixin","statics","DataSource","propTypes","dataSource","instanceOf","isRequired","renderSeparator","func","renderRow","initialListSize","number","onEndReached","onEndReachedThreshold","pageSize","renderFooter","renderHeader","renderSectionHeader","renderScrollComponent","scrollRenderAheadDistance","onChangeVisibleRows","removeClippedSubviews","bool","stickySectionHeadersEnabled","stickyHeaderIndices","arrayOf","enableEmptySections","getMetrics","contentLength","totalRows","props","getRowAndSectionCount","getRowCount","renderedRows","state","curRenderedRowsCount","visibleRows","Object","keys","length","getScrollResponder","getScrollableNode","findNodeHandle","scrollTo","scrollToEnd","options","console","warn","flashScrollIndicators","setNativeProps","getDefaultProps","OS","getInitialState","highlightedRow","getInnerViewNode","componentWillMount","visibleLength","offset","componentDidMount","requestAnimationFrame","_measureAndUpdateScrollProps","componentWillReceiveProps","nextProps","setState","Math","min","max","_renderMoreRowsIfNeeded","componentDidUpdate","_onRowHighlighted","sectionID","rowID","render","bodyComponents","allRowIDs","rowIdentities","rowCount","stickySectionHeaderIndices","header","footer","totalIndex","sectionIdx","sectionIdentities","rowIDs","undefined","warning","invariant","element","getSectionHeaderData","push","cloneElement","key","rowIdx","comboID","shouldUpdateRow","rowShouldUpdate","row","bind","getRowData","adjacentRowHighlighted","separator","scrollEventThrottle","onScroll","_onScroll","concat","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ref","_setScrollComponentRef","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","DEPRECATED_sendUpdatedChildFrames","scrollComponent","calculateChildFrames","_updateVisibleRows","width","height","horizontal","event","nativeEvent","layout","_maybeCallOnEndReached","_getDistanceFromEnd","distanceFromEnd","_pageInNewRows","rowsToRender","updatedFrames","forEach","newFrame","index","isVertical","visibleMin","visibleMax","visibilityChanged","changedRows","visibleSection","frame","rowVisible","y","x","e","layoutMeasurement","contentSize","contentOffset","updatedChildFrames","module","exports"],"mappings":"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","file":"ListView.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ListView\n * @flow\n * @format\n */\n'use strict';\n\nvar ListViewDataSource = require('ListViewDataSource');\nvar Platform = require('Platform');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar RCTScrollViewManager = require('NativeModules').ScrollViewManager;\nvar ScrollView = require('ScrollView');\nvar ScrollResponder = require('ScrollResponder');\nvar StaticRenderer = require('StaticRenderer');\nvar TimerMixin = require('react-timer-mixin');\nvar View = require('View');\n\nvar cloneReferencedElement = require('react-clone-referenced-element');\nvar createReactClass = require('create-react-class');\nvar isEmpty = require('isEmpty');\nvar merge = require('merge');\n\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\n\n/**\n * DEPRECATED - use one of the new list components, such as [`FlatList`](docs/flatlist.html)\n * or [`SectionList`](docs/sectionlist.html) for bounded memory use, fewer bugs,\n * better performance, an easier to use API, and more features. Check out this\n * [blog post](https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html)\n * for more details.\n *\n * ListView - A core component designed for efficient display of vertically\n * scrolling lists of changing data. The minimal API is to create a\n * [`ListView.DataSource`](docs/listviewdatasource.html), populate it with a simple\n * array of data blobs, and instantiate a `ListView` component with that data\n * source and a `renderRow` callback which takes a blob from the data array and\n * returns a renderable component.\n *\n * Minimal example:\n *\n * ```\n * class MyComponent extends Component {\n *   constructor() {\n *     super();\n *     const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n *     this.state = {\n *       dataSource: ds.cloneWithRows(['row 1', 'row 2']),\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         dataSource={this.state.dataSource}\n *         renderRow={(rowData) => <Text>{rowData}</Text>}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * ListView also supports more advanced features, including sections with sticky\n * section headers, header and footer support, callbacks on reaching the end of\n * the available data (`onEndReached`) and on the set of rows that are visible\n * in the device viewport change (`onChangeVisibleRows`), and several\n * performance optimizations.\n *\n * There are a few performance operations designed to make ListView scroll\n * smoothly while dynamically loading potentially very large (or conceptually\n * infinite) data sets:\n *\n *  * Only re-render changed rows - the rowHasChanged function provided to the\n *    data source tells the ListView if it needs to re-render a row because the\n *    source data has changed - see ListViewDataSource for more details.\n *\n *  * Rate-limited row rendering - By default, only one row is rendered per\n *    event-loop (customizable with the `pageSize` prop). This breaks up the\n *    work into smaller chunks to reduce the chance of dropping frames while\n *    rendering rows.\n */\n\nvar ListView = createReactClass({\n  displayName: 'ListView',\n  _childFrames: ([]: Array<Object>),\n  _sentEndForContentLength: (null: ?number),\n  _scrollComponent: (null: any),\n  _prevRenderedRowsCount: 0,\n  _visibleRows: ({}: Object),\n  scrollProperties: ({}: Object),\n\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n\n  statics: {\n    DataSource: ListViewDataSource,\n  },\n\n  /**\n   * You must provide a renderRow function. If you omit any of the other render\n   * functions, ListView will simply skip rendering them.\n   *\n   * - renderRow(rowData, sectionID, rowID, highlightRow);\n   * - renderSectionHeader(sectionData, sectionID);\n   */\n  propTypes: {\n    ...ScrollView.propTypes,\n    /**\n     * An instance of [ListView.DataSource](docs/listviewdatasource.html) to use\n     */\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\n    /**\n     * (sectionID, rowID, adjacentRowHighlighted) => renderable\n     *\n     * If provided, a renderable component to be rendered as the separator\n     * below each row but not the last row if there is a section header below.\n     * Take a sectionID and rowID of the row above and whether its adjacent row\n     * is highlighted.\n     */\n    renderSeparator: PropTypes.func,\n    /**\n     * (rowData, sectionID, rowID, highlightRow) => renderable\n     *\n     * Takes a data entry from the data source and its ids and should return\n     * a renderable component to be rendered as the row. By default the data\n     * is exactly what was put into the data source, but it's also possible to\n     * provide custom extractors. ListView can be notified when a row is\n     * being highlighted by calling `highlightRow(sectionID, rowID)`. This\n     * sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you\n     * to control the separators above and below the highlighted row. The highlighted\n     * state of a row can be reset by calling highlightRow(null).\n     */\n    renderRow: PropTypes.func.isRequired,\n    /**\n     * How many rows to render on initial component mount. Use this to make\n     * it so that the first screen worth of data appears at one time instead of\n     * over the course of multiple frames.\n     */\n    initialListSize: PropTypes.number.isRequired,\n    /**\n     * Called when all rows have been rendered and the list has been scrolled\n     * to within onEndReachedThreshold of the bottom. The native scroll\n     * event is provided.\n     */\n    onEndReached: PropTypes.func,\n    /**\n     * Threshold in pixels (virtual, not physical) for calling onEndReached.\n     */\n    onEndReachedThreshold: PropTypes.number.isRequired,\n    /**\n     * Number of rows to render per event loop. Note: if your 'rows' are actually\n     * cells, i.e. they don't span the full width of your view (as in the\n     * ListViewGridLayoutExample), you should set the pageSize to be a multiple\n     * of the number of cells per row, otherwise you're likely to see gaps at\n     * the edge of the ListView as new pages are loaded.\n     */\n    pageSize: PropTypes.number.isRequired,\n    /**\n     * () => renderable\n     *\n     * The header and footer are always rendered (if these props are provided)\n     * on every render pass. If they are expensive to re-render, wrap them\n     * in StaticContainer or other mechanism as appropriate. Footer is always\n     * at the bottom of the list, and header at the top, on every render pass.\n     * In a horizontal ListView, the header is rendered on the left and the\n     * footer on the right.\n     */\n    renderFooter: PropTypes.func,\n    renderHeader: PropTypes.func,\n    /**\n     * (sectionData, sectionID) => renderable\n     *\n     * If provided, a header is rendered for this section.\n     */\n    renderSectionHeader: PropTypes.func,\n    /**\n     * (props) => renderable\n     *\n     * A function that returns the scrollable component in which the list rows\n     * are rendered. Defaults to returning a ScrollView with the given props.\n     */\n    renderScrollComponent: PropTypes.func.isRequired,\n    /**\n     * How early to start rendering rows before they come on screen, in\n     * pixels.\n     */\n    scrollRenderAheadDistance: PropTypes.number.isRequired,\n    /**\n     * (visibleRows, changedRows) => void\n     *\n     * Called when the set of visible rows changes. `visibleRows` maps\n     * { sectionID: { rowID: true }} for all the visible rows, and\n     * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\n     * that have changed their visibility, with true indicating visible, and\n     * false indicating the view has moved out of view.\n     */\n    onChangeVisibleRows: PropTypes.func,\n    /**\n     * A performance optimization for improving scroll perf of\n     * large lists, used in conjunction with overflow: 'hidden' on the row\n     * containers. This is enabled by default.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * Makes the sections headers sticky. The sticky behavior means that it\n     * will scroll with the content at the top of the section until it reaches\n     * the top of the screen, at which point it will stick to the top until it\n     * is pushed off the screen by the next section header. This property is\n     * not supported in conjunction with `horizontal={true}`. Only enabled by\n     * default on iOS because of typical platform standards.\n     */\n    stickySectionHeadersEnabled: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /**\n     * Flag indicating whether empty section headers should be rendered. In the future release\n     * empty section headers will be rendered by default, and the flag will be deprecated.\n     * If empty sections are not desired to be rendered their indices should be excluded from sectionID object.\n     */\n    enableEmptySections: PropTypes.bool,\n  },\n\n  /**\n   * Exports some data, e.g. for perf investigations or analytics.\n   */\n  getMetrics: function() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections\n        ? this.props.dataSource.getRowAndSectionCount()\n        : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length,\n    };\n  },\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollComponent` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder: function() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n\n  getScrollableNode: function() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollComponent);\n    }\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * See `ScrollView#scrollTo`.\n   */\n  scrollTo: function(...args: Array<mixed>) {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      this._scrollComponent.scrollTo(...args);\n    }\n  },\n\n  /**\n   * If this is a vertical ListView scrolls to the bottom.\n   * If this is a horizontal ListView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   *\n   * See `ScrollView#scrollToEnd`.\n   */\n  scrollToEnd: function(options?: ?{animated?: ?boolean}) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn(\n          'The scroll component used by the ListView does not support ' +\n            'scrollToEnd. Check the renderScrollComponent prop of your ListView.',\n        );\n      }\n    }\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n\n  /**\n   * React life cycle hooks.\n   */\n\n  getDefaultProps: function() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: props => <ScrollView {...props} />,\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios',\n      stickyHeaderIndices: [],\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: ({}: Object),\n    };\n  },\n\n  getInnerViewNode: function() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n\n  componentWillMount: function() {\n    // this data should never trigger a render pass, so don't put in state\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0,\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n\n  componentDidMount: function() {\n    // do this in animation frame until componentDidMount actually runs after\n    // the component is laid out\n    this.requestAnimationFrame(() => {\n      this._measureAndUpdateScrollProps();\n    });\n  },\n\n  componentWillReceiveProps: function(nextProps: Object) {\n    if (\n      this.props.dataSource !== nextProps.dataSource ||\n      this.props.initialListSize !== nextProps.initialListSize\n    ) {\n      this.setState(\n        (state, props) => {\n          this._prevRenderedRowsCount = 0;\n          return {\n            curRenderedRowsCount: Math.min(\n              Math.max(state.curRenderedRowsCount, props.initialListSize),\n              props.enableEmptySections\n                ? props.dataSource.getRowAndSectionCount()\n                : props.dataSource.getRowCount(),\n            ),\n          };\n        },\n        () => this._renderMoreRowsIfNeeded(),\n      );\n    }\n  },\n\n  componentDidUpdate: function() {\n    this.requestAnimationFrame(() => {\n      this._measureAndUpdateScrollProps();\n    });\n  },\n\n  _onRowHighlighted: function(sectionID: string, rowID: string) {\n    this.setState({highlightedRow: {sectionID, rowID}});\n  },\n\n  render: function() {\n    var bodyComponents = [];\n\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n\n    const {renderSectionHeader} = this.props;\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          var warning = require('fbjs/lib/warning');\n          warning(\n            false,\n            'In next release empty section headers will be rendered.' +\n              \" In this release you can use 'enableEmptySections' flag to render empty section headers.\",\n          );\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n          invariant(\n            this.props.enableEmptySections,\n            \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" +\n              ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' +\n              \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\",\n          );\n        }\n      }\n\n      if (renderSectionHeader) {\n        const element = renderSectionHeader(\n          dataSource.getSectionHeaderData(sectionIdx),\n          sectionID,\n        );\n        if (element) {\n          bodyComponents.push(\n            React.cloneElement(element, {key: 's_' + sectionID}),\n          );\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n          totalIndex++;\n        }\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow =\n          rowCount >= this._prevRenderedRowsCount &&\n          dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row = (\n          <StaticRenderer\n            key={'r_' + comboID}\n            shouldUpdate={!!shouldUpdateRow}\n            render={this.props.renderRow.bind(\n              null,\n              dataSource.getRowData(sectionIdx, rowIdx),\n              sectionID,\n              rowID,\n              this._onRowHighlighted,\n            )}\n          />\n        );\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (\n          this.props.renderSeparator &&\n          (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)\n        ) {\n          var adjacentRowHighlighted =\n            this.state.highlightedRow.sectionID === sectionID &&\n            (this.state.highlightedRow.rowID === rowID ||\n              this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          var separator = this.props.renderSeparator(\n            sectionID,\n            rowID,\n            adjacentRowHighlighted,\n          );\n          if (separator) {\n            bodyComponents.push(\n              <View key={'s_' + comboID}>\n                {separator}\n              </View>,\n            );\n            totalIndex++;\n          }\n        }\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    var {renderScrollComponent, ...props} = this.props;\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n    Object.assign(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(\n        stickySectionHeaderIndices,\n      ),\n\n      // Do not pass these events downstream to ScrollView since they will be\n      // registered in ListView's own ScrollResponder.Mixin\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined,\n    });\n\n    return cloneReferencedElement(\n      renderScrollComponent(props),\n      {\n        ref: this._setScrollComponentRef,\n        onContentSizeChange: this._onContentSizeChange,\n        onLayout: this._onLayout,\n        DEPRECATED_sendUpdatedChildFrames:\n          typeof props.onChangeVisibleRows !== undefined,\n      },\n      header,\n      bodyComponents,\n      footer,\n    );\n  },\n\n  /**\n   * Private methods\n   */\n\n  _measureAndUpdateScrollProps: function() {\n    var scrollComponent = this.getScrollResponder();\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    // RCTScrollViewManager.calculateChildFrames is not available on\n    // every platform\n    RCTScrollViewManager &&\n      RCTScrollViewManager.calculateChildFrames &&\n      RCTScrollViewManager.calculateChildFrames(\n        ReactNative.findNodeHandle(scrollComponent),\n        this._updateVisibleRows,\n      );\n  },\n\n  _setScrollComponentRef: function(scrollComponent: Object) {\n    this._scrollComponent = scrollComponent;\n  },\n\n  _onContentSizeChange: function(width: number, height: number) {\n    var contentLength = !this.props.horizontal ? height : width;\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  },\n\n  _onLayout: function(event: Object) {\n    var {width, height} = event.nativeEvent.layout;\n    var visibleLength = !this.props.horizontal ? height : width;\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _maybeCallOnEndReached: function(event?: Object) {\n    if (\n      this.props.onEndReached &&\n      this.scrollProperties.contentLength !== this._sentEndForContentLength &&\n      this._getDistanceFromEnd(this.scrollProperties) <\n        this.props.onEndReachedThreshold &&\n      this.state.curRenderedRowsCount ===\n        (this.props.enableEmptySections\n          ? this.props.dataSource.getRowAndSectionCount()\n          : this.props.dataSource.getRowCount())\n    ) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n    return false;\n  },\n\n  _renderMoreRowsIfNeeded: function() {\n    if (\n      this.scrollProperties.contentLength === null ||\n      this.scrollProperties.visibleLength === null ||\n      this.state.curRenderedRowsCount ===\n        (this.props.enableEmptySections\n          ? this.props.dataSource.getRowAndSectionCount()\n          : this.props.dataSource.getRowCount())\n    ) {\n      this._maybeCallOnEndReached();\n      return;\n    }\n\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n\n  _pageInNewRows: function() {\n    this.setState(\n      (state, props) => {\n        var rowsToRender = Math.min(\n          state.curRenderedRowsCount + props.pageSize,\n          props.enableEmptySections\n            ? props.dataSource.getRowAndSectionCount()\n            : props.dataSource.getRowCount(),\n        );\n        this._prevRenderedRowsCount = state.curRenderedRowsCount;\n        return {\n          curRenderedRowsCount: rowsToRender,\n        };\n      },\n      () => {\n        this._measureAndUpdateScrollProps();\n        this._prevRenderedRowsCount = this.state.curRenderedRowsCount;\n      },\n    );\n  },\n\n  _getDistanceFromEnd: function(scrollProperties: Object) {\n    return (\n      scrollProperties.contentLength -\n      scrollProperties.visibleLength -\n      scrollProperties.offset\n    );\n  },\n\n  _updateVisibleRows: function(updatedFrames?: Array<Object>) {\n    if (!this.props.onChangeVisibleRows) {\n      return; // No need to compute visible rows if there is no callback\n    }\n    if (updatedFrames) {\n      updatedFrames.forEach(newFrame => {\n        this._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        continue;\n      }\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n      var visibleSection = this._visibleRows[sectionID];\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n        if (\n          this.props.renderSeparator &&\n          (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)\n        ) {\n          totalIndex++;\n        }\n        if (!frame) {\n          break;\n        }\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n        if ((!min && !max) || min === max) {\n          break;\n        }\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n    visibilityChanged &&\n      this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n\n  _onScroll: function(e: Object) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength =\n      e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength =\n      e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset =\n      e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (\n      this.props.onEndReached &&\n      this._getDistanceFromEnd(this.scrollProperties) >\n        this.props.onEndReachedThreshold\n    ) {\n      // Scrolled out of the end zone, so it should be able to trigger again.\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  },\n});\n\nmodule.exports = ListView;\n"]}