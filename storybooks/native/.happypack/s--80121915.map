{"version":3,"sources":["node_modules/react-native/Libraries/Text/Text.js"],"names":["ColorPropType","require","EdgeInsetsPropType","NativeMethodsMixin","Platform","React","PropTypes","ReactNativeViewAttributes","StyleSheetPropType","TextStylePropTypes","Touchable","createReactClass","createReactNativeComponentClass","mergeFast","processColor","stylePropType","viewConfig","validAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","uiViewClassName","Text","displayName","propTypes","oneOf","number","onLayout","func","onPress","onLongPress","pressRetentionOffset","bool","suppressHighlighting","style","testID","string","nativeID","accessible","getDefaultProps","getInitialState","Mixin","touchableGetInitialState","mixins","getChildContext","isInAParentText","childContextTypes","contextTypes","_handlers","_hasPressHandler","props","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","touchableGetPressRectOffset","render","newProps","onStartShouldSetResponder","shouldSetFromProps","setResponder","key","bind","setState","e","PRESS_RECT_OFFSET","onResponderGrant","dispatchID","touchableHandleResponderGrant","apply","arguments","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","allowTermination","touchableHandleResponderTerminationRequest","state","TOUCH_TARGET_DEBUG","color","context","top","left","right","bottom","RCTText","RCTVirtualText","OS","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,eAAgBC,QAAQ,eAAR,CAAtB;AACA,GAAMC,oBAAqBD,QAAQ,oBAAR,CAA3B;AACA,GAAME,oBAAqBF,QAAQ,oBAAR,CAA3B;AACA,GAAMG,UAAWH,QAAQ,UAAR,CAAjB;AACA,GAAMI,OAAQJ,QAAQ,OAAR,CAAd;AACA,GAAMK,WAAYL,QAAQ,YAAR,CAAlB;AACA,GAAMM,2BAA4BN,QAAQ,2BAAR,CAAlC;AACA,GAAMO,oBAAqBP,QAAQ,oBAAR,CAA3B;AACA,GAAMQ,oBAAqBR,QAAQ,oBAAR,CAA3B;AACA,GAAMS,WAAYT,QAAQ,WAAR,CAAlB;;AAEA,GAAMU,kBAAmBV,QAAQ,oBAAR,CAAzB;AACA,GAAMW,iCAAkCX,QAAQ,iCAAR,CAAxC;AACA,GAAMY,WAAYZ,QAAQ,WAAR,CAAlB;AACA,GAAMa,cAAeb,QAAQ,cAAR,CAArB;;AAEA,GAAMc,eAAgBP,mBAAmBC,kBAAnB,CAAtB;;AAEA,GAAMO,YAAa;AACjBC,gBAAiBJ,UAAUN,0BAA0BW,MAApC,CAA4C;AAC3DC,cAAe,IAD4C;AAE3DC,cAAe,IAF4C;AAG3DC,cAAe,IAH4C;AAI3DC,iBAAkB,IAJyC;AAK3DC,SAAU,IALiD;AAM3DC,WAAY,IAN+C;AAO3DC,eAAgB,IAP2C;AAQ3DC,qBAAsB,IARqC;AAS3DC,iBAAkB,IATyC;AAU3DC,kBAAmB,IAVwC,CAA5C,CADA;;AAajBC,gBAAiB,SAbA,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,GAAMC,MAAOnB,iBAAiB;AAC5BoB,YAAa,MADe;AAE5BC,UAAW;;;;;;;;;;;;;;;;;;;AAmBTX,cAAef,UAAU2B,KAAV,CAAgB,CAAC,MAAD,CAAS,QAAT,CAAmB,MAAnB,CAA2B,MAA3B,CAAhB,CAnBN;;;;;;;;AA2BTb,cAAed,UAAU4B,MA3BhB;;;;;;AAiCTN,kBAAmBtB,UAAU2B,KAAV,CAAgB,CAAC,QAAD,CAAW,aAAX,CAA0B,UAA1B,CAAhB,CAjCV;;;;;;AAuCTE,SAAU7B,UAAU8B,IAvCX;;;;;;AA6CTC,QAAS/B,UAAU8B,IA7CV;;;;;;AAmDTE,YAAahC,UAAU8B,IAnDd;;;;;;;;AA2DTG,qBAAsBrC,kBA3Db;;;;AA+DTsB,WAAYlB,UAAUkC,IA/Db;;;;;AAoETf,eAAgBzB,aApEP;;;;;;AA0ETyC,qBAAsBnC,UAAUkC,IA1EvB;AA2ETE,MAAO3B,aA3EE;;;;AA+ET4B,OAAQrC,UAAUsC,MA/ET;;;;AAmFTC,SAAUvC,UAAUsC,MAnFX;;;;;AAwFTtB,iBAAkBhB,UAAUkC,IAxFnB;;;;;;;;;AAiGTM,WAAYxC,UAAUkC,IAjGb;;;;;AAsGTd,qBAAsBpB,UAAUkC,IAtGvB;;;;;;AA4GTb,iBAAkBrB,UAAU4B,MA5GnB;;;;;AAiHTX,SAAUjB,UAAUkC,IAjHX,CAFiB;;AAqH5BO,eArH4B,2BAqHF;AACxB,MAAO;AACLD,WAAY,IADP;AAELxB,iBAAkB,IAFb;AAGLD,cAAe,MAHV;AAILE,SAAU,KAJL,CAAP;;AAMD,CA5H2B;AA6H5ByB,gBAAiB,0BAAmB;AAClC,MAAOnC,WAAUH,UAAUuC,KAAV,CAAgBC,wBAAhB,EAAV,CAAsD;AAC3D/B,cAAe,KAD4C,CAAtD,CAAP;;AAGD,CAjI2B;AAkI5BgC,OAAQ,CAAChD,kBAAD,CAlIoB;AAmI5Ba,WAAYA,UAnIgB;AAoI5BoC,eApI4B,2BAoIF;AACxB,MAAO,CAACC,gBAAiB,IAAlB,CAAP;AACD,CAtI2B;AAuI5BC,kBAAmB;AACjBD,gBAAiB/C,UAAUkC,IADV,CAvIS;;AA0I5Be,aAAc;AACZF,gBAAiB/C,UAAUkC,IADf,CA1Ic;;;;;AAgJ5BgB,UAAY,IAhJgB;AAiJ5BC,gBAjJ4B,4BAiJA;AAC1B,MAAO,CAAC,CAAC,KAAKC,KAAL,CAAWrB,OAAb,EAAwB,CAAC,CAAC,KAAKqB,KAAL,CAAWpB,WAA5C;AACD,CAnJ2B;;;;;AAwJ5BqB,6BAA+B,IAxJH;AAyJ5BC,8BAAgC,IAzJJ;AA0J5BC,qBAAuB,IA1JK;AA2J5BC,yBAA2B,IA3JC;AA4J5BC,4BAA8B,IA5JF;AA6J5BC,MA7J4B,kBA6JC;AAC3B,GAAIC,UAAW,KAAKP,KAApB;AACA,GAAI,KAAKA,KAAL,CAAWQ,yBAAX,EAAwC,KAAKT,gBAAL,EAA5C,CAAqE;AACnE,GAAI,CAAC,KAAKD,SAAV,CAAqB;AACnB,KAAKA,SAAL,CAAiB;AACfU,0BAA2B,oCAAY;AACrC,GAAMC,oBAAqB,MAAKT,KAAL,CAAWQ,yBAAX;;AAEvB,MAAKR,KAAL,CAAWQ,yBAAX,EAFJ;AAGA,GAAME,cAAeD,oBAAsB,MAAKV,gBAAL,EAA3C;AACA,GAAIW,cAAgB,CAAC,MAAKT,4BAA1B,CAAwD;;;AAGtD,IAAK,GAAMU,IAAX,GAAkB3D,WAAUuC,KAA5B,CAAmC;AACjC,GAAI,MAAOvC,WAAUuC,KAAV,CAAgBoB,GAAhB,CAAP,GAAgC,UAApC,CAAgD;AAC9C,MAAYA,GAAZ,EAAmB3D,UAAUuC,KAAV,CAAgBoB,GAAhB,EAAqBC,IAArB,OAAnB;AACD;AACF;AACD,MAAKX,4BAAL,CAAoC,UAAM;AACxC,GAAI,MAAKD,KAAL,CAAWjB,oBAAX,EAAmC,CAAC,MAAKgB,gBAAL,EAAxC,CAAiE;AAC/D;AACD;AACD,MAAKc,QAAL,CAAc;AACZpD,cAAe,IADH,CAAd;;AAGD,CAPD;;AASA,MAAKyC,6BAAL,CAAqC,UAAM;AACzC,GAAI,MAAKF,KAAL,CAAWjB,oBAAX,EAAmC,CAAC,MAAKgB,gBAAL,EAAxC,CAAiE;AAC/D;AACD;AACD,MAAKc,QAAL,CAAc;AACZpD,cAAe,KADH,CAAd;;AAGD,CAPD;;AASA,MAAK0C,oBAAL,CAA4B,SAACW,CAAD,CAAuB;AACjD,MAAKd,KAAL,CAAWrB,OAAX,EAAsB,MAAKqB,KAAL,CAAWrB,OAAX,CAAmBmC,CAAnB,CAAtB;AACD,CAFD;;AAIA,MAAKV,wBAAL,CAAgC,SAACU,CAAD,CAAuB;AACrD,MAAKd,KAAL,CAAWpB,WAAX,EAA0B,MAAKoB,KAAL,CAAWpB,WAAX,CAAuBkC,CAAvB,CAA1B;AACD,CAFD;;AAIA,MAAKT,2BAAL,CAAmC,UAAuB;AACxD,MAAO,MAAKL,KAAL,CAAWnB,oBAAX,EAAmCkC,iBAA1C;AACD,CAFD;AAGD;;AAED,MAAOL,aAAP;AACD,CA9Cc;AA+CfM,iBAAkB,SAASF,CAAT,CAA4BG,UAA5B,CAAgD;;AAEhE,KAAKC,6BAAL,CAAmCJ,CAAnC,CAAsCG,UAAtC;AACA,KAAKjB,KAAL,CAAWgB,gBAAX;;AAEE,KAAKhB,KAAL,CAAWgB,gBAAX,CAA4BG,KAA5B,CAAkC,IAAlC,CAAwCC,SAAxC,CAFF;AAGD,CANiB,CAMhBR,IANgB,CAMX,IANW,CA/CH;AAsDfS,gBAAiB,SAASP,CAAT,CAA4B;;AAE3C,KAAKQ,4BAAL,CAAkCR,CAAlC;AACA,KAAKd,KAAL,CAAWqB,eAAX;;AAEE,KAAKrB,KAAL,CAAWqB,eAAX,CAA2BF,KAA3B,CAAiC,IAAjC,CAAuCC,SAAvC,CAFF;AAGD,CANgB,CAMfR,IANe,CAMV,IANU,CAtDF;AA6DfW,mBAAoB,SAAST,CAAT,CAA4B;;AAE9C,KAAKU,+BAAL,CAAqCV,CAArC;AACA,KAAKd,KAAL,CAAWuB,kBAAX;;AAEE,KAAKvB,KAAL,CAAWuB,kBAAX,CAA8BJ,KAA9B,CAAoC,IAApC,CAA0CC,SAA1C,CAFF;AAGD,CANmB,CAMlBR,IANkB,CAMb,IANa,CA7DL;AAoEfa,qBAAsB,SAASX,CAAT,CAA4B;;AAEhD,KAAKY,iCAAL,CAAuCZ,CAAvC;AACA,KAAKd,KAAL,CAAWyB,oBAAX;;AAEE,KAAKzB,KAAL,CAAWyB,oBAAX,CAAgCN,KAAhC,CAAsC,IAAtC,CAA4CC,SAA5C,CAFF;AAGD,CANqB,CAMpBR,IANoB,CAMf,IANe,CApEP;AA2Efe,8BAA+B,UAAiB;;;;AAI9C,GAAIC,kBAAmB,KAAKC,0CAAL,EAAvB;AACA,GAAID,kBAAoB,KAAK5B,KAAL,CAAW2B,6BAAnC,CAAkE;;AAEhEC,iBAAmB,KAAK5B,KAAL,CAAW2B,6BAAX,CAAyCR,KAAzC,CAA+C,IAA/C,CAAqDC,SAArD,CAAnB;AACD;AACD,MAAOQ,iBAAP;AACD,CAV8B,CAU7BhB,IAV6B,CAUxB,IAVwB,CA3EhB,CAAjB;;AAuFD;AACDL;AACK,KAAKP,KADV;AAEK,KAAKF,SAFV;AAGErC,cAAe,KAAKqE,KAAL,CAAWrE,aAH5B;;AAKD;AACD,GAAI8C,SAASxC,cAAT,EAA2B,IAA/B,CAAqC;AACnCwC;AACKA,QADL;AAEExC,eAAgBX,aAAamD,SAASxC,cAAtB,CAFlB;;AAID;AACD,GAAIf,UAAU+E,kBAAV,EAAgCxB,SAAS5B,OAA7C,CAAsD;AACpD4B;AACKA,QADL;AAEEvB,MAAO,CAAC,KAAKgB,KAAL,CAAWhB,KAAZ,CAAmB,CAACgD,MAAO,SAAR,CAAnB,CAFT;;AAID;AACD,GAAI,KAAKC,OAAL,CAAatC,eAAjB,CAAkC;AAChC,MAAO,qBAAC,cAAD,aAAoBY,QAApB,oDAAP;AACD,CAFD,IAEO;AACL,MAAO,qBAAC,OAAD,aAAaA,QAAb,oDAAP;AACD;AACF,CAhR2B,CAAjB,CAAb;;;;;;;;;;AA0RA,GAAIQ,mBAAoB,CAACmB,IAAK,EAAN,CAAUC,KAAM,EAAhB,CAAoBC,MAAO,EAA3B,CAA+BC,OAAQ,EAAvC,CAAxB;;AAEA,GAAIC,SAAUpF,gCAAgCI,UAAhC,CAAd;AACA,GAAIiF,gBAAiBD,OAArB;;AAEA,GAAI5F,SAAS8F,EAAT,GAAgB,SAApB,CAA+B;AAC7BD,eAAiBrF,gCAAgC;AAC/CK,gBAAiBJ,UAAUN,0BAA0BW,MAApC,CAA4C;AAC3DC,cAAe,IAD4C,CAA5C,CAD8B;;AAI/CU,gBAAiB,gBAJ8B,CAAhC,CAAjB;;AAMD;;AAEDsE,OAAOC,OAAP,CAAiBtE,IAAjB,C,0GA9WMf,a,oJAEAC,U,iJAoEAc,I,2IA0RF2C,iB,wJAEAuB,O,8IACAC,c","file":"Text.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Text\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst TextStylePropTypes = require('TextStylePropTypes');\nconst Touchable = require('Touchable');\n\nconst createReactClass = require('create-react-class');\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst mergeFast = require('mergeFast');\nconst processColor = require('processColor');\n\nconst stylePropType = StyleSheetPropType(TextStylePropTypes);\n\nconst viewConfig = {\n  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n  }),\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * `Text` supports nesting, styling, and touch handling.\n *\n * In the following example, the nested title and body text will inherit the `fontFamily` from\n *`styles.baseText`, but the title provides its own additional styles.  The title and body will\n * stack on top of each other on account of the literal newlines:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, Text, StyleSheet } from 'react-native';\n *\n * export default class TextInANest extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       titleText: \"Bird's Nest\",\n *       bodyText: 'This is not really a bird nest.'\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <Text style={styles.baseText}>\n *         <Text style={styles.titleText} onPress={this.onPressTitle}>\n *           {this.state.titleText}{'\\n'}{'\\n'}\n *         </Text>\n *         <Text numberOfLines={5}>\n *           {this.state.bodyText}\n *         </Text>\n *       </Text>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   baseText: {\n *     fontFamily: 'Cochin',\n *   },\n *   titleText: {\n *     fontSize: 20,\n *     fontWeight: 'bold',\n *   },\n * });\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('TextInANest', () => TextInANest);\n * ```\n */\n\n// $FlowFixMe(>=0.41.0)\nconst Text = createReactClass({\n  displayName: 'Text',\n  propTypes: {\n    /**\n     * When `numberOfLines` is set, this prop defines how text will be truncated.\n     * `numberOfLines` must be set in conjunction with this prop.\n     *\n     * This can be one of the following values:\n     *\n     * - `head` - The line is displayed so that the end fits in the container and the missing text\n     * at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n     * - `middle` - The line is displayed so that the beginning and end fit in the container and the\n     * missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n     * - `tail` - The line is displayed so that the beginning fits in the container and the\n     * missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n     * - `clip` - Lines are not drawn past the edge of the text container.\n     *\n     * The default is `tail`.\n     *\n     * > `clip` is working only for iOS\n     */\n    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),\n    /**\n     * Used to truncate the text with an ellipsis after computing the text\n     * layout, including line wrapping, such that the total number of lines\n     * does not exceed this number.\n     *\n     * This prop is commonly used with `ellipsizeMode`.\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `highQuality`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Invoked on mount and layout changes with\n     *\n     *   `{nativeEvent: {layout: {x, y, width, height}}}`\n     */\n    onLayout: PropTypes.func,\n    /**\n     * This function is called on press.\n     *\n     * e.g., `onPress={() => console.log('1st')}`\n     */\n    onPress: PropTypes.func,\n    /**\n     * This function is called on long press.\n     *\n     * e.g., `onLongPress={this.increaseSize}>`\n     */\n    onLongPress: PropTypes.func,\n    /**\n     * When the scroll view is disabled, this defines how far your touch may\n     * move off of the button, before deactivating the button. Once deactivated,\n     * try moving it back and you'll see that the button is once again\n     * reactivated! Move it back and forth several times while the scroll view\n     * is disabled. Ensure you pass in a constant to reduce memory allocations.\n     */\n    pressRetentionOffset: EdgeInsetsPropType,\n    /**\n     * Lets the user select text, to use the native copy and paste functionality.\n     */\n    selectable: PropTypes.bool,\n    /**\n     * The highlight color of the text.\n     * @platform android\n     */\n    selectionColor: ColorPropType,\n    /**\n     * When `true`, no visual change is made when text is pressed down. By\n     * default, a gray oval highlights the text on press down.\n     * @platform ios\n     */\n    suppressHighlighting: PropTypes.bool,\n    style: stylePropType,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n    /**\n     * Used to locate this view from native code.\n     */\n    nativeID: PropTypes.string,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * When set to `true`, indicates that the view is an accessibility element. The default value\n     * for a `Text` element is `true`.\n     *\n     * See the\n     * [Accessibility guide](docs/accessibility.html#accessible-ios-android)\n     * for more information.\n     */\n    accessible: PropTypes.bool,\n    /**\n     * Specifies whether font should be scaled down automatically to fit given style constraints.\n     * @platform ios\n     */\n    adjustsFontSizeToFit: PropTypes.bool,\n\n    /**\n     * Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).\n     * @platform ios\n     */\n    minimumFontScale: PropTypes.number,\n    /**\n     * Specifies the disabled state of the text view for testing purposes\n     * @platform android\n     */\n    disabled: PropTypes.bool,\n  },\n  getDefaultProps(): Object {\n    return {\n      accessible: true,\n      allowFontScaling: true,\n      ellipsizeMode: 'tail',\n      disabled: false,\n    };\n  },\n  getInitialState: function(): Object {\n    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {\n      isHighlighted: false,\n    });\n  },\n  mixins: [NativeMethodsMixin],\n  viewConfig: viewConfig,\n  getChildContext(): Object {\n    return {isInAParentText: true};\n  },\n  childContextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n  contextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n  /**\n   * Only assigned if touch is needed.\n   */\n  _handlers: (null: ?Object),\n  _hasPressHandler(): boolean {\n    return !!this.props.onPress || !!this.props.onLongPress;\n  },\n  /**\n   * These are assigned lazily the first time the responder is set to make plain\n   * text nodes as cheap as possible.\n   */\n  touchableHandleActivePressIn: (null: ?Function),\n  touchableHandleActivePressOut: (null: ?Function),\n  touchableHandlePress: (null: ?Function),\n  touchableHandleLongPress: (null: ?Function),\n  touchableGetPressRectOffset: (null: ?Function),\n  render(): React.Element<any> {\n    let newProps = this.props;\n    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {\n      if (!this._handlers) {\n        this._handlers = {\n          onStartShouldSetResponder: (): bool => {\n            const shouldSetFromProps = this.props.onStartShouldSetResponder &&\n                // $FlowFixMe(>=0.41.0)\n                this.props.onStartShouldSetResponder();\n            const setResponder = shouldSetFromProps || this._hasPressHandler();\n            if (setResponder && !this.touchableHandleActivePressIn) {\n              // Attach and bind all the other handlers only the first time a touch\n              // actually happens.\n              for (const key in Touchable.Mixin) {\n                if (typeof Touchable.Mixin[key] === 'function') {\n                  (this: any)[key] = Touchable.Mixin[key].bind(this);\n                }\n              }\n              this.touchableHandleActivePressIn = () => {\n                if (this.props.suppressHighlighting || !this._hasPressHandler()) {\n                  return;\n                }\n                this.setState({\n                  isHighlighted: true,\n                });\n              };\n\n              this.touchableHandleActivePressOut = () => {\n                if (this.props.suppressHighlighting || !this._hasPressHandler()) {\n                  return;\n                }\n                this.setState({\n                  isHighlighted: false,\n                });\n              };\n\n              this.touchableHandlePress = (e: SyntheticEvent) => {\n                this.props.onPress && this.props.onPress(e);\n              };\n\n              this.touchableHandleLongPress = (e: SyntheticEvent) => {\n                this.props.onLongPress && this.props.onLongPress(e);\n              };\n\n              this.touchableGetPressRectOffset = function(): RectOffset {\n                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;\n              };\n            }\n            // $FlowFixMe(>=0.41.0)\n            return setResponder;\n          },\n          onResponderGrant: function(e: SyntheticEvent, dispatchID: string) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderGrant(e, dispatchID);\n            this.props.onResponderGrant &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderGrant.apply(this, arguments);\n          }.bind(this),\n          onResponderMove: function(e: SyntheticEvent) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderMove(e);\n            this.props.onResponderMove &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderMove.apply(this, arguments);\n          }.bind(this),\n          onResponderRelease: function(e: SyntheticEvent) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderRelease(e);\n            this.props.onResponderRelease &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderRelease.apply(this, arguments);\n          }.bind(this),\n          onResponderTerminate: function(e: SyntheticEvent) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderTerminate(e);\n            this.props.onResponderTerminate &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderTerminate.apply(this, arguments);\n          }.bind(this),\n          onResponderTerminationRequest: function(): bool {\n            // Allow touchable or props.onResponderTerminationRequest to deny\n            // the request\n            // $FlowFixMe(>=0.41.0)\n            var allowTermination = this.touchableHandleResponderTerminationRequest();\n            if (allowTermination && this.props.onResponderTerminationRequest) {\n              // $FlowFixMe(>=0.41.0)\n              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);\n            }\n            return allowTermination;\n          }.bind(this),\n        };\n      }\n      newProps = {\n        ...this.props,\n        ...this._handlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (newProps.selectionColor != null) {\n      newProps = {\n        ...newProps,\n        selectionColor: processColor(newProps.selectionColor)\n      };\n    }\n    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {\n      newProps = {\n        ...newProps,\n        style: [this.props.style, {color: 'magenta'}],\n      };\n    }\n    if (this.context.isInAParentText) {\n      return <RCTVirtualText {...newProps} />;\n    } else {\n      return <RCTText {...newProps} />;\n    }\n  },\n});\n\ntype RectOffset = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n}\n\nvar PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nvar RCTText = createReactNativeComponentClass(viewConfig);\nvar RCTVirtualText = RCTText;\n\nif (Platform.OS === 'android') {\n  RCTVirtualText = createReactNativeComponentClass({\n    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {\n      isHighlighted: true,\n    }),\n    uiViewClassName: 'RCTVirtualText',\n  });\n}\n\nmodule.exports = Text;\n"]}