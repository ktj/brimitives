{"version":3,"sources":["node_modules/react-native/Libraries/Network/RCTNetworking.ios.js"],"names":["MissingNativeEventEmitterShim","require","NativeEventEmitter","RCTNetworkingNative","Networking","convertRequestBody","RCTNetworking","isAvailable","method","trackingName","url","headers","data","responseType","incrementalUpdates","timeout","callback","withCredentials","body","sendRequest","requestId","abortRequest","clearCookies","__DEV__","MissingNativeRCTNetworkingShim","throwMissingNativeModule","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,+BAAgCC,QAAQ,+BAAR,CAAtC;AACA,GAAMC,oBAAqBD,QAAQ,oBAAR,CAA3B;AACA,GAAME,qBAAsBF,QAAQ,eAAR,EAAyBG,UAArD;AACA,GAAMC,oBAAqBJ,QAAQ,oBAAR,CAA3B,C;;;;AAIMK,a;;;;AAIJ,wBAAc;AACNH,mBADM,SAFdI,WAEc,CAFS,IAET;AAEb,C;;;AAGCC,M;AACAC,Y;AACAC,G;AACAC,O;AACAC,I;AACAC,Y;AACAC,kB;AACAC,O;AACAC,Q;AACAC,e;AACA;AACA,GAAMC,MAAOb,mBAAmBO,IAAnB,CAAb;AACAT,oBAAoBgB,WAApB,CAAgC;AAC9BX,aAD8B;AAE9BE,OAF8B;AAG9BE,iBAAUM,IAAV,EAAgBT,yBAAhB,EAH8B;AAI9BE,eAJ8B;AAK9BE,yBAL8B;AAM9BC,qCAN8B;AAO9BC,eAP8B;AAQ9BE,+BAR8B,CAAhC;AASGD,QATH;AAUD,C;;AAEYI,S,CAAmB;AAC9BjB,oBAAoBkB,YAApB,CAAiCD,SAAjC;AACD,C;;AAEYJ,Q,CAAoC;AAC/Cb,oBAAoBmB,YAApB,CAAiCN,QAAjC;AACD,C,2BAvCyBd,kB;;;AA0C5B,GAAIqB,SAAW,CAACpB,mBAAhB,CAAqC;AAC7BqB,8BAD6B;AAEjC,yCAAc;AACN,eADM,CACW,YADX;AAEb,CAJgC;;AAMA;AAC/B,KAAKC,wBAAL;AACD,CARgC;;AAUC;AAChC,KAAKA,wBAAL;AACD,CAZgC;;AAcC;AAChC,KAAKA,wBAAL;AACD,CAhBgC,4CACUzB,6BADV;;;;;;AAsBnCM,cAAgB,GAAIkB,+BAAJ,EAAhB;AACD,CAvBD,IAuBO;AACLlB,cAAgB,GAAIA,cAAJ,EAAhB;AACD;;AAEDoB,OAAOC,OAAP,CAAiBrB,aAAjB,C,0GA1EMH,mB,0KAKAG,a","file":"RCTNetworking.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTNetworking\n * @flow\n */\n'use strict';\n\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTNetworkingNative = require('NativeModules').Networking;\nconst convertRequestBody = require('convertRequestBody');\n\nimport type {RequestBody} from 'convertRequestBody';\n\nclass RCTNetworking extends NativeEventEmitter {\n\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTNetworkingNative);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => any,\n    withCredentials: boolean\n  ) {\n    const body = convertRequestBody(data);\n    RCTNetworkingNative.sendRequest({\n      method,\n      url,\n      data: {...body, trackingName},\n      headers,\n      responseType,\n      incrementalUpdates,\n      timeout,\n      withCredentials\n    }, callback);\n  }\n\n  abortRequest(requestId: number) {\n    RCTNetworkingNative.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    RCTNetworkingNative.clearCookies(callback);\n  }\n}\n\nif (__DEV__ && !RCTNetworkingNative) {\n  class MissingNativeRCTNetworkingShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTNetworking', 'Networking');\n    }\n\n    sendRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    abortRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    clearCookies(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTNetworkingNative` module. If you don't include it,\n  // `RCTNetworking.isAvailable` will return `false`, and any method calls will throw.\n  // We reassign the class variable to keep the autodoc generator happy.\n  RCTNetworking = new MissingNativeRCTNetworkingShim();\n} else {\n  RCTNetworking = new RCTNetworking();\n}\n\nmodule.exports = RCTNetworking;\n"]}