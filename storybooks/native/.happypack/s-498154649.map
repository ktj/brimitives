{"version":3,"sources":["node_modules/react-native/Libraries/Performance/Systrace.js"],"names":["invariant","require","TRACE_TAG_REACT_APPS","TRACE_TAG_JSC_CALLS","_enabled","_asyncCookie","_markStack","_markStackIndex","REACT_MARKER","userTimingPolyfill","mark","markName","__DEV__","systraceLabel","indexOfId","lastIndexOf","cutoffIndex","length","slice","Systrace","beginEvent","measure","measureName","startMark","endMark","topMark","endEvent","clearMarks","clearMeasures","getUserTimingPolyfill","setEnabled","enabled","global","nativeTraceBeginLegacy","nativeTraceEndLegacy","isEnabled","profileName","args","nativeTraceBeginSection","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","attachToRelayProfiler","relayProfiler","attachProfileHandler","name","attachAggregateHandler","callback","swizzleJSON","measureMethods","JSON","object","objectName","methodNames","forEach","methodName","objName","fnName","func","apply","arguments","ret","module","exports"],"mappings":"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","file":"Systrace.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Systrace\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype RelayProfiler = {\n  attachProfileHandler(\n    name: string,\n    handler: (name: string, state?: any) => () => void\n  ): void,\n\n  attachAggregateHandler(\n    name: string,\n    handler: (name: string, callback: () => void) => void\n  ): void,\n};\n\n/* eslint no-bitwise: 0 */\nconst TRACE_TAG_REACT_APPS = 1 << 17;\nconst TRACE_TAG_JSC_CALLS = 1 << 27;\n\nlet _enabled = false;\nlet _asyncCookie = 0;\nconst _markStack = [];\nlet _markStackIndex = -1;\n\n// Implements a subset of User Timing API necessary for React measurements.\n// https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\nconst REACT_MARKER = '\\u269B';\nconst userTimingPolyfill = {\n  mark(markName: string) {\n    if (__DEV__) {\n      if (_enabled) {\n        _markStackIndex++;\n        _markStack[_markStackIndex] = markName;\n        let systraceLabel = markName;\n        // Since perf measurements are a shared namespace in User Timing API,\n        // we prefix all React results with a React emoji.\n        if (markName[0] === REACT_MARKER) {\n          // This is coming from React.\n          // Removing component IDs keeps trace colors stable.\n          const indexOfId = markName.lastIndexOf(' (#');\n          const cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;\n          // Also cut off the emoji because it breaks Systrace\n          systraceLabel = markName.slice(2, cutoffIndex);\n        }\n        Systrace.beginEvent(systraceLabel);\n      }\n    }\n  },\n  measure(measureName: string, startMark: ?string, endMark: ?string) {\n    if (__DEV__) {\n      if (_enabled) {\n        invariant(\n          typeof measureName === 'string' &&\n          typeof startMark === 'string' &&\n          typeof endMark === 'undefined',\n          'Only performance.measure(string, string) overload is supported.'\n        );\n        const topMark = _markStack[_markStackIndex];\n        invariant(\n          startMark === topMark,\n          'There was a mismatching performance.measure() call. ' +\n          'Expected \"%s\" but got \"%s.\"',\n          topMark,\n          startMark,\n        );\n        _markStackIndex--;\n        // We can't use more descriptive measureName because Systrace doesn't\n        // let us edit labels post factum.\n        Systrace.endEvent();\n      }\n    }\n  },\n  clearMarks(markName: string) {\n    if (__DEV__) {\n      if (_enabled) {\n        if (_markStackIndex === -1) {\n          return;\n        }\n        if (markName === _markStack[_markStackIndex]) {\n          // React uses this for \"cancelling\" started measurements.\n          // Systrace doesn't support deleting measurements, so we just stop them.\n          userTimingPolyfill.measure(markName, markName);\n        }\n      }\n    }\n  },\n  clearMeasures() {\n    // React calls this to avoid memory leaks in browsers, but we don't keep\n    // measurements anyway.\n  },\n};\n\nconst Systrace = {\n  getUserTimingPolyfill() {\n    return userTimingPolyfill;\n  },\n\n  setEnabled(enabled: boolean) {\n    if (_enabled !== enabled) {\n      if (__DEV__) {\n        if (enabled) {\n          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);\n        } else {\n          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);\n        }\n      }\n      _enabled = enabled;\n    }\n  },\n\n  isEnabled(): boolean {\n    return _enabled;\n  },\n\n  /**\n   * beginEvent/endEvent for starting and then ending a profile within the same call stack frame\n  **/\n  beginEvent(profileName?: any, args?: any) {\n    if (_enabled) {\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);\n    }\n  },\n\n  endEvent() {\n    if (_enabled) {\n      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);\n    }\n  },\n\n  /**\n   * beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either\n   * occur on another thread or out of the current stack frame, eg await\n   * the returned cookie variable should be used as input into the endAsyncEvent call to end the profile\n  **/\n  beginAsyncEvent(profileName?: any): any {\n    const cookie = _asyncCookie;\n    if (_enabled) {\n      _asyncCookie++;\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);\n    }\n    return cookie;\n  },\n\n  endAsyncEvent(profileName?: any, cookie?: any) {\n    if (_enabled) {\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);\n    }\n  },\n\n  /**\n   * counterEvent registers the value to the profileName on the systrace timeline\n  **/\n  counterEvent(profileName?: any, value?: any) {\n    if (_enabled) {\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceCounter &&\n        global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);\n    }\n  },\n\n  /**\n   * Relay profiles use await calls, so likely occur out of current stack frame\n   * therefore async variant of profiling is used\n  **/\n  attachToRelayProfiler(relayProfiler: RelayProfiler) {\n    relayProfiler.attachProfileHandler('*', (name) => {\n      const cookie = Systrace.beginAsyncEvent(name);\n      return () => {\n        Systrace.endAsyncEvent(name, cookie);\n      };\n    });\n\n    relayProfiler.attachAggregateHandler('*', (name, callback) => {\n      Systrace.beginEvent(name);\n      callback();\n      Systrace.endEvent();\n    });\n  },\n\n  /* This is not called by default due to perf overhead but it's useful\n     if you want to find traces which spend too much time in JSON. */\n  swizzleJSON() {\n    Systrace.measureMethods(JSON, 'JSON', [\n      'parse',\n      'stringify'\n    ]);\n  },\n\n /**\n  * Measures multiple methods of a class. For example, you can do:\n  * Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);\n  *\n  * @param object\n  * @param objectName\n  * @param methodNames Map from method names to method display names.\n  */\n measureMethods(object: any, objectName: string, methodNames: Array<string>): void {\n   if (!__DEV__) {\n     return;\n   }\n\n   methodNames.forEach(methodName => {\n     object[methodName] = Systrace.measure(\n       objectName,\n       methodName,\n       object[methodName]\n     );\n   });\n },\n\n /**\n  * Returns an profiled version of the input function. For example, you can:\n  * JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);\n  *\n  * @param objName\n  * @param fnName\n  * @param {function} func\n  * @return {function} replacement function\n  */\n measure(objName: string, fnName: string, func: any): any {\n   if (!__DEV__) {\n     return func;\n   }\n\n   const profileName = `${objName}.${fnName}`;\n   return function() {\n     if (!_enabled) {\n       return func.apply(this, arguments);\n     }\n\n     Systrace.beginEvent(profileName);\n     const ret = func.apply(this, arguments);\n     Systrace.endEvent();\n     return ret;\n   };\n },\n};\n\nif (__DEV__) {\n  // This is needed, because require callis in polyfills are not processed as\n  // other files. Therefore, calls to `require('moduleId')` are not replaced\n  // with numeric IDs\n  // TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)\n  (require: any).Systrace = Systrace;\n}\n\nmodule.exports = Systrace;\n"]}