{"version":3,"sources":["node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"],"names":["PixelRatio","require","ReactNativePropRegistry","ReactNativeStyleAttributes","StyleSheetValidation","flatten","hairlineWidth","roundToNearestPixel","get","absoluteFillObject","position","left","right","top","bottom","absoluteFill","register","module","exports","setStyleAttributePreprocessor","property","process","value","console","error","__DEV__","warn","create","obj","result","key","validateStyle"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAIA,YAAaC,QAAQ,YAAR,CAAjB;AACA,GAAIC,yBAA0BD,QAAQ,yBAAR,CAA9B;AACA,GAAIE,4BAA6BF,QAAQ,4BAAR,CAAjC;AACA,GAAIG,sBAAuBH,QAAQ,sBAAR,CAA3B;;AAEA,GAAII,SAAUJ,QAAQ,cAAR,CAAd;;;;;AAKA,GAAIK,eAAgBN,WAAWO,mBAAX,CAA+B,GAA/B,CAApB;AACA,GAAID,gBAAkB,CAAtB,CAAyB;AACvBA,cAAgB,EAAIN,WAAWQ,GAAX,EAApB;AACD;;AAED,GAAMC,oBAAqB;AACzBC,SAAU,UADe;AAEzBC,KAAM,CAFmB;AAGzBC,MAAO,CAHkB;AAIzBC,IAAK,CAJoB;AAKzBC,OAAQ,CALiB,CAA3B;;AAOA,GAAMC,cAAeb,wBAAwBc,QAAxB,CAAiCP,kBAAjC,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CAQ,OAAOC,OAAP,CAAiB;;;;;;;;;;;;;;;;;;;;AAoBfZ,2BApBe;;;;;;;AA2BfS,yBA3Be;;;;;;;;;;;;;;AAyCfN,qCAzCe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFfJ,eAlFe;;;;;;;;;;;AA6Ffc,6BA7Fe,wCA6FeC,QA7Ff,CA6FiCC,OA7FjC,CA6FsE;AACnF,GAAIC,aAAJ;;AAEA,GAAI,MAAOnB,4BAA2BiB,QAA3B,CAAP,GAAgD,QAApD,CAA8D;AAC5DE,MAAQ,EAAR;AACD,CAFD,IAEO,IAAI,MAAOnB,4BAA2BiB,QAA3B,CAAP,GAAgD,QAApD,CAA8D;AACnEE,MAAQnB,2BAA2BiB,QAA3B,CAAR;AACD,CAFM,IAEA;AACLG,QAAQC,KAAR,CAAiBJ,QAAjB;AACA;AACD;;AAED,GAAIK,SAAW,MAAOH,OAAMD,OAAb,GAAyB,UAAxC,CAAoD;AAClDE,QAAQG,IAAR,gBAA4BN,QAA5B;AACD;;AAEDjB,2BAA2BiB,QAA3B,cAA4CE,KAA5C,EAAmDD,eAAnD;AACD,CA9Gc;;;;;AAmHfM,MAnHe,iBAmHGC,GAnHH,CAmH0B;AACvC,GAAMC,QAAwB,EAA9B;AACA,IAAK,GAAIC,IAAT,GAAgBF,IAAhB,CAAqB;AACnBxB,qBAAqB2B,aAArB,CAAmCD,GAAnC,CAAwCF,GAAxC;AACAC,OAAOC,GAAP,EAAc5B,wBAAwBc,QAAxB,CAAiCY,IAAIE,GAAJ,CAAjC,CAAd;AACD;AACD,MAAOD,OAAP;AACD,CA1Hc,CAAjB,C,0GA1DIvB,a,gKAKEG,kB,qKAOAM,Y","file":"StyleSheet.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule StyleSheet\n * @flow\n */\n'use strict';\n\nvar PixelRatio = require('PixelRatio');\nvar ReactNativePropRegistry = require('ReactNativePropRegistry');\nvar ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nvar StyleSheetValidation = require('StyleSheetValidation');\n\nvar flatten = require('flattenStyle');\n\nexport type Styles = {[key: string]: Object};\nexport type StyleSheet<S: Styles> = {[key: $Keys<S>]: number};\n\nvar hairlineWidth = PixelRatio.roundToNearestPixel(0.4);\nif (hairlineWidth === 0) {\n  hairlineWidth = 1 / PixelRatio.get();\n}\n\nconst absoluteFillObject = {\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n};\nconst absoluteFill = ReactNativePropRegistry.register(absoluteFillObject); // This also freezes it\n\n/**\n * A StyleSheet is an abstraction similar to CSS StyleSheets\n *\n * Create a new StyleSheet:\n *\n * ```\n * var styles = StyleSheet.create({\n *   container: {\n *     borderRadius: 4,\n *     borderWidth: 0.5,\n *     borderColor: '#d6d7da',\n *   },\n *   title: {\n *     fontSize: 19,\n *     fontWeight: 'bold',\n *   },\n *   activeTitle: {\n *     color: 'red',\n *   },\n * });\n * ```\n *\n * Use a StyleSheet:\n *\n * ```\n * <View style={styles.container}>\n *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />\n * </View>\n * ```\n *\n * Code quality:\n *\n *  - By moving styles away from the render function, you're making the code\n *  easier to understand.\n *  - Naming the styles is a good way to add meaning to the low level components\n *  in the render function.\n *\n * Performance:\n *\n *  - Making a stylesheet from a style object makes it possible to refer to it\n * by ID instead of creating a new style object every time.\n *  - It also allows to send the style only once through the bridge. All\n * subsequent uses are going to refer an id (not implemented yet).\n */\nmodule.exports = {\n  /**\n   * This is defined as the width of a thin line on the platform. It can be\n   * used as the thickness of a border or division between two elements.\n   * Example:\n   * ```\n   *   {\n   *     borderBottomColor: '#bbb',\n   *     borderBottomWidth: StyleSheet.hairlineWidth\n   *   }\n   * ```\n   *\n   * This constant will always be a round number of pixels (so a line defined\n   * by it look crisp) and will try to match the standard width of a thin line\n   * on the underlying platform. However, you should not rely on it being a\n   * constant size, because on different platforms and screen densities its\n   * value may be calculated differently.\n   *\n   * A line with hairline width may not be visible if your simulator is downscaled.\n   */\n  hairlineWidth,\n\n  /**\n   * A very common pattern is to create overlays with position absolute and zero positioning,\n   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated\n   * styles.\n   */\n  absoluteFill,\n\n  /**\n   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be\n   * used to create a customized entry in a `StyleSheet`, e.g.:\n   *\n   *   const styles = StyleSheet.create({\n   *     wrapper: {\n   *       ...StyleSheet.absoluteFillObject,\n   *       top: 10,\n   *       backgroundColor: 'transparent',\n   *     },\n   *   });\n   */\n  absoluteFillObject,\n\n  /**\n   * Flattens an array of style objects, into one aggregated style object.\n   * Alternatively, this method can be used to lookup IDs, returned by\n   * StyleSheet.register.\n   *\n   * > **NOTE**: Exercise caution as abusing this can tax you in terms of\n   * > optimizations.\n   * >\n   * > IDs enable optimizations through the bridge and memory in general. Refering\n   * > to style objects directly will deprive you of these optimizations.\n   *\n   * Example:\n   * ```\n   * var styles = StyleSheet.create({\n   *   listItem: {\n   *     flex: 1,\n   *     fontSize: 16,\n   *     color: 'white'\n   *   },\n   *   selectedListItem: {\n   *     color: 'green'\n   *   }\n   * });\n   *\n   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])\n   * // returns { flex: 1, fontSize: 16, color: 'green' }\n   * ```\n   * Alternative use:\n   * ```\n   * StyleSheet.flatten(styles.listItem);\n   * // return { flex: 1, fontSize: 16, color: 'white' }\n   * // Simply styles.listItem would return its ID (number)\n   * ```\n   * This method internally uses `StyleSheetRegistry.getStyleByID(style)`\n   * to resolve style objects represented by IDs. Thus, an array of style\n   * objects (instances of StyleSheet.create), are individually resolved to,\n   * their respective objects, merged as one and then returned. This also explains\n   * the alternative use.\n   */\n  flatten,\n\n  /**\n   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will\n   * not be reliably announced. The whole thing might be deleted, who knows? Use\n   * at your own risk.\n   *\n   * Sets a function to use to pre-process a style property value. This is used\n   * internally to process color and transform values. You should not use this\n   * unless you really know what you are doing and have exhausted other options.\n   */\n  setStyleAttributePreprocessor(property: string, process: (nextProp: mixed) => mixed) {\n    let value;\n\n    if (typeof ReactNativeStyleAttributes[property] === 'string') {\n      value = {};\n    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {\n      value = ReactNativeStyleAttributes[property];\n    } else {\n      console.error(`${property} is not a valid style attribute`);\n      return;\n    }\n\n    if (__DEV__ && typeof value.process === 'function') {\n      console.warn(`Overwriting ${property} style attribute preprocessor`);\n    }\n\n    ReactNativeStyleAttributes[property] = { ...value, process };\n  },\n\n  /**\n   * Creates a StyleSheet style reference from the given object.\n   */\n  create<S: Styles>(obj: S): StyleSheet<S> {\n    const result: StyleSheet<S> = {};\n    for (var key in obj) {\n      StyleSheetValidation.validateStyle(key, obj);\n      result[key] = ReactNativePropRegistry.register(obj[key]);\n    }\n    return result;\n  },\n};\n"]}