{"version":3,"sources":["node_modules/react-native/Libraries/Animated/src/bezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","module","exports","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x"],"mappings":"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","file":"bezier.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * BezierEasing - use bezier curve for transition easing function\n * https://github.com/gre/bezier-easing\n *\n * @copyright 2014-2015 GaÃ«tan Renaudeau. MIT License.\n * @providesModule bezier\n * @noflow\n */\n'use strict';\n\n // These values are established by empiricism with tests (tradeoff: performance VS precision)\n var NEWTON_ITERATIONS = 4;\n var NEWTON_MIN_SLOPE = 0.001;\n var SUBDIVISION_PRECISION = 0.0000001;\n var SUBDIVISION_MAX_ITERATIONS = 10;\n\n var kSplineTableSize = 11;\n var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n var float32ArraySupported = typeof Float32Array === 'function';\n\n function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n function C (aA1)      { return 3.0 * aA1; }\n\n // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\n function binarySubdivide (aX, aA, aB, mX1, mX2) {\n   var currentX, currentT, i = 0;\n   do {\n     currentT = aA + (aB - aA) / 2.0;\n     currentX = calcBezier(currentT, mX1, mX2) - aX;\n     if (currentX > 0.0) {\n       aB = currentT;\n     } else {\n       aA = currentT;\n     }\n   } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n   return currentT;\n }\n\n function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n }\n\n module.exports = function bezier (mX1, mY1, mX2, mY2) {\n   if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) { // eslint-disable-line yoda\n     throw new Error('bezier x values must be in [0, 1] range');\n   }\n\n   // Precompute samples table\n   var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n   if (mX1 !== mY1 || mX2 !== mY2) {\n     for (var i = 0; i < kSplineTableSize; ++i) {\n       sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n     }\n   }\n\n   function getTForX (aX) {\n     var intervalStart = 0.0;\n     var currentSample = 1;\n     var lastSample = kSplineTableSize - 1;\n\n     for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n       intervalStart += kSampleStepSize;\n     }\n     --currentSample;\n\n     // Interpolate to provide an initial guess for t\n     var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n     var guessForT = intervalStart + dist * kSampleStepSize;\n\n     var initialSlope = getSlope(guessForT, mX1, mX2);\n     if (initialSlope >= NEWTON_MIN_SLOPE) {\n       return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n     } else if (initialSlope === 0.0) {\n       return guessForT;\n     } else {\n       return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n     }\n   }\n\n   return function BezierEasing (x) {\n     if (mX1 === mY1 && mX2 === mY2) {\n       return x; // linear\n     }\n     // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n     if (x === 0) {\n       return 0;\n     }\n     if (x === 1) {\n       return 1;\n     }\n     return calcBezier(getTForX(x), mY1, mY2);\n   };\n };\n"]}