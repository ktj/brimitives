{"version":3,"sources":["node_modules/react-native/Libraries/Components/WebView/WebView.android.js"],"names":["EdgeInsetsPropType","require","ActivityIndicator","React","PropTypes","ReactNative","StyleSheet","UIManager","View","ViewPropTypes","deprecatedPropType","keyMirror","requireNativeComponent","resolveAssetSource","RCT_WEBVIEW_REF","WebViewState","IDLE","LOADING","ERROR","defaultRenderLoading","styles","loadingView","loadingProgressBar","WebView","state","viewState","lastErrorEvent","startInLoadingState","goForward","goBack","reload","stopLoading","postMessage","injectJavaScript","updateNavigationState","getWebViewHandle","onLoadingStart","onLoadingError","onLoadingFinish","onMessage","props","setState","otherView","renderLoading","errorEvent","renderError","domain","code","description","console","error","loading","webViewStyles","container","style","push","hidden","source","html","url","uri","method","headers","warn","body","webView","scalesPageToFit","injectedJavaScript","userAgent","javaScriptEnabled","thirdPartyCookiesEnabled","domStorageEnabled","contentInset","automaticallyAdjustContentInsets","onContentSizeChange","testID","mediaPlaybackRequiresUserAction","allowUniversalAccessFromFileURLs","mixedContentMode","saveFormDataDisabled","dispatchViewManagerCommand","RCTWebView","Commands","data","String","event","onNavigationStateChange","nativeEvent","findNodeHandle","refs","onLoadStart","persist","onError","onLoadEnd","onLoad","Component","propTypes","func","bool","string","oneOfType","shape","oneOf","object","baseUrl","number","defaultProps","nativeOnly","messagingEnabled","create","flex","height","justifyContent","alignItems","module","exports"],"mappings":"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","file":"WebView.android.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule WebView\n */\n'use strict';\n\nvar EdgeInsetsPropType = require('EdgeInsetsPropType');\nvar ActivityIndicator = require('ActivityIndicator');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar StyleSheet = require('StyleSheet');\nvar UIManager = require('UIManager');\nvar View = require('View');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar deprecatedPropType = require('deprecatedPropType');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar requireNativeComponent = require('requireNativeComponent');\nvar resolveAssetSource = require('resolveAssetSource');\n\nvar RCT_WEBVIEW_REF = 'webview';\n\nvar WebViewState = keyMirror({\n  IDLE: null,\n  LOADING: null,\n  ERROR: null,\n});\n\nvar defaultRenderLoading = () => (\n  <View style={styles.loadingView}>\n    <ActivityIndicator\n      style={styles.loadingProgressBar}\n    />\n  </View>\n);\n\n/**\n * Renders a native WebView.\n */\nclass WebView extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    renderError: PropTypes.func,\n    renderLoading: PropTypes.func,\n    onLoad: PropTypes.func,\n    onLoadEnd: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onError: PropTypes.func,\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    contentInset: EdgeInsetsPropType,\n    onNavigationStateChange: PropTypes.func,\n    onMessage: PropTypes.func,\n    onContentSizeChange: PropTypes.func,\n    startInLoadingState: PropTypes.bool, // force WebView to show loadingView on first load\n    style: ViewPropTypes.style,\n\n    html: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    url: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    /**\n     * Loads static html or a uri (with optional headers) in the WebView.\n     */\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        /*\n         * The URI to load in the WebView. Can be a local or remote file.\n         */\n        uri: PropTypes.string,\n        /*\n         * The HTTP Method to use. Defaults to GET if not specified.\n         * NOTE: On Android, only GET and POST are supported.\n         */\n        method: PropTypes.oneOf(['GET', 'POST']),\n        /*\n         * Additional HTTP headers to send with the request.\n         * NOTE: On Android, this can only be used with GET requests.\n         */\n        headers: PropTypes.object,\n        /*\n         * The HTTP body to send with the request. This must be a valid\n         * UTF-8 string, and will be sent exactly as specified, with no\n         * additional encoding (e.g. URL-escaping or base64) applied.\n         * NOTE: On Android, this can only be used with POST requests.\n         */\n        body: PropTypes.string,\n      }),\n      PropTypes.shape({\n        /*\n         * A static HTML page to display in the WebView.\n         */\n        html: PropTypes.string,\n        /*\n         * The base URL to be used for any relative links in the HTML.\n         */\n        baseUrl: PropTypes.string,\n      }),\n      /*\n       * Used internally by packager.\n       */\n      PropTypes.number,\n    ]),\n\n    /**\n     * Used on Android only, JS is enabled by default for WebView on iOS\n     * @platform android\n     */\n    javaScriptEnabled: PropTypes.bool,\n\n    /**\n     * Used on Android Lollipop and above only, third party cookies are enabled\n     * by default for WebView on Android Kitkat and below and on iOS\n     * @platform android\n     */\n    thirdPartyCookiesEnabled: PropTypes.bool,\n\n    /**\n     * Used on Android only, controls whether DOM Storage is enabled or not\n     * @platform android\n     */\n    domStorageEnabled: PropTypes.bool,\n\n    /**\n     * Sets the JS to be injected when the webpage loads.\n     */\n    injectedJavaScript: PropTypes.string,\n\n    /**\n     * Sets whether the webpage scales to fit the view and the user can change the scale.\n     */\n    scalesPageToFit: PropTypes.bool,\n\n    /**\n     * Sets the user-agent for this WebView. The user-agent can also be set in native using\n     * WebViewConfig. This prop will overwrite that config.\n     */\n    userAgent: PropTypes.string,\n\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n\n    /**\n     * Determines whether HTML5 audio & videos require the user to tap before they can\n     * start playing. The default value is `false`.\n     */\n    mediaPlaybackRequiresUserAction: PropTypes.bool,\n\n    /**\n     * Boolean that sets whether JavaScript running in the context of a file\n     * scheme URL should be allowed to access content from any origin.\n     * Including accessing content from other file scheme URLs\n     * @platform android\n     */\n    allowUniversalAccessFromFileURLs: PropTypes.bool,\n\n    /**\n     * Function that accepts a string that will be passed to the WebView and\n     * executed immediately as JavaScript.\n     */\n    injectJavaScript: PropTypes.func,\n\n    /**\n     * Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.\n     *\n     * Possible values for `mixedContentMode` are:\n     *\n     * - `'never'` (default) - WebView will not allow a secure origin to load content from an insecure origin.\n     * - `'always'` - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.\n     * - `'compatibility'` -  WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.\n     * @platform android\n     */\n    mixedContentMode: PropTypes.oneOf([\n      'never',\n      'always',\n      'compatibility'\n    ]),\n\n    /**\n     * Used on Android only, controls whether form autocomplete data should be saved\n     * @platform android\n     */\n    saveFormDataDisabled: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    javaScriptEnabled : true,\n    thirdPartyCookiesEnabled: true,\n    scalesPageToFit: true,\n    saveFormDataDisabled: false\n  };\n\n  state = {\n    viewState: WebViewState.IDLE,\n    lastErrorEvent: null,\n    startInLoadingState: true,\n  };\n\n  componentWillMount() {\n    if (this.props.startInLoadingState) {\n      this.setState({viewState: WebViewState.LOADING});\n    }\n  }\n\n  render() {\n    var otherView = null;\n\n   if (this.state.viewState === WebViewState.LOADING) {\n      otherView = (this.props.renderLoading || defaultRenderLoading)();\n    } else if (this.state.viewState === WebViewState.ERROR) {\n      var errorEvent = this.state.lastErrorEvent;\n      otherView = this.props.renderError && this.props.renderError(\n        errorEvent.domain,\n        errorEvent.code,\n        errorEvent.description);\n    } else if (this.state.viewState !== WebViewState.IDLE) {\n      console.error('RCTWebView invalid state encountered: ' + this.state.loading);\n    }\n\n    var webViewStyles = [styles.container, this.props.style];\n    if (this.state.viewState === WebViewState.LOADING ||\n      this.state.viewState === WebViewState.ERROR) {\n      // if we're in either LOADING or ERROR states, don't show the webView\n      webViewStyles.push(styles.hidden);\n    }\n\n    var source = this.props.source || {};\n    if (this.props.html) {\n      source.html = this.props.html;\n    } else if (this.props.url) {\n      source.uri = this.props.url;\n    }\n\n    if (source.method === 'POST' && source.headers) {\n      console.warn('WebView: `source.headers` is not supported when using POST.');\n    } else if (source.method === 'GET' && source.body) {\n      console.warn('WebView: `source.body` is not supported when using GET.');\n    }\n\n    var webView =\n      <RCTWebView\n        ref={RCT_WEBVIEW_REF}\n        key=\"webViewKey\"\n        style={webViewStyles}\n        source={resolveAssetSource(source)}\n        scalesPageToFit={this.props.scalesPageToFit}\n        injectedJavaScript={this.props.injectedJavaScript}\n        userAgent={this.props.userAgent}\n        javaScriptEnabled={this.props.javaScriptEnabled}\n        thirdPartyCookiesEnabled={this.props.thirdPartyCookiesEnabled}\n        domStorageEnabled={this.props.domStorageEnabled}\n        messagingEnabled={typeof this.props.onMessage === 'function'}\n        onMessage={this.onMessage}\n        contentInset={this.props.contentInset}\n        automaticallyAdjustContentInsets={this.props.automaticallyAdjustContentInsets}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onLoadingStart={this.onLoadingStart}\n        onLoadingFinish={this.onLoadingFinish}\n        onLoadingError={this.onLoadingError}\n        testID={this.props.testID}\n        mediaPlaybackRequiresUserAction={this.props.mediaPlaybackRequiresUserAction}\n        allowUniversalAccessFromFileURLs={this.props.allowUniversalAccessFromFileURLs}\n        mixedContentMode={this.props.mixedContentMode}\n        saveFormDataDisabled={this.props.saveFormDataDisabled}\n      />;\n\n    return (\n      <View style={styles.container}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n\n  goForward = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goForward,\n      null\n    );\n  };\n\n  goBack = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goBack,\n      null\n    );\n  };\n\n  reload = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.reload,\n      null\n    );\n  };\n\n  stopLoading = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.stopLoading,\n      null\n    );\n  };\n\n  postMessage = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.postMessage,\n      [String(data)]\n    );\n  };\n\n  /**\n  * Injects a javascript string into the referenced WebView. Deliberately does not\n  * return a response because using eval() to return a response breaks this method\n  * on pages with a Content Security Policy that disallows eval(). If you need that\n  * functionality, look into postMessage/onMessage.\n  */\n  injectJavaScript = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.injectJavaScript,\n      [data]\n    );\n  };\n\n  /**\n   * We return an event with a bunch of fields including:\n   *  url, title, loading, canGoBack, canGoForward\n   */\n  updateNavigationState = (event) => {\n    if (this.props.onNavigationStateChange) {\n      this.props.onNavigationStateChange(event.nativeEvent);\n    }\n  };\n\n  getWebViewHandle = () => {\n    return ReactNative.findNodeHandle(this.refs[RCT_WEBVIEW_REF]);\n  };\n\n  onLoadingStart = (event) => {\n    var onLoadStart = this.props.onLoadStart;\n    onLoadStart && onLoadStart(event);\n    this.updateNavigationState(event);\n  };\n\n  onLoadingError = (event) => {\n    event.persist(); // persist this event because we need to store it\n    var {onError, onLoadEnd} = this.props;\n    onError && onError(event);\n    onLoadEnd && onLoadEnd(event);\n    console.warn('Encountered an error loading page', event.nativeEvent);\n\n    this.setState({\n      lastErrorEvent: event.nativeEvent,\n      viewState: WebViewState.ERROR\n    });\n  };\n\n  onLoadingFinish = (event) => {\n    var {onLoad, onLoadEnd} = this.props;\n    onLoad && onLoad(event);\n    onLoadEnd && onLoadEnd(event);\n    this.setState({\n      viewState: WebViewState.IDLE,\n    });\n    this.updateNavigationState(event);\n  };\n\n  onMessage = (event: Event) => {\n    var {onMessage} = this.props;\n    onMessage && onMessage(event);\n  }\n}\n\nvar RCTWebView = requireNativeComponent('RCTWebView', WebView, {\n  nativeOnly: {\n    messagingEnabled: PropTypes.bool,\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    height: 0,\n    flex: 0, // disable 'flex:1' when hiding a View\n  },\n  loadingView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n});\n\nmodule.exports = WebView;\n"]}