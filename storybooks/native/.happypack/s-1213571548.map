{"version":3,"sources":["node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,WAAYC,QAAQ,oBAAR,CAAlB,C;;;;;;;;AAQMC,uB;;;;;AAKJ,kCAAc;AACZ,KAAKC,qBAAL,CAA6B,EAA7B;AACA,KAAKC,oBAAL,CAA4B,IAA5B;AACD,C;;;;;;;;;AASCC,S,CAAmBC,Y,CAAoD;AACvEN;AACEM,aAAaC,UAAb,GAA4B,IAD9B;AAEE,wDAFF;AAGA,GAAI,CAAC,KAAKJ,qBAAL,CAA2BE,SAA3B,CAAL,CAA4C;AAC1C,KAAKF,qBAAL,CAA2BE,SAA3B,EAAwC,EAAxC;AACD;AACD,GAAMG,KAAM,KAAKL,qBAAL,CAA2BE,SAA3B,EAAsCI,MAAlD;AACA,KAAKN,qBAAL,CAA2BE,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;AACAA,aAAaD,SAAb,CAAyBA,SAAzB;AACAC,aAAaE,GAAb,CAAmBA,GAAnB;AACA,MAAOF,aAAP;AACD,C;;;;;;;;AAQsBD,S,CAAoB;AACzC,GAAIA,YAAcM,SAAlB,CAA6B;AAC3B,KAAKR,qBAAL,CAA6B,EAA7B;AACD,CAFD,IAEO;AACL,MAAO,MAAKA,qBAAL,CAA2BE,SAA3B,CAAP;AACD;AACF,C;;;;;;;;AAQkBC,Y,CAAsB;AACvC,GAAMD,WAAYC,aAAaD,SAA/B;AACA,GAAMG,KAAMF,aAAaE,GAAzB;;AAEA,GAAMI,sBAAuB,KAAKT,qBAAL,CAA2BE,SAA3B,CAA7B;AACA,GAAIO,oBAAJ,CAA0B;AACxB,MAAOA,sBAAqBJ,GAArB,CAAP;AACD;AACF,C;;;;;;;;;;;;;;AAcuBH,S,CAAyC;AAChE,MAAO,MAAKF,qBAAL,CAA2BE,SAA3B,CAAP;AACA,C;;;AAGHQ,OAAOC,OAAP,CAAiBZ,uBAAjB,C,0GA9EMA,uB","file":"EventSubscriptionVendor.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventSubscriptionVendor\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EventSubscription from 'EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string, subscription: EventSubscription): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n   return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"]}