{"version":3,"sources":["node_modules/react-native/Libraries/Core/InitializeCore.js"],"names":["global","GLOBAL","undefined","window","defineLazyObjectProperty","require","defineLazyProperty","object","name","getValue","descriptor","Object","getOwnPropertyDescriptor","__DEV__","backupName","toUpperCase","substr","defineProperty","value","enumerable","writable","configurable","console","error","get","polyfillGlobal","process","env","NODE_ENV","__RCTProfileIsProfiling","Systrace","setEnabled","performance","getUserTimingPolyfill","ExceptionsManager","installConsoleErrorReporter","__fbDisableExceptionsManager","handleError","e","isFatal","handleException","ee","log","message","ErrorUtils","setGlobalHandler","_shouldPolyfillCollection","regeneratorRuntime","defineLazyTimer","fetch","Headers","Request","Response","alert","text","navigator","BatchedBridge","registerLazyCallableModule","registerCallableModule","document","JSInspector","registerAgent"],"mappings":"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","file":"InitializeCore.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule InitializeCore\n * @flow\n */\n\n/* eslint-disable strict */\n/* globals window: true */\n\n/**\n * Sets up global variables typical in most JavaScript environments.\n *\n *   1. Global timers (via `setTimeout` etc).\n *   2. Global console object.\n *   3. Hooks for printing stack traces with source maps.\n *\n * Leaves enough room in the environment for implementing your own:\n *\n *   1. Require system.\n *   2. Bridged modules.\n *\n */\n'use strict';\n\nif (global.GLOBAL === undefined) {\n  global.GLOBAL = global;\n}\n\nif (global.window === undefined) {\n  global.window = global;\n}\n\nconst defineLazyObjectProperty = require('defineLazyObjectProperty');\n\n/**\n * Sets an object's property. If a property with the same name exists, this will\n * replace it but maintain its descriptor configuration. The property will be\n * replaced with a lazy getter.\n *\n * In DEV mode the original property value will be preserved as `original[PropertyName]`\n * so that, if necessary, it can be restored. For example, if you want to route\n * network requests through DevTools (to trace them):\n *\n *   global.XMLHttpRequest = global.originalXMLHttpRequest;\n *\n * @see https://github.com/facebook/react-native/issues/934\n */\nfunction defineLazyProperty<T>(\n  object: Object,\n  name: string,\n  getValue: () => T,\n): void {\n  const descriptor = Object.getOwnPropertyDescriptor(object, name);\n  if (__DEV__ && descriptor) {\n    const backupName = `original${name[0].toUpperCase()}${name.substr(1)}`;\n    Object.defineProperty(object, backupName, {\n      ...descriptor,\n      value: object[name],\n    });\n  }\n\n  const {enumerable, writable, configurable} = descriptor || {};\n  if (descriptor && !configurable) {\n    console.error('Failed to set polyfill. ' + name + ' is not configurable.');\n    return;\n  }\n\n  defineLazyObjectProperty(object, name, {\n    get: getValue,\n    enumerable: enumerable !== false,\n    writable: writable !== false,\n  });\n}\n\nfunction polyfillGlobal<T>(name: string, getValue: () => T): void {\n  defineLazyProperty(global, name, getValue);\n}\n\n// Set up process\nglobal.process = global.process || {};\nglobal.process.env = global.process.env || {};\nif (!global.process.env.NODE_ENV) {\n  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';\n}\n\n// Setup the Systrace profiling hooks if necessary\nif (global.__RCTProfileIsProfiling) {\n  const Systrace = require('Systrace');\n  Systrace.setEnabled(true);\n}\n\nif (__DEV__ && global.performance === undefined) {\n  const Systrace = require('Systrace');\n  global.performance = Systrace.getUserTimingPolyfill();\n}\n\n// Set up console\nconst ExceptionsManager = require('ExceptionsManager');\nExceptionsManager.installConsoleErrorReporter();\n\n// Set up error handler\nif (!global.__fbDisableExceptionsManager) {\n  const handleError = (e, isFatal) => {\n    try {\n      ExceptionsManager.handleException(e, isFatal);\n    } catch (ee) {\n      /* eslint-disable no-console-disallow */\n      console.log('Failed to print error: ', ee.message);\n      /* eslint-enable no-console-disallow */\n      throw e;\n    }\n  };\n\n  const ErrorUtils = require('ErrorUtils');\n  ErrorUtils.setGlobalHandler(handleError);\n}\n\n// Set up collections\nconst _shouldPolyfillCollection = require('_shouldPolyfillES6Collection');\nif (_shouldPolyfillCollection('Map')) {\n  polyfillGlobal('Map', () => require('Map'));\n}\nif (_shouldPolyfillCollection('Set')) {\n  polyfillGlobal('Set', () => require('Set'));\n}\n\n// Set up Promise\n// The native Promise implementation throws the following error:\n// ERROR: Event loop not supported.\npolyfillGlobal('Promise', () => require('Promise'));\n\n// Set up regenerator.\npolyfillGlobal('regeneratorRuntime', () => {\n  // The require just sets up the global, so make sure when we first\n  // invoke it the global does not exist\n  delete global.regeneratorRuntime;\n  require('regenerator-runtime/runtime');\n  return global.regeneratorRuntime;\n});\n\n// Set up timers\nconst defineLazyTimer = name => {\n  polyfillGlobal(name, () => require('JSTimers')[name]);\n};\ndefineLazyTimer('setTimeout');\ndefineLazyTimer('setInterval');\ndefineLazyTimer('setImmediate');\ndefineLazyTimer('clearTimeout');\ndefineLazyTimer('clearInterval');\ndefineLazyTimer('clearImmediate');\ndefineLazyTimer('requestAnimationFrame');\ndefineLazyTimer('cancelAnimationFrame');\ndefineLazyTimer('requestIdleCallback');\ndefineLazyTimer('cancelIdleCallback');\n\n// Set up XHR\n// The native XMLHttpRequest in Chrome dev tools is CORS aware and won't\n// let you fetch anything from the internet\npolyfillGlobal('XMLHttpRequest', () => require('XMLHttpRequest'));\npolyfillGlobal('FormData', () => require('FormData'));\n\npolyfillGlobal('fetch', () => require('fetch').fetch);\npolyfillGlobal('Headers', () => require('fetch').Headers);\npolyfillGlobal('Request', () => require('fetch').Request);\npolyfillGlobal('Response', () => require('fetch').Response);\npolyfillGlobal('WebSocket', () => require('WebSocket'));\npolyfillGlobal('Blob', () => require('Blob'));\npolyfillGlobal('URL', () => require('URL'));\n\n// Set up alert\nif (!global.alert) {\n  global.alert = function(text) {\n    // Require Alert on demand. Requiring it too early can lead to issues\n    // with things like Platform not being fully initialized.\n    require('Alert').alert('Alert', '' + text);\n  };\n}\n\n// Set up Geolocation\nlet navigator = global.navigator;\nif (navigator === undefined) {\n  global.navigator = navigator = {};\n}\n\n// see https://github.com/facebook/react-native/issues/10881\ndefineLazyProperty(navigator, 'product', () => 'ReactNative');\ndefineLazyProperty(navigator, 'geolocation', () => require('Geolocation'));\n\n// Just to make sure the JS gets packaged up. Wait until the JS environment has\n// been initialized before requiring them.\nconst BatchedBridge = require('BatchedBridge');\nBatchedBridge.registerLazyCallableModule('Systrace', () => require('Systrace'));\nBatchedBridge.registerLazyCallableModule('JSTimers', () => require('JSTimers'));\nBatchedBridge.registerLazyCallableModule('HeapCapture', () => require('HeapCapture'));\nBatchedBridge.registerLazyCallableModule('SamplingProfiler', () => require('SamplingProfiler'));\nBatchedBridge.registerLazyCallableModule('RCTLog', () => require('RCTLog'));\nBatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', () => require('RCTDeviceEventEmitter'));\nBatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', () => require('RCTNativeAppEventEmitter'));\nBatchedBridge.registerLazyCallableModule('PerformanceLogger', () => require('PerformanceLogger'));\n\n// Set up devtools\nif (__DEV__) {\n  if (!global.__RCTProfileIsProfiling) {\n    BatchedBridge.registerCallableModule('HMRClient', require('HMRClient'));\n\n    // not when debugging in chrome\n    // TODO(t12832058) This check is broken\n    if (!window.document) {\n      require('setupDevtools');\n    }\n\n    // Set up inspector\n    const JSInspector = require('JSInspector');\n    JSInspector.registerAgent(require('NetworkAgent'));\n  }\n}\n"]}