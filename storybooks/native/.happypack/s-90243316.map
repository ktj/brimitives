{"version":3,"sources":["node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.ios.js"],"names":["PropTypes","require","React","StyleSheet","View","ViewPropTypes","requireNativeComponent","MaskedViewIOS","_hasWarnedInvalidRenderMask","props","maskElement","children","otherViewProps","isValidElement","console","warn","absoluteFill","Component","propTypes","element","isRequired","RCTMaskedView","name","displayName","module","exports"],"mappings":";;;;;;;;;;;;AAYA,GAAMA,WAAYC,QAAQ,YAAR,CAAlB;AACA,GAAMC,OAAQD,QAAQ,OAAR,CAAd;AACA,GAAME,YAAaF,QAAQ,YAAR,CAAnB;AACA,GAAMG,MAAOH,QAAQ,MAAR,CAAb;AACA,GAAMI,eAAgBJ,QAAQ,eAAR,CAAtB;AACA,GAAMK,wBAAyBL,QAAQ,wBAAR,CAA/B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDMM,a;;;;;;;;AAQJC,2B,CAA8B,K;;AAErB;AAC8C,KAAKC,KADnD,CACCC,WADD,QACCA,WADD,CACcC,QADd,QACcA,QADd,CAC2BC,cAD3B;;AAGP,GAAI,CAACV,MAAMW,cAAN,CAAqBH,WAArB,CAAL,CAAwC;AACtC,GAAI,CAAC,KAAKF,2BAAV,CAAuC;AACrCM,QAAQC,IAAR;AACE;AACE,gDAFJ;;AAIA,KAAKP,2BAAL,CAAmC,IAAnC;AACD;AACD,MAAO,qBAAC,IAAD,aAAUI,cAAV,mDAA2BD,QAA3B,CAAP;AACD;;AAED;AACE,oBAAC,aAAD,aAAmBC,cAAnB;AACE,oBAAC,IAAD,EAAM,cAAc,MAApB,CAA2B,MAAOT,WAAWa,YAA7C;AACGN,WADH,CADF;;AAIGC,QAJH,CADF;;;AAQD,C,2BAhCyBT,MAAMe,S,SAGzBC,S,aACFb,a,EACHK,YAAaV,UAAUmB,OAAV,CAAkBC,U;;;AA8BnC,GAAMC,eAAgBf,uBAAuB,eAAvB,CAAwC;AAC5DgB,KAAM,eADsD;AAE5DC,YAAa,eAF+C;AAG5DL;AACKb,aADL,CAH4D,CAAxC,CAAtB;;;;AAQAmB,OAAOC,OAAP,CAAiBlB,aAAjB,C,2GA3CMA,a,kLAmCAc,a","file":"MaskedViewIOS.ios.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule MaskedViewIOS\n * @flow\n */\n\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type { ViewProps } from 'ViewPropTypes';\n\ntype Props = ViewProps & {\n  children: any,\n  /**\n   * Should be a React element to be rendered and applied as the\n   * mask for the child element.\n   */\n  maskElement: React.Element<*>,\n};\n\n/**\n * Renders the child view with a mask specified in the `maskElement` prop.\n *\n * ```\n * import React from 'react';\n * import { MaskedView, Text, View } from 'react-native';\n *\n * class MyMaskedView extends React.Component {\n *   render() {\n *     return (\n *       <MaskedView\n *         style={{ flex: 1 }}\n *         maskElement={\n *           <View style={styles.maskContainerStyle}>\n *             <Text style={styles.maskTextStyle}>\n *               Basic Mask\n *             </Text>\n *           </View>\n *         }\n *       >\n *         <View style={{ flex: 1, backgroundColor: 'blue' }} />\n *       </MaskedView>\n *     );\n *   }\n * }\n * ```\n *\n * The above example will render a view with a blue background that fills its\n * parent, and then mask that view with text that says \"Basic Mask\".\n *\n * The alpha channel of the view rendered by the `maskElement` prop determines how\n * much of the view's content and background shows through. Fully or partially\n * opaque pixels allow the underlying content to show through but fully\n * transparent pixels block that content.\n *\n */\nclass MaskedViewIOS extends React.Component {\n  props: Props;\n\n  static propTypes = {\n    ...ViewPropTypes,\n    maskElement: PropTypes.element.isRequired,\n  };\n\n  _hasWarnedInvalidRenderMask = false;\n\n  render() {\n    const { maskElement, children, ...otherViewProps } = this.props;\n\n    if (!React.isValidElement(maskElement)) {\n      if (!this._hasWarnedInvalidRenderMask) {\n        console.warn(\n          'MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' +\n            'Expected a React Element. No mask will render.'\n        );\n        this._hasWarnedInvalidRenderMask = true;\n      }\n      return <View {...otherViewProps}>{children}</View>;\n    }\n\n    return (\n      <RCTMaskedView {...otherViewProps}>\n        <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n          {maskElement}\n        </View>\n        {children}\n      </RCTMaskedView>\n    );\n  }\n}\n\nconst RCTMaskedView = requireNativeComponent('RCTMaskedView', {\n  name: 'RCTMaskedView',\n  displayName: 'RCTMaskedView',\n  propTypes: {\n    ...ViewPropTypes,\n  },\n});\n\nmodule.exports = MaskedViewIOS;\n"]}