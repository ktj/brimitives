{"version":3,"sources":["node_modules/react-native/Libraries/Blob/Blob.js"],"names":["invariant","require","uuid","BlobModule","Blob","props","Object","create","prototype","parts","options","blobId","size","forEach","part","createFromParts","offset","start","end","release","module","exports"],"mappings":";;;;;;;;;;;;AAYA,a;;AAEA,GAAMA,WAAYC,QAAQ,oBAAR,CAAlB;AACA,GAAMC,MAAOD,QAAQ,MAAR,CAAb,C;;AAEuBA,QAAQ,eAAR,C,CAAfE,U,UAAAA,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCFC,I;;;;;;;;;;;;;;;;;;;;;;;;AAwBUC,K,CAAwB;AACpC,MAAO,UAAcC,OAAOC,MAAP,CAAcH,KAAKI,SAAnB,CAAd,CAA6CH,KAA7C,CAAP;AACD,C;;;;;;;AAOD,cAAYI,KAAZ,CAAgCC,OAAhC,CAA8C;AAC5C,GAAMC,QAAST,MAAf;AACA,GAAIU,MAAO,CAAX;AACAH,MAAMI,OAAN,CAAc,SAACC,IAAD,CAAU;AACtBd,UAAUc,eAAgBV,KAA1B,CAAgC,mDAAhC;AACAQ,MAAQE,KAAKF,IAAb;AACD,CAHD;AAIAT,WAAWY,eAAX,CAA2BN,KAA3B,CAAkCE,MAAlC;AACA,MAAOP,MAAKG,MAAL,CAAY;AACjBI,aADiB;AAEjBK,OAAQ,CAFS;AAGjBJ,SAHiB,CAAZ,CAAP;;AAKD,C;;;;;;;AAOKK,K,CAAgBC,G,CAAoB;AACxC,GAAIF,QAAS,KAAKA,MAAlB;AACA,GAAIJ,MAAO,KAAKA,IAAhB;AACA,GAAI,MAAOK,MAAP,GAAiB,QAArB,CAA+B;AAC7B,GAAIA,MAAQL,IAAZ,CAAkB;AAChBK,MAAQL,IAAR;AACD;AACDI,QAAUC,KAAV;AACAL,MAAQK,KAAR;;AAEA,GAAI,MAAOC,IAAP,GAAe,QAAnB,CAA6B;AAC3B,GAAIA,IAAM,CAAV,CAAa;AACXA,IAAM,KAAKN,IAAL,CAAYM,GAAlB;AACD;AACDN,KAAOM,IAAMD,KAAb;AACD;AACF;AACD,MAAOb,MAAKG,MAAL,CAAY;AACjBI,OAAQ,KAAKA,MADI;AAEjBK,aAFiB;AAGjBJ,SAHiB,CAAZ,CAAP;;AAKD,C;;;;;;;;;;;;;;AAcO;AACNT,WAAWgB,OAAX,CAAmB,KAAKR,MAAxB;AACD,C;;;AAGHS,OAAOC,OAAP,CAAiBjB,IAAjB,C,0GA9FMA,I","file":"Blob.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Blob\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\nconst uuid = require('uuid');\n\nconst { BlobModule } = require('NativeModules');\n\nimport type { BlobProps } from 'BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  size: number;\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  type: string;\n\n  /*\n   * Unique id to identify the blob on native side (non-standard)\n   */\n  blobId: string;\n  /*\n   * Offset to indicate part of blob, used when sliced (non-standard)\n   */\n  offset: number;\n\n  /**\n   * Construct blob instance from blob data from native.\n   * Used internally by modules like XHR, WebSocket, etc.\n   */\n  static create(props: BlobProps): Blob {\n    return Object.assign(Object.create(Blob.prototype), props);\n  }\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob>, options: any) {\n    const blobId = uuid();\n    let size = 0;\n    parts.forEach((part) => {\n      invariant(part instanceof Blob, 'Can currently only create a Blob from other Blobs');\n      size += part.size;\n    });\n    BlobModule.createFromParts(parts, blobId);\n    return Blob.create({\n      blobId,\n      offset: 0,\n      size,\n    });\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  slice(start?: number, end?: number): Blob {\n    let offset = this.offset;\n    let size = this.size;\n    if (typeof start === 'number') {\n      if (start > size) {\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          end = this.size + end;\n        }\n        size = end - start;\n      }\n    }\n    return Blob.create({\n      blobId: this.blobId,\n      offset,\n      size,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    BlobModule.release(this.blobId);\n  }\n}\n\nmodule.exports = Blob;\n"]}