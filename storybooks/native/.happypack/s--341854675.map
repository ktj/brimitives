{"version":3,"sources":["node_modules/react-native/Libraries/BugReporting/BugReporting.js"],"names":["RCTDeviceEventEmitter","require","Map","infoLog","defaultExtras","BugReporting","addFileSource","_subscription","addListener","collectExtraData","key","callback","_addSource","_extraSources","_fileSources","source","_maybeInit","has","console","warn","set","remove","delete","extraData","fileData","BugReportingNativeModule","setExtraData","extras","files","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,uBAAwBC,QAAQ,uBAAR,CAA9B;AACA,GAAMC,KAAMD,QAAQ,KAAR,CAAZ;AACA,GAAME,SAAUF,QAAQ,SAAR,CAAhB;;;;;;;;AAQA,QAASG,cAAT,EAAyB;AACvBC,aAAaC,aAAb,CAA2B,qBAA3B,CAAkD,iBAAML,SAAQ,eAAR,GAAN,EAAlD;AACD,C;;;;;;;;AAQKI,Y;;;;;AAKgB;AAClB,GAAI,CAACA,aAAaE,aAAlB,CAAiC;AAC/BF,aAAaE,aAAb,CAA6BP;AACxBQ,WADwB,CACZ,qBADY,CACWH,aAAaI,gBADxB,CAC0C,IAD1C,CAA7B;AAEAL;AACD;AACF,C;;;;;;;;;;AAUgBM,G,CAAaC,Q,CAAgD;AAC5E,MAAO,MAAKC,UAAL,CAAgBF,GAAhB,CAAqBC,QAArB,CAA+BN,aAAaQ,aAA5C,CAAP;AACD,C;;;;;;;;;;AAUoBH,G,CAAaC,Q,CAAgD;AAChF,MAAO,MAAKC,UAAL,CAAgBF,GAAhB,CAAqBC,QAArB,CAA+BN,aAAaS,YAA5C,CAAP;AACD,C;;AAEiBJ,G,CAAaC,Q,CAA0BI,M,CAA2D;AAClHV,aAAaW,UAAb;AACA,GAAID,OAAOE,GAAP,CAAWP,GAAX,CAAJ,CAAqB;AACnBQ,QAAQC,IAAR,2DAAsET,GAAtE;AACD;AACDK,OAAOK,GAAP,CAAWV,GAAX,CAAgBC,QAAhB;AACA,MAAO,CAACU,OAAQ,iBAAM,CAAEN,OAAOO,MAAP,CAAcZ,GAAd,EAAqB,CAAtC,CAAP;AACD,C;;;;;;;;AAQoC;AACnC,GAAMa,WAAuB,EAA7B;AACA,kBAA8BlB,aAAaQ,aAA3C,4IAA0D,0LAA9CH,KAA8C,aAAzCC,SAAyC;AACxDY,UAAUb,IAAV,EAAiBC,UAAjB;AACD;AACD,GAAMa,UAAsB,EAA5B;AACA,mBAA8BnB,aAAaS,YAA3C,mJAAyD,qMAA7CJ,MAA6C,aAAxCC,UAAwC;AACvDa,SAASd,KAAT,EAAgBC,WAAhB;AACD;AACDR,QAAQ,yBAAR,CAAmCoB,SAAnC;AACA,GAAME,0BAA2BxB,QAAQ,eAAR,EAAyBI,YAA1D;AACAoB;AACEA,yBAAyBC,YAD3B;AAEED,yBAAyBC,YAAzB,CAAsCH,SAAtC,CAAiDC,QAAjD,CAFF;;AAIA,MAAO,CAAEG,OAAQJ,SAAV,CAAqBK,MAAOJ,QAA5B,CAAP;AACD,C,mCAnEMX,a,CAA6C,GAAIX,IAAJ,E,QAC7CY,Y,CAA4C,GAAIZ,IAAJ,E,QAC5CK,a,CAAsC,I;;;AAoE/CsB,OAAOC,OAAP,CAAiBzB,YAAjB,C,2GAjFSD,a,oKAUHC,Y","file":"BugReporting.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BugReporting\n * @flow\n */\n'use strict';\n\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\nconst Map = require('Map');\nconst infoLog = require('infoLog');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\ntype ExtraData = { [key: string]: string };\ntype SourceCallback = () => string;\ntype DebugData = { extras: ExtraData, files: ExtraData };\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () => require('dumpReactTree')());\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EmitterSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter\n          .addListener('collectBugExtraData', BugReporting.collectExtraData, null);\n      defaultExtras();\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(key: string, callback: SourceCallback): {remove: () => void} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(key: string, callback: SourceCallback): {remove: () => void} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(key: string, callback: SourceCallback, source: Map<string, SourceCallback>): {remove: () => void} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(`BugReporting.add* called multiple times for same key '${key}'`);\n    }\n    source.set(key, callback);\n    return {remove: () => { source.delete(key); }};\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n    infoLog('BugReporting extraData:', extraData);\n    const BugReportingNativeModule = require('NativeModules').BugReporting;\n    BugReportingNativeModule &&\n      BugReportingNativeModule.setExtraData &&\n      BugReportingNativeModule.setExtraData(extraData, fileData);\n\n    return { extras: extraData, files: fileData };\n  }\n}\n\nmodule.exports = BugReporting;\n"]}