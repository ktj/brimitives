{"version":3,"sources":["node_modules/react-native/Libraries/Lists/FlatList.js"],"names":["MetroListView","require","React","View","VirtualizedList","invariant","defaultProps","numColumns","FlatList","_hasWarnedLegacy","_captureRef","_getItem","_getItemCount","_keyExtractor","_onViewableItemsChanged","_renderItem","params","_listRef","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollableNode","props","setNativeProps","_checkProps","nextProps","ref","getItem","getItemCount","horizontal","legacyImplementation","columnWrapperStyle","console","warn","data","index","ret","kk","item","push","Math","ceil","length","items","keyExtractor","Array","isArray","map","it","join","arr","v","forEach","ii","key","info","onViewableItemsChanged","changed","viewableItems","_pushMultiColumnViewable","renderItem","flexDirection","element","separators","cloneElement","PureComponent","module","exports"],"mappings":"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","file":"FlatList.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FlatList\n * @flow\n * @format\n */\n'use strict';\n\nconst MetroListView = require('MetroListView'); // Used as a fallback legacy option\nconst React = require('React');\nconst View = require('View');\nconst VirtualizedList = require('VirtualizedList');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {StyleObj} from 'StyleSheetTypes';\nimport type {ViewabilityConfig, ViewToken} from 'ViewabilityHelper';\nimport type {Props as VirtualizedListProps} from 'VirtualizedList';\n\ntype RequiredProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem: (info: {\n    item: ItemT,\n    index: number,\n    separators: {\n      highlight: () => void,\n      unhighlight: () => void,\n      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n    },\n  }) => ?React.Element<any>,\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?ReactClass<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: StyleObj,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  legacyImplementation?: ?boolean,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n};\ntype Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n};\ntype DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the inner `SomeOtherWidget` has no such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         return (\n *           <SomeOtherWidget\n *             {...this.props}\n *             onPress={this._onPress}\n *           />\n *         )\n *       }\n *     }\n *\n *     class MyList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherets [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<\n  DefaultProps,\n  Props<ItemT>,\n  void,\n> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    this._listRef.scrollToEnd(params);\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    this._listRef.scrollToIndex(params);\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    this._listRef.scrollToItem(params);\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    this._listRef.scrollToOffset(params);\n  }\n\n  /**\n   * Tells the list an interaction has occured, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    this._listRef.recordInteraction();\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    this._listRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: Object) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  componentWillMount() {\n    this._checkProps(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props<ItemT>) {\n    invariant(\n      nextProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    this._checkProps(nextProps);\n  }\n\n  _hasWarnedLegacy = false;\n  _listRef: VirtualizedList;\n\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      legacyImplementation,\n      numColumns,\n      columnWrapperStyle,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    if (legacyImplementation) {\n      invariant(\n        numColumns === 1,\n        'Legacy list does not support multiple columns.',\n      );\n      // Warning: may not have full feature parity and is meant more for debugging and performance\n      // comparison.\n      if (!this._hasWarnedLegacy) {\n        console.warn(\n          'FlatList: Using legacyImplementation - some features not supported and performance ' +\n            'may suffer',\n        );\n        this._hasWarnedLegacy = true;\n      }\n    }\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        item && ret.push(item);\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _onViewableItemsChanged = info => {\n    const {numColumns, onViewableItemsChanged} = this.props;\n    if (!onViewableItemsChanged) {\n      return;\n    }\n    if (numColumns > 1) {\n      const changed = [];\n      const viewableItems = [];\n      info.viewableItems.forEach(v =>\n        this._pushMultiColumnViewable(viewableItems, v),\n      );\n      info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n      onViewableItemsChanged({viewableItems, changed});\n    } else {\n      onViewableItemsChanged(info);\n    }\n  };\n\n  _renderItem = (info: Object) => {\n    const {renderItem, numColumns, columnWrapperStyle} = this.props;\n    if (numColumns > 1) {\n      const {item, index} = info;\n      invariant(\n        Array.isArray(item),\n        'Expected array of items with numColumns > 1',\n      );\n      return (\n        <View style={[{flexDirection: 'row'}, columnWrapperStyle]}>\n          {item.map((it, kk) => {\n            const element = renderItem({\n              item: it,\n              index: index * numColumns + kk,\n              separators: info.separators,\n            });\n            return element && React.cloneElement(element, {key: kk});\n          })}\n        </View>\n      );\n    } else {\n      return renderItem(info);\n    }\n  };\n\n  render() {\n    if (this.props.legacyImplementation) {\n      return (\n        <MetroListView\n          {...this.props}\n          items={this.props.data}\n          ref={this._captureRef}\n        />\n      );\n    } else {\n      return (\n        <VirtualizedList\n          {...this.props}\n          renderItem={this._renderItem}\n          getItem={this._getItem}\n          getItemCount={this._getItemCount}\n          keyExtractor={this._keyExtractor}\n          ref={this._captureRef}\n          onViewableItemsChanged={\n            this.props.onViewableItemsChanged && this._onViewableItemsChanged\n          }\n        />\n      );\n    }\n  }\n}\n\nmodule.exports = FlatList;\n"]}