{"version":3,"sources":["node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidDrawableFolderName","fileName","getAndroidResourceIdentifier","serverUrl","bundlePath","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetPathInBundle","fromSource","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","file":"AssetSourceResolver.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AssetSourceResolver\n * @flow\n */\n'use strict';\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean,\n  width: ?number,\n  height: ?number,\n  uri: string,\n  scale: number,\n};\n\nimport type { PackagerAsset } from 'AssetRegistry';\n\nconst PixelRatio = require('PixelRatio');\nconst Platform = require('Platform');\n\nconst assetPathUtils = require('../../local-cli/bundle/assetPathUtils');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var drawbleFolder = assetPathUtils.getAndroidDrawableFolderName(asset, scale);\n  var fileName =  assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n\n  serverUrl: ?string;\n  // where the bundle is being run from\n  bundlePath: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, bundlePath: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.bundlePath = bundlePath;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!this.bundlePath;\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem() ?\n        this.drawableFolderInBundle() :\n        this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetPathInBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl + getScaledAssetPath(this.asset) +\n      '?platform=' + Platform.OS + '&hash=' + this.asset.hash\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. '/sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPathInBundle(): ResolvedAssetSource {\n    const path = this.bundlePath || '';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(Platform.OS === 'android', 'resource identifiers work on Android');\n    return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.bundlePath || '';\n    return this.fromSource(\n      'file://' + path + getAssetPathInDrawableFolder(this.asset)\n    );\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (var i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n\n}\n\n module.exports = AssetSourceResolver;\n"]}