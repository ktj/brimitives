{"version":3,"sources":["node_modules/haul/src/utils/polyfillEnvironment.js"],"names":["require","global","self"],"mappings":";;;;;;;;;;AAUAA,QAAQ,mCAAR,EAA6CC,MAA7C;AACAD,QAAQ,uCAAR;AACAA,QAAQ,sCAAR;AACAA,QAAQ,gDAAR;AACAA,QAAQ,+CAAR;AACAA,QAAQ,qCAAR;AACAA,QAAQ,sCAAR;AACAA,QAAQ,sCAAR;AACAA,QAAQ,wCAAR;;;;;;;;;;;;AAYA,GAAI,CAACC,OAAOC,IAAZ,CAAkB;AAChBD,OAAOC,IAAP,CAAcD,MAAd;AACD;;AAEDD,QAAQ,gBAAR;;AAEAA,QAAQ,qCAAR,E","file":"polyfillEnvironment.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright 2017-present, Callstack.\n * All rights reserved.\n *\n * polyfillEnvironment.js\n *\n * This file is loaded as a part of user bundle\n */\n\n/* eslint-disable import/no-extraneous-dependencies */\nrequire('../../vendor/polyfills/console.js')(global);\nrequire('../../vendor/polyfills/error-guard.js');\nrequire('../../vendor/polyfills/Number.es6.js');\nrequire('../../vendor/polyfills/String.prototype.es6.js');\nrequire('../../vendor/polyfills/Array.prototype.es6.js');\nrequire('../../vendor/polyfills/Array.es6.js');\nrequire('../../vendor/polyfills/Object.es6.js');\nrequire('../../vendor/polyfills/Object.es7.js');\nrequire('../../vendor/polyfills/babelHelpers.js');\n\n// HACK:\n//   This is horrible.  I know.  But this hack seems to be needed due to the way\n//   React Native lazy evaluates `fetch` within `InitializeCore`.  This was fixed\n//   in 34-ish, but seems to be back again.  I hope I'm wrong because I lost sleep\n//   on this one.\n//\n//   Without this in place, global.fetch will be undefined and cause the symbolicate\n//   check to fail.  This must be something that the packager is doing that haul isn't.\n//   I also so people complaining about this in Jest as well.\n//\nif (!global.self) {\n  global.self = global; /* eslint-disable-line */\n}\n\nrequire('InitializeCore');\n\nrequire('../hot/client/importScriptsPolyfill');\n"]}