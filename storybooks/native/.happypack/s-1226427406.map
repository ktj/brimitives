{"version":3,"sources":["node_modules/react-native/Libraries/Lists/FillRateHelper.js"],"names":["performanceNow","require","warning","Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","callback","push","remove","filter","listener","sampleRate","minSampleCount","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","console","debug","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","now","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush","module","exports"],"mappings":";;;;;;;;;;;;;;;AAeA,a;;AAEA,GAAMA,gBAAiBC,QAAQ,yBAAR,CAAvB;AACA,GAAMC,SAAUD,QAAQ,kBAAR,CAAhB,C;;;;AAIME,I;AACJC,e,CAAkB,C;AAClBC,Y,CAAe,C;AACfC,mB,CAAsB,C;AACtBC,kB,CAAqB,C;AACrBC,e,CAAkB,C;AAClBC,Y,CAAe,C;AACfC,c,CAAiB,C;AACjBC,e,CAAkB,C;AAClBC,gB,CAAmB,C;AACnBC,Y,CAAe,C;;;;;AAKjB,GAAMC,OAAQ,KAAd;;AAEA,GAAIC,YAAoC,EAAxC;AACA,GAAIC,iBAAkB,EAAtB;AACA,GAAIC,aAAcH,MAAQ,CAAR,CAAY,IAA9B,C;;;;;;;;;;AAUMI,c;;;;;;;;AAQeC,Q,CAAsD;AACvEjB;AACEe,cAAgB,IADlB;AAEE,2DAFF;;AAIAF,WAAWK,IAAX,CAAgBD,QAAhB;AACA,MAAO;AACLE,OAAQ,iBAAM;AACZN,WAAaA,WAAWO,MAAX,CAAkB,yBAAYH,YAAaI,QAAzB,EAAlB,CAAb;AACD,CAHI,CAAP;;AAKD,C;;AAEoBC,U,CAAoB;AACvCP,YAAcO,UAAd;AACD,C;;AAEwBC,c,CAAwB;AAC/CT,gBAAkBS,cAAlB;AACD,C;;AAED,wBAAYC,eAAZ,CAA+D,2CA5B/DC,kBA4B+D,CA5BzC,IA4ByC,MA3B/DC,QA2B+D,CA3BpD,KA2BoD,MAzB/DC,KAyB+D,CAzBvD,GAAI1B,KAAJ,EAyBuD,MAxB/D2B,qBAwB+D,CAxBtC,IAwBsC,MAvB/DC,iBAuB+D,CAvB1C,IAuB0C;AAC7D,KAAKC,gBAAL,CAAwBN,eAAxB;AACA,KAAKE,QAAL,CAAgB,CAACX,aAAe,CAAhB,EAAqBgB,KAAKC,MAAL,EAArC;AACA,KAAKC,UAAL;AACD,C;;AAEU;AACT,GAAI,KAAKP,QAAL,EAAiB,KAAKG,iBAAL,EAA0B,IAA/C,CAAqD;AACnDjB,OAASsB,QAAQC,KAAR,CAAc,0BAAd,CAAT;AACA,KAAKN,iBAAL,CAAyB/B,gBAAzB;AACD;AACF,C;;AAEoB;AACnB,GAAI,CAAC,KAAK4B,QAAV,CAAoB;AAClB;AACD;AACD,GAAMU,OAAQ,KAAKP,iBAAnB;AACA,GAAIO,OAAS,IAAb,CAAmB;AACjBxB;AACEsB,QAAQC,KAAR,CAAc,uDAAd,CADF;AAEA;AACD;AACD,GAAI,KAAKR,KAAL,CAAWhB,YAAX,CAA0BG,eAA9B,CAA+C;;AAE7C,KAAKmB,UAAL;AACA;AACD;AACD,GAAMvB,kBAAmBZ,iBAAmBsC,KAA5C;AACA,GAAMC;AACD,KAAKV,KADJ;AAEJjB,iCAFI,EAAN;;AAIA,GAAIE,KAAJ,CAAW;AACT,GAAM0B,SAAU;AACdC,cAAe,KAAKZ,KAAL,CAAWpB,YAAX,CAA0B,KAAKoB,KAAL,CAAWnB,cADtC;AAEdgC,UAAW,KAAKb,KAAL,CAAWlB,eAAX,EAA8BC,iBAAmB,IAAjD,CAFG;AAGd+B;AACE,KAAKd,KAAL,CAAWvB,mBAAX,CAAiC,KAAKuB,KAAL,CAAWzB,eAJhC;AAKdwC;AACE,KAAKf,KAAL,CAAWzB,eAAX,EAA8BQ,iBAAmB,IAAnB,CAA0B,EAAxD,CANY;AAOdiC,oBAAqB,KAAKhB,KAAL,CAAWxB,YAAX,CAA0BO,gBAPjC;AAQdkC;AACE,KAAKjB,KAAL,CAAWtB,kBAAX,EAAiCK,iBAAmB,IAAnB,CAA0B,EAA3D,CATY;AAUdmC,uBAAwB,KAAKlB,KAAL,CAAWrB,eAAX,CAA6BI,gBAVvC,CAAhB;;AAYA,IAAK,GAAMoC,IAAX,GAAkBR,QAAlB,CAA2B;AACzBA,QAAQQ,GAAR,EAAef,KAAKgB,KAAL,CAAW,KAAOT,QAAQQ,GAAR,CAAlB,EAAkC,IAAjD;AACD;AACDZ,QAAQC,KAAR,CAAc,qCAAd,CAAqD,CAACG,eAAD,CAAUD,SAAV,CAArD;AACD;AACDxB,WAAWmC,OAAX,CAAmB,yBAAY3B,UAASgB,IAAT,CAAZ,EAAnB;AACA,KAAKJ,UAAL;AACD,C;;;AAGCgB,K;;;;;AAKAC,K;;;;AAIAC,a;;;;;;AAMQ;AACR;AACE,CAAC,KAAKzB,QAAN;AACAuB,MAAMG,YAAN,CAAmBH,MAAMI,IAAzB,IAAmC,CADnC;AAEA,KAAKxB,iBAAL,EAA0B,IAH5B;AAIE;AACA,MAAO,EAAP;AACD,CAPO;AAQDyB,OARC,CAQ2CH,aAR3C,CAQDG,OARC,CAQQC,MARR,CAQ2CJ,aAR3C,CAQQI,MARR,CAQgBC,QARhB,CAQ2CL,aAR3C,CAQgBK,QARhB,CAQ0BC,aAR1B,CAQ2CN,aAR3C,CAQ0BM,aAR1B;;;;AAYR,KAAK9B,KAAL,CAAWhB,YAAX;AACA,KAAKgB,KAAL,CAAWnB,cAAX,EAA6BuB,KAAKgB,KAAL,CAAWU,aAAX,CAA7B;AACA,KAAK9B,KAAL,CAAWlB,eAAX,EAA8BsB,KAAKgB,KAAL,CAAWhB,KAAK2B,GAAL,CAASJ,OAAT,CAAX,CAA9B;AACA,GAAMK,aAAc5B,KAAKgB,KAAL,CAAWhB,KAAK2B,GAAL,CAASF,QAAT,EAAqB,IAAhC,CAApB;;;AAGA,GAAMI,KAAM9D,gBAAZ;AACA,GAAI,KAAK2B,kBAAL,EAA2B,IAA/B,CAAqC;AACnC,KAAKE,KAAL,CAAWxB,YAAX,EAA2ByD,IAAM,KAAKnC,kBAAtC;AACD;AACD,KAAKA,kBAAL,CAA0B,IAA1B;AACA,GAAI,KAAKG,qBAAL,EAA8B,IAAlC,CAAwC;AACtC,KAAKD,KAAL,CAAWrB,eAAX,EAA8BsD,IAAM,KAAKhC,qBAAzC;AACD;AACD,KAAKA,qBAAL,CAA6B,IAA7B;;AAEA,GAAIiC,UAAW,CAAf;AACA,GAAIC,OAAQZ,MAAMY,KAAlB;AACA,GAAIC,YAAa,KAAKjC,gBAAL,CAAsBgC,KAAtB,CAAjB;AACA,MAAOA,OAASZ,MAAMc,IAAf,GAAwB,CAACD,UAAD,EAAe,CAACA,WAAWE,QAAnD,CAAP,CAAqE;AACnEF,WAAa,KAAKjC,gBAAL,CAAsBgC,KAAtB,CAAb;AACAA;AACD;;;AAGD,GAAIC,YAAcD,MAAQ,CAA1B,CAA6B;AAC3BD,SAAW9B,KAAKmC,GAAL;AACTT,aADS;AAET1B,KAAKoC,GAAL,CAAS,CAAT,CAAYJ,WAAWR,MAAX,CAAoBA,MAAhC,CAFS,CAAX;;AAID;AACD,GAAIa,aAAc,CAAlB;AACA,GAAIJ,MAAOd,MAAMc,IAAjB;AACA,GAAIK,WAAY,KAAKvC,gBAAL,CAAsBkC,IAAtB,CAAhB;AACA,MAAOA,MAAQd,MAAMY,KAAd,GAAwB,CAACO,SAAD,EAAc,CAACA,UAAUJ,QAAjD,CAAP,CAAmE;AACjEI,UAAY,KAAKvC,gBAAL,CAAsBkC,IAAtB,CAAZ;AACAA;AACD;;;AAGD,GAAIK,WAAaL,KAAOf,MAAMG,YAAN,CAAmBH,MAAMI,IAAzB,EAAiC,CAAzD,CAA4D;AAC1D,GAAMiB,YAAaD,UAAUd,MAAV,CAAmBc,UAAUE,MAAhD;AACAH,YAAcrC,KAAKmC,GAAL;AACZT,aADY;AAEZ1B,KAAKoC,GAAL,CAAS,CAAT,CAAYZ,OAASE,aAAT,CAAyBa,UAArC,CAFY,CAAd;;AAID;AACD,GAAM/D,cAAewB,KAAKgB,KAAL,CAAWc,SAAWO,WAAtB,CAArB;AACA,GAAMI,WAAYjE,aAAekD,aAAjC;AACA,GAAIe,UAAY,CAAhB,CAAmB;AACjB,KAAK/C,kBAAL,CAA0BmC,GAA1B;AACA,KAAKjC,KAAL,CAAWvB,mBAAX,EAAkCuD,WAAlC;AACA,KAAKhC,KAAL,CAAWzB,eAAX;AACA,KAAKyB,KAAL,CAAWpB,YAAX,EAA2BA,YAA3B;AACA,GAAIiE,UAAY,GAAhB,CAAqB;AACnB,KAAK5C,qBAAL,CAA6BgC,GAA7B;AACA,KAAKjC,KAAL,CAAWtB,kBAAX;AACD;AACF,CATD,IASO,IAAIsD,YAAc,IAAd,EAAsB5B,KAAK2B,GAAL,CAASJ,OAAT,EAAoB,CAA9C,CAAiD;AACtD,KAAKmB,kBAAL;AACD;AACD,MAAOD,UAAP;AACD,C;;AAEkB;AACjB,MAAO,MAAK9C,QAAZ;AACD,C;;AAEY;AACX,KAAKD,kBAAL,CAA0B,IAA1B;AACA,KAAKE,KAAL,CAAa,GAAI1B,KAAJ,EAAb;AACA,KAAK2B,qBAAL,CAA6B,IAA7B;AACA,KAAKC,iBAAL,CAAyB,IAAzB;AACD,C;;;AAGH6C,OAAOC,OAAP,CAAiB3D,cAAjB,C,0GAzNMf,I,sJAeAW,K,uJAEFC,U,4JACAC,e,iKACAC,W,6JAUEC,c","file":"FillRateHelper.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FillRateHelper\n * @flow\n * @format\n */\n\n/* eslint-disable no-console-disallow */\n\n'use strict';\n\nconst performanceNow = require('fbjs/lib/performanceNow');\nconst warning = require('fbjs/lib/warning');\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count = 0;\n  any_blank_ms = 0;\n  any_blank_speed_sum = 0;\n  mostly_blank_count = 0;\n  mostly_blank_ms = 0;\n  pixels_blank = 0;\n  pixels_sampled = 0;\n  pixels_scrolled = 0;\n  total_time_spent = 0;\n  sample_count = 0;\n}\n\ntype FrameMetrics = {inLayout?: boolean, length: number, offset: number};\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime = (null: ?number);\n  _enabled = false;\n  _getFrameMetrics: (index: number) => ?FrameMetrics;\n  _info = new Info();\n  _mostlyBlankStartTime = (null: ?number);\n  _samplesStartTime = (null: ?number);\n\n  static addListener(callback: FillRateInfo => void): {remove: () => void} {\n    warning(\n      _sampleRate !== null,\n      'Call `FillRateHelper.setSampleRate` before `addListener`.',\n    );\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics: (index: number) => ?FrameMetrics) {\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = performanceNow();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = performanceNow() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      data: Array<any>,\n      getItemCount: (data: Array<any>) => number,\n      initialNumToRender: number,\n    },\n    state: {\n      first: number,\n      last: number,\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = performanceNow();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = state.first;\n    let firstFrame = this._getFrameMetrics(first);\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = state.last;\n    let lastFrame = this._getFrameMetrics(last);\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"]}