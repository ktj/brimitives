{"version":3,"sources":["node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js"],"names":["ListView","require","PropTypes","React","SwipeableListViewDataSource","SwipeableRow","SwipeableListView","getRowData","data","sectionID","rowID","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","props","context","_listViewRef","_shouldBounceFirstRowOnMount","_onScroll","_renderRow","bounceFirstRowOnMount","state","dataSource","nextProps","getDataSource","setState","ref","e","getOpenRowID","setOpenRowID","onScroll","value","setNativeProps","scrollEnabled","getScrollResponder","rowData","maxSwipeDistance","slideoutView","renderQuickActions","renderRow","shouldBounceOnMount","getFirstRowID","id","_getMaxSwipeDistance","_onOpen","_onClose","_setListViewScrollable","Component","propTypes","bool","isRequired","instanceOf","oneOfType","number","func","defaultProps","module","exports"],"mappings":"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","file":"SwipeableListView.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SwipeableListView\n * @flow\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst SwipeableListViewDataSource = require('SwipeableListViewDataSource');\nconst SwipeableRow = require('SwipeableRow');\n\ntype DefaultProps = {\n  bounceFirstRowOnMount: boolean,\n  renderQuickActions: Function,\n};\n\ntype Props = {\n  bounceFirstRowOnMount: boolean,\n  dataSource: SwipeableListViewDataSource,\n  maxSwipeDistance: number | (rowData: any, sectionID: string, rowID: string) => number,\n  onScroll?: ?Function,\n  renderRow: Function,\n  renderQuickActions: Function,\n};\n\ntype State = {\n  dataSource: Object,\n};\n\n/**\n * A container component that renders multiple SwipeableRow's in a ListView\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `ListView`, so use it as if it were a ListView, but\n * with extra props, i.e.\n *\n * let ds = SwipeableListView.getNewDataSource();\n * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n * // ..\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - More to come\n */\nclass SwipeableListView extends React.Component<DefaultProps, Props, State> {\n  props: Props;\n  state: State;\n\n  _listViewRef: ?React.Element<any> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static getNewDataSource(): Object {\n    return new SwipeableListViewDataSource({\n      getRowData: (data, sectionID, rowID) => data[sectionID][rowID],\n      getSectionHeaderData: (data, sectionID) => data[sectionID],\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n  }\n\n  static propTypes = {\n    /**\n     * To alert the user that swiping is possible, the first row can bounce\n     * on component mount.\n     */\n    bounceFirstRowOnMount: PropTypes.bool.isRequired,\n    /**\n     * Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n     * then use it just like you would a normal ListView data source\n     */\n    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,\n    // Maximum distance to open to after a swipe\n    maxSwipeDistance: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.func,\n    ]).isRequired,\n    // Callback method to render the swipeable view\n    renderRow: PropTypes.func.isRequired,\n    // Callback method to render the view that will be unveiled on swipe\n    renderQuickActions: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    bounceFirstRowOnMount: false,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props, context: any): void {\n    super(props, context);\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n    this.state = {\n      dataSource: this.props.dataSource,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props): void {\n    if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {\n      this.setState({\n        dataSource: nextProps.dataSource,\n      });\n    }\n  }\n\n  render(): React.Element<any> {\n    return (\n      <ListView\n        {...this.props}\n        ref={(ref) => {\n          this._listViewRef = ref;\n        }}\n        dataSource={this.state.dataSource.getDataSource()}\n        onScroll={this._onScroll}\n        renderRow={this._renderRow}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.props.dataSource.getOpenRowID()) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(null),\n      });\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  }\n\n  /**\n   * This is a work-around to lock vertical `ListView` scrolling on iOS and\n   * mimic Android behaviour. Locking vertical scrolling when horizontal\n   * scrolling is active allows us to significantly improve framerates\n   * (from high 20s to almost consistently 60 fps)\n   */\n  _setListViewScrollable(value: boolean): void {\n    if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  // Passing through ListView's getScrollResponder() function\n  getScrollResponder(): ?Object {\n    if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {\n      return this._listViewRef.getScrollResponder();\n    }\n  }\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(rowData: Object, sectionID: string, rowID: string): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _renderRow = (rowData: Object, sectionID: string, rowID: string): React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(rowData, sectionID, rowID);\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderRow(rowData, sectionID, rowID);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = rowID === this.props.dataSource.getFirstRowID();\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={rowData.id === this.props.dataSource.getOpenRowID()}\n        maxSwipeDistance={this._getMaxSwipeDistance(rowData, sectionID, rowID)}\n        key={rowID}\n        onOpen={() => this._onOpen(rowData.id)}\n        onClose={() => this._onClose(rowData.id)}\n        onSwipeEnd={() => this._setListViewScrollable(true)}\n        onSwipeStart={() => this._setListViewScrollable(false)}\n        shouldBounceOnMount={shouldBounceOnMount}>\n        {this.props.renderRow(rowData, sectionID, rowID)}\n      </SwipeableRow>\n    );\n  };\n\n  _onOpen(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID),\n    });\n  }\n\n  _onClose(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null),\n    });\n  }\n}\n\nmodule.exports = SwipeableListView;\n"]}