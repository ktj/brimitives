{"version":3,"sources":["node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js"],"names":["NativeModules","require","PermissionsAndroid","PERMISSIONS","READ_CALENDAR","WRITE_CALENDAR","CAMERA","READ_CONTACTS","WRITE_CONTACTS","GET_ACCOUNTS","ACCESS_FINE_LOCATION","ACCESS_COARSE_LOCATION","RECORD_AUDIO","READ_PHONE_STATE","CALL_PHONE","READ_CALL_LOG","WRITE_CALL_LOG","ADD_VOICEMAIL","USE_SIP","PROCESS_OUTGOING_CALLS","BODY_SENSORS","SEND_SMS","RECEIVE_SMS","READ_SMS","RECEIVE_WAP_PUSH","RECEIVE_MMS","READ_EXTERNAL_STORAGE","WRITE_EXTERNAL_STORAGE","RESULTS","GRANTED","DENIED","NEVER_ASK_AGAIN","permission","console","warn","checkPermission","rationale","request","response","shouldShowRequestPermissionRationale","shouldShowRationale","Promise","resolve","reject","DialogManagerAndroid","showAlert","Error","requestPermission","permissions","requestMultiplePermissions","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,eAAgBC,QAAQ,eAAR,CAAtB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DMC,kB;;;;AAIJ,6BAAc;;;;AAIZ,KAAKC,WAAL,CAAmB;AACjBC,cAAe,kCADE;AAEjBC,eAAgB,mCAFC;AAGjBC,OAAQ,2BAHS;AAIjBC,cAAe,kCAJE;AAKjBC,eAAgB,mCALC;AAMjBC,aAAe,iCANE;AAOjBC,qBAAsB,yCAPL;AAQjBC,uBAAwB,2CARP;AASjBC,aAAc,iCATG;AAUjBC,iBAAkB,qCAVD;AAWjBC,WAAY,+BAXK;AAYjBC,cAAe,kCAZE;AAajBC,eAAgB,mCAbC;AAcjBC,cAAe,gDAdE;AAejBC,QAAS,4BAfQ;AAgBjBC,uBAAwB,2CAhBP;AAiBjBC,aAAe,iCAjBE;AAkBjBC,SAAU,6BAlBO;AAmBjBC,YAAa,gCAnBI;AAoBjBC,SAAU,6BApBO;AAqBjBC,iBAAkB,qCArBD;AAsBjBC,YAAa,gCAtBI;AAuBjBC,sBAAuB,0CAvBN;AAwBjBC,uBAAwB,2CAxBP,CAAnB;;;AA2BA,KAAKC,OAAL,CAAe;AACbC,QAAS,SADI;AAEbC,OAAQ,QAFK;AAGbC,gBAAiB,iBAHJ,CAAf;;AAKD,C;;;;;;;;;;AAUeC,U,CAAuC;AACrDC,QAAQC,IAAR,CAAa,4FAAb;AACA,MAAOlC,eAAcE,kBAAd,CAAiCiC,eAAjC,CAAiDH,UAAjD,CAAP;AACD,C;;;;;;AAMKA,U,CAAuC;AAC3C,MAAOhC,eAAcE,kBAAd,CAAiCiC,eAAjC,CAAiDH,UAAjD,CAAP;AACD,C;;;;;;;;;;;;;;;;AAgBuBA,U,CAAoBI,S;AAC1CH,QAAQC,IAAR,CAAa,gGAAb,E;AACuB,KAAKG,OAAL,CAAaL,UAAb,CAAyBI,SAAzB,C,SAAjBE,Q;AACEA,WAAa,KAAKV,OAAL,CAAaC,O;;;;;;;;;;;;;AAatBG,U,CAAoBI,S;AAC5BA,S;AACgCpC,cAAcE,kBAAd,CAAiCqC,oCAAjC,CAAsEP,UAAtE,C,SAA5BQ,mB;;AAEFA,mB;AACK,GAAIC,QAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB;AACtC3C,cAAc4C,oBAAd,CAAmCC,SAAnC;AACET,SADF;AAEE,iBAAMO,QAAO,GAAIG,MAAJ,CAAU,yBAAV,CAAP,CAAN,EAFF;AAGE,iBAAMJ,SAAQ1C,cAAcE,kBAAd,CAAiC6C,iBAAjC,CAAmDf,UAAnD,CAAR,CAAN,EAHF;;AAKD,CANM,C;;;AASJhC,cAAcE,kBAAd,CAAiC6C,iBAAjC,CAAmDf,UAAnD,C;;;;;;;;AAQOgB,W,CAAgF;AAC9F,MAAOhD,eAAcE,kBAAd,CAAiC+C,0BAAjC,CAA4DD,WAA5D,CAAP;AACD,C;;;AAGH9C,mBAAqB,GAAIA,mBAAJ,EAArB;;AAEAgD,OAAOC,OAAP,CAAiBjD,kBAAjB,C,0GA1HMA,kB","file":"PermissionsAndroid.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PermissionsAndroid\n * @flow\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\n\ntype Rationale = {\n  title: string,\n  message: string,\n}\n\ntype PermissionStatus = 'granted' | 'denied' | 'never_ask_again';\n/**\n * <div class=\"banner-crna-ejected\">\n *   <h3>Project with Native Code Required</h3>\n *   <p>\n *     This API only works in projects made with <code>react-native init</code>\n *     or in those made with Create React Native App which have since ejected. For\n *     more information about ejecting, please see\n *     the <a href=\"https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md\" target=\"_blank\">guide</a> on\n *     the Create React Native App repository.\n *   </p>\n * </div>\n *\n * `PermissionsAndroid` provides access to Android M's new permissions model.\n * Some permissions are granted by default when the application is installed\n * so long as they appear in `AndroidManifest.xml`. However, \"dangerous\"\n * permissions require a dialog prompt. You should use this module for those\n * permissions.\n *\n * On devices before SDK version 23, the permissions are automatically granted\n * if they appear in the manifest, so `check` and `request`\n * should always be true.\n *\n * If a user has previously turned off a permission that you prompt for, the OS\n * will advise your app to show a rationale for needing the permission. The\n * optional `rationale` argument will show a dialog prompt only if\n * necessary - otherwise the normal permission prompt will appear.\n *\n * ### Example\n * ```\n * async function requestCameraPermission() {\n *   try {\n *     const granted = await PermissionsAndroid.request(\n *       PermissionsAndroid.PERMISSIONS.CAMERA,\n *       {\n *         'title': 'Cool Photo App Camera Permission',\n *         'message': 'Cool Photo App needs access to your camera ' +\n *                    'so you can take awesome pictures.'\n *       }\n *     )\n *     if (granted === PermissionsAndroid.RESULTS.GRANTED) {\n *       console.log(\"You can use the camera\")\n *     } else {\n *       console.log(\"Camera permission denied\")\n *     }\n *   } catch (err) {\n *     console.warn(err)\n *   }\n * }\n * ```\n */\n\nclass PermissionsAndroid {\n  PERMISSIONS: Object;\n  RESULTS: Object;\n\n  constructor() {\n    /**\n     * A list of specified \"dangerous\" permissions that require prompting the user\n     */\n    this.PERMISSIONS = {\n      READ_CALENDAR: 'android.permission.READ_CALENDAR',\n      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',\n      CAMERA: 'android.permission.CAMERA',\n      READ_CONTACTS: 'android.permission.READ_CONTACTS',\n      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',\n      GET_ACCOUNTS:  'android.permission.GET_ACCOUNTS',\n      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',\n      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',\n      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',\n      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',\n      CALL_PHONE: 'android.permission.CALL_PHONE',\n      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',\n      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',\n      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',\n      USE_SIP: 'android.permission.USE_SIP',\n      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',\n      BODY_SENSORS:  'android.permission.BODY_SENSORS',\n      SEND_SMS: 'android.permission.SEND_SMS',\n      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',\n      READ_SMS: 'android.permission.READ_SMS',\n      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',\n      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',\n      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',\n      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',\n    };\n\n    this.RESULTS = {\n      GRANTED: 'granted',\n      DENIED: 'denied',\n      NEVER_ASK_AGAIN: 'never_ask_again',\n    };\n  }\n\n  /**\n   * DEPRECATED - use check\n   *\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * @deprecated\n   */\n  checkPermission(permission: string) : Promise<boolean> {\n    console.warn('\"PermissionsAndroid.checkPermission\" is deprecated. Use \"PermissionsAndroid.check\" instead');\n    return NativeModules.PermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   */\n  check(permission: string) : Promise<boolean> {\n    return NativeModules.PermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * DEPRECATED - use request\n   *\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * boolean value indicating whether the user allowed or denied the request\n   *\n   * If the optional rationale argument is included (which is an object with a\n   * `title` and `message`), this function checks with the OS whether it is\n   * necessary to show a dialog explaining why the permission is needed\n   * (https://developer.android.com/training/permissions/requesting.html#explain)\n   * and then shows the system permission dialog\n   *\n   * @deprecated\n   */\n  async requestPermission(permission: string, rationale?: Rationale) : Promise<boolean> {\n    console.warn('\"PermissionsAndroid.requestPermission\" is deprecated. Use \"PermissionsAndroid.request\" instead');\n    const response = await this.request(permission, rationale);\n    return (response === this.RESULTS.GRANTED);\n  }\n\n  /**\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * string value indicating whether the user allowed or denied the request\n   *\n   * If the optional rationale argument is included (which is an object with a\n   * `title` and `message`), this function checks with the OS whether it is\n   * necessary to show a dialog explaining why the permission is needed\n   * (https://developer.android.com/training/permissions/requesting.html#explain)\n   * and then shows the system permission dialog\n   */\n  async request(permission: string, rationale?: Rationale) : Promise<PermissionStatus> {\n    if (rationale) {\n      const shouldShowRationale = await NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission);\n\n      if (shouldShowRationale) {\n        return new Promise((resolve, reject) => {\n          NativeModules.DialogManagerAndroid.showAlert(\n            rationale,\n            () => reject(new Error('Error showing rationale')),\n            () => resolve(NativeModules.PermissionsAndroid.requestPermission(permission))\n          );\n        });\n      }\n    }\n    return NativeModules.PermissionsAndroid.requestPermission(permission);\n  }\n\n  /**\n   * Prompts the user to enable multiple permissions in the same dialog and\n   * returns an object with the permissions as keys and strings as values\n   * indicating whether the user allowed or denied the request\n   */\n  requestMultiple(permissions: Array<string>) : Promise<{[permission: string]: PermissionStatus}> {\n    return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);\n  }\n}\n\nPermissionsAndroid = new PermissionsAndroid();\n\nmodule.exports = PermissionsAndroid;\n"]}