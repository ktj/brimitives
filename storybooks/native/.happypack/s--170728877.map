{"version":3,"sources":["node_modules/react-native/Libraries/ReactNative/AppRegistry.js"],"names":["BatchedBridge","require","BugReporting","NativeModules","ReactNative","SceneTracker","infoLog","invariant","renderApplication","runnables","runCount","sections","tasks","Map","componentProviderInstrumentationHook","component","wrapperComponentProvider","AppRegistry","setWrapperComponentProvider","provider","registerConfig","config","forEach","appConfig","run","registerRunnable","appKey","registerComponent","section","componentProvider","appParameters","initialProps","rootTag","registerSection","getAppKeys","Object","keys","getSectionKeys","getSections","getRunnable","getRegistry","setComponentProviderInstrumentationHook","hook","runApplication","msg","JSON","stringify","String","__DEV__","addSource","setActiveScene","name","unmountApplicationComponentAtRootTag","unmountComponentAtNodeAndRemoveContainer","registerHeadlessTask","taskKey","task","has","console","warn","set","startHeadlessTask","taskId","data","taskProvider","get","Error","then","HeadlessJsTaskSupport","notifyTaskFinished","catch","error","reason","registerCallableModule","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,eAAgBC,QAAQ,eAAR,CAAtB;AACA,GAAMC,cAAeD,QAAQ,cAAR,CAArB;AACA,GAAME,eAAgBF,QAAQ,eAAR,CAAtB;AACA,GAAMG,aAAcH,QAAQ,aAAR,CAApB;AACA,GAAMI,cAAeJ,QAAQ,cAAR,CAArB;;AAEA,GAAMK,SAAUL,QAAQ,SAAR,CAAhB;AACA,GAAMM,WAAYN,QAAQ,oBAAR,CAAlB;AACA,GAAMO,mBAAoBP,QAAQ,mBAAR,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,GAAMQ,WAAuB,EAA7B;AACA,GAAIC,UAAW,CAAf;AACA,GAAMC,UAAsB,EAA5B;AACA,GAAMC,OAAmC,GAAIC,IAAJ,EAAzC;AACA,GAAIC;AACF,8CAACC,SAAD,QAAkCA,YAAlC,EADF;;AAGA,GAAIC,gCAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,GAAMC,aAAc;AAClBC,2BADkB,sCACUC,QADV,CAC8C;AAC9DH,yBAA2BG,QAA3B;AACD,CAHiB;;AAKlBC,cALkB,yBAKHC,MALG,CAK6B;AAC7CA,OAAOC,OAAP,CAAe,SAACC,SAAD,CAAe;AAC5B,GAAIA,UAAUC,GAAd,CAAmB;AACjBP,YAAYQ,gBAAZ,CAA6BF,UAAUG,MAAvC,CAA+CH,UAAUC,GAAzD;AACD,CAFD,IAEO;AACLjB;AACEgB,UAAUR,SAAV,EAAuB,IADzB;AAEE;AACA,oDAHF;AAIEQ,UAAUG,MAJZ;;AAMAT,YAAYU,iBAAZ;AACEJ,UAAUG,MADZ;AAEEH,UAAUR,SAFZ;AAGEQ,UAAUK,OAHZ;;AAKD;AACF,CAhBD;AAiBD,CAvBiB;;AAyBlBD,iBAzBkB;AA0BhBD,MA1BgB;AA2BhBG,iBA3BgB;AA4BhBD,OA5BgB;AA6BR;AACRnB,UAAUiB,MAAV,EAAoB;AAClBG,mCADkB;AAElBL,IAAK,aAACM,aAAD;AACHtB;AACEM,qCAAqCe,iBAArC,CADF;AAEEC,cAAcC,YAFhB;AAGED,cAAcE,OAHhB;AAIEhB,0BAA4BA,yBAAyBc,aAAzB,CAJ9B,CADG,GAFa,CAApB;;;AAUA,GAAIF,OAAJ,CAAa;AACXjB,SAASe,MAAT,EAAmBjB,UAAUiB,MAAV,CAAnB;AACD;AACD,MAAOA,OAAP;AACD,CA5CiB;;AA8ClBD,gBA9CkB,2BA8CDC,MA9CC,CA8CeF,GA9Cf,CA8CsC;AACtDf,UAAUiB,MAAV,EAAoB,CAACF,OAAD,CAApB;AACA,MAAOE,OAAP;AACD,CAjDiB;;AAmDlBO,eAnDkB,0BAmDFP,MAnDE,CAmDcX,SAnDd,CAmDkD;AAClEE,YAAYU,iBAAZ,CAA8BD,MAA9B,CAAsCX,SAAtC,CAAiD,IAAjD;AACD,CArDiB;;AAuDlBmB,UAvDkB,sBAuDU;AAC1B,MAAOC,QAAOC,IAAP,CAAY3B,SAAZ,CAAP;AACD,CAzDiB;;AA2DlB4B,cA3DkB,0BA2Dc;AAC9B,MAAOF,QAAOC,IAAP,CAAYzB,QAAZ,CAAP;AACD,CA7DiB;;AA+DlB2B,WA/DkB,uBA+DO;AACvB;AACK3B,QADL;;AAGD,CAnEiB;;AAqElB4B,WArEkB,sBAqENb,MArEM,CAqEqB;AACrC,MAAOjB,WAAUiB,MAAV,CAAP;AACD,CAvEiB;;AAyElBc,WAzEkB,uBAyEM;AACtB,MAAO;AACL7B,SAAUM,YAAYoB,cAAZ,EADL;AAEL5B,sBAAeA,SAAf,CAFK,CAAP;;AAID,CA9EiB;;AAgFlBgC,uCAhFkB,kDAgFsBC,IAhFtB,CAgFkE;AAClF5B,qCAAuC4B,IAAvC;AACD,CAlFiB;;AAoFlBC,cApFkB,yBAoFHjB,MApFG,CAoFaI,aApFb,CAoFuC;AACvD,GAAMc;AACJ,wBAA0BlB,MAA1B,CAAmC,oBAAnC;AACAmB,KAAKC,SAAL,CAAehB,aAAf,CADA,CACgC,IADhC;AAEA,cAFA,CAEiBiB,OAAOC,OAAP,CAFjB;AAGA,kCAHA,EAGsCA,QAAU,IAAV,CAAiB,KAHvD;AAIA,kCAJA,EAIsCA,QAAU,KAAV,CAAkB,IAJxD,CADF;AAMA1C,QAAQsC,GAAR;AACA1C,aAAa+C,SAAb,CAAuB,6BAA+BvC,UAAtD,CAAkE,iBAAMkC,IAAN,EAAlE;AACArC;AACEE,UAAUiB,MAAV,GAAqBjB,UAAUiB,MAAV,EAAkBF,GADzC;AAEE,eAAiBE,MAAjB,CAA0B,+BAA1B;AACA,mEADA;AAEA,+DAFA;AAGA,kEAHA;AAIA,oEAJA;AAKA,8DALA;AAMA,qEANA;AAOA,oCAPA;AAQA,6DARA;AASA,sEAXF;;;AAcArB,aAAa6C,cAAb,CAA4B,CAACC,KAAMzB,MAAP,CAA5B;AACAjB,UAAUiB,MAAV,EAAkBF,GAAlB,CAAsBM,aAAtB;AACD,CA7GiB;;AA+GlBsB,oCA/GkB,+CA+GmBpB,OA/GnB,CA+G0C;AAC1D5B,YAAYiD,wCAAZ,CAAqDrB,OAArD;AACD,CAjHiB;;;;;;;;;AA0HlBsB,oBA1HkB,+BA0HGC,OA1HH,CA0HoBC,IA1HpB,CA0H8C;AAC9D,GAAI5C,MAAM6C,GAAN,CAAUF,OAAV,CAAJ,CAAwB;AACtBG,QAAQC,IAAR,8DAAyEJ,OAAzE;AACD;AACD3C,MAAMgD,GAAN,CAAUL,OAAV,CAAmBC,IAAnB;AACD,CA/HiB;;;;;;;;;AAwIlBK,iBAxIkB,4BAwIAC,MAxIA,CAwIgBP,OAxIhB,CAwIiCQ,IAxIjC,CAwIkD;AAClE,GAAMC,cAAepD,MAAMqD,GAAN,CAAUV,OAAV,CAArB;AACA,GAAI,CAACS,YAAL,CAAmB;AACjB,KAAM,IAAIE,MAAJ,+BAAwCX,OAAxC,CAAN;AACD;AACDS,eAAeD,IAAf;AACGI,IADH,CACQ,iBAAMhE,eAAciE,qBAAd,CAAoCC,kBAApC,CAAuDP,MAAvD,CAAN,EADR;AAEGQ,KAFH,CAES,gBAAU;AACfZ,QAAQa,KAAR,CAAcC,MAAd;AACArE,cAAciE,qBAAd,CAAoCC,kBAApC,CAAuDP,MAAvD;AACD,CALH;AAMD,CAnJiB,CAApB;;;;AAuJA9D,cAAcyE,sBAAd;AACE,aADF;AAEExD,WAFF;;;AAKAyD,OAAOC,OAAP,CAAiB1D,WAAjB,C,0GA/LMR,S,8JACFC,Q,6JACEC,Q,6JACAC,K,0JACFE,oC,yLAGAE,wB,6KA4BEC,W","file":"AppRegistry.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AppRegistry\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\nconst BugReporting = require('BugReporting');\nconst NativeModules = require('NativeModules');\nconst ReactNative = require('ReactNative');\nconst SceneTracker = require('SceneTracker');\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\nconst renderApplication = require('renderApplication');\n\ntype Task = (taskData: any) => Promise<void>;\ntype TaskProvider = () => Task;\nexport type ComponentProvider = () => ReactClass<any>;\nexport type ComponentProviderInstrumentationHook =\n  (component: ComponentProvider) => ReactClass<any>;\nexport type AppConfig = {\n  appKey: string,\n  component?: ComponentProvider,\n  run?: Function,\n  section?: boolean,\n};\nexport type Runnable = {\n  component?: ComponentProvider,\n  run: Function,\n};\nexport type Runnables = {\n  [appKey: string]: Runnable,\n};\nexport type Registry = {\n  sections: Array<string>,\n  runnables: Runnables,\n};\nexport type WrapperComponentProvider = any => ReactClass<*>;\n\nconst runnables: Runnables = {};\nlet runCount = 1;\nconst sections: Runnables = {};\nconst tasks: Map<string, TaskProvider> = new Map();\nlet componentProviderInstrumentationHook: ComponentProviderInstrumentationHook =\n  (component: ComponentProvider) => component();\n\nlet wrapperComponentProvider: ?WrapperComponentProvider;\n\n/**\n * <div class=\"banner-crna-ejected\">\n *   <h3>Project with Native Code Required</h3>\n *   <p>\n *     This API only works in projects made with <code>react-native init</code>\n *     or in those made with Create React Native App which have since ejected. For\n *     more information about ejecting, please see\n *     the <a href=\"https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md\" target=\"_blank\">guide</a> on\n *     the Create React Native App repository.\n *   </p>\n * </div>\n *\n * `AppRegistry` is the JS entry point to running all React Native apps.  App\n * root components should register themselves with\n * `AppRegistry.registerComponent`, then the native system can load the bundle\n * for the app and then actually run the app when it's ready by invoking\n * `AppRegistry.runApplication`.\n *\n * To \"stop\" an application when a view should be destroyed, call\n * `AppRegistry.unmountApplicationComponentAtRootTag` with the tag that was\n * passed into `runApplication`. These should always be used as a pair.\n *\n * `AppRegistry` should be `require`d early in the `require` sequence to make\n * sure the JS execution environment is setup before other modules are\n * `require`d.\n */\nconst AppRegistry = {\n  setWrapperComponentProvider(provider: WrapperComponentProvider) {\n    wrapperComponentProvider = provider;\n  },\n\n  registerConfig(config: Array<AppConfig>): void {\n    config.forEach((appConfig) => {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(\n          appConfig.component != null,\n          'AppRegistry.registerConfig(...): Every config is expected to set ' +\n          'either `run` or `component`, but `%s` has neither.',\n          appConfig.appKey\n        );\n        AppRegistry.registerComponent(\n          appConfig.appKey,\n          appConfig.component,\n          appConfig.section,\n        );\n      }\n    });\n  },\n\n  registerComponent(\n    appKey: string,\n    componentProvider: ComponentProvider,\n    section?: boolean,\n  ): string {\n    runnables[appKey] = {\n      componentProvider,\n      run: (appParameters) =>\n        renderApplication(\n          componentProviderInstrumentationHook(componentProvider),\n          appParameters.initialProps,\n          appParameters.rootTag,\n          wrapperComponentProvider && wrapperComponentProvider(appParameters),\n        )\n    };\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n    return appKey;\n  },\n\n  registerRunnable(appKey: string, run: Function): string {\n    runnables[appKey] = {run};\n    return appKey;\n  },\n\n  registerSection(appKey: string, component: ComponentProvider): void {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n\n  getAppKeys(): Array<string> {\n    return Object.keys(runnables);\n  },\n\n  getSectionKeys(): Array<string> {\n    return Object.keys(sections);\n  },\n\n  getSections(): Runnables {\n    return {\n      ...sections\n    };\n  },\n\n  getRunnable(appKey: string): ?Runnable {\n    return runnables[appKey];\n  },\n\n  getRegistry(): Registry {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: {...runnables},\n    };\n  },\n\n  setComponentProviderInstrumentationHook(hook: ComponentProviderInstrumentationHook) {\n    componentProviderInstrumentationHook = hook;\n  },\n\n  runApplication(appKey: string, appParameters: any): void {\n    const msg =\n      'Running application \"' + appKey + '\" with appParams: ' +\n      JSON.stringify(appParameters) + '. ' +\n      '__DEV__ === ' + String(__DEV__) +\n      ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') +\n      ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');\n    infoLog(msg);\n    BugReporting.addSource('AppRegistry.runApplication' + runCount++, () => msg);\n    invariant(\n      runnables[appKey] && runnables[appKey].run,\n      'Application ' + appKey + ' has not been registered.\\n\\n' +\n      'Hint: This error often happens when you\\'re running the packager ' +\n      '(local dev server) from a wrong folder. For example you have ' +\n      'multiple apps and the packager is still running for the app you ' +\n      'were working on before.\\nIf this is the case, simply kill the old ' +\n      'packager instance (e.g. close the packager terminal window) ' +\n      'and start the packager in the correct app folder (e.g. cd into app ' +\n      'folder and run \\'npm start\\').\\n\\n' +\n      'This error can also happen due to a require() error during ' +\n      'initialization or failure to call AppRegistry.registerComponent.\\n\\n'\n    );\n\n    SceneTracker.setActiveScene({name: appKey});\n    runnables[appKey].run(appParameters);\n  },\n\n  unmountApplicationComponentAtRootTag(rootTag: number): void {\n    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n\n  /**\n   * Register a headless task. A headless task is a bit of code that runs without a UI.\n   * @param taskKey the key associated with this task\n   * @param task    a promise returning function that takes some data passed from the native side as\n   *                the only argument; when the promise is resolved or rejected the native side is\n   *                notified of this event and it may decide to destroy the JS context.\n   */\n  registerHeadlessTask(taskKey: string, task: TaskProvider): void {\n    if (tasks.has(taskKey)) {\n      console.warn(`registerHeadlessTask called multiple times for same key '${taskKey}'`);\n    }\n    tasks.set(taskKey, task);\n  },\n\n  /**\n   * Only called from native code. Starts a headless task.\n   *\n   * @param taskId the native id for this task instance to keep track of its execution\n   * @param taskKey the key for the task to start\n   * @param data the data to pass to the task\n   */\n  startHeadlessTask(taskId: number, taskKey: string, data: any): void {\n    const taskProvider = tasks.get(taskKey);\n    if (!taskProvider) {\n      throw new Error(`No task registered for key ${taskKey}`);\n    }\n    taskProvider()(data)\n      .then(() => NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId))\n      .catch(reason => {\n        console.error(reason);\n        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      });\n  }\n\n};\n\nBatchedBridge.registerCallableModule(\n  'AppRegistry',\n  AppRegistry\n);\n\nmodule.exports = AppRegistry;\n"]}