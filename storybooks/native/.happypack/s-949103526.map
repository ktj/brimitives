{"version":3,"sources":["node_modules/react-native/Libraries/Network/XHRInterceptor.js"],"names":["XMLHttpRequest","require","originalXHROpen","prototype","open","originalXHRSend","send","originalXHRSetRequestHeader","setRequestHeader","openCallback","sendCallback","requestHeaderCallback","headerReceivedCallback","responseCallback","isInterceptorEnabled","XHRInterceptor","setOpenCallback","callback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","enableInterception","method","url","apply","arguments","header","value","data","addEventListener","readyState","HEADERS_RECEIVED","contentTypeString","getResponseHeader","contentLengthString","responseContentType","responseSize","split","parseInt","getAllResponseHeaders","DONE","status","timeout","response","responseURL","responseType","disableInterception","module","exports"],"mappings":"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","file":"XHRInterceptor.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule XHRInterceptor\n */\n 'use strict';\n\nconst XMLHttpRequest = require('XMLHttpRequest');\nconst originalXHROpen = XMLHttpRequest.prototype.open;\nconst originalXHRSend = XMLHttpRequest.prototype.send;\nconst originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n\nvar openCallback;\nvar sendCallback;\nvar requestHeaderCallback;\nvar headerReceivedCallback;\nvar responseCallback;\n\nvar isInterceptorEnabled = false;\n\n/**\n * A network interceptor which monkey-patches XMLHttpRequest methods\n * to gather all network requests/responses, in order to show their\n * information in the React Native inspector development tool.\n * This supports interception with XMLHttpRequest API, including Fetch API\n * and any other third party libraries that depend on XMLHttpRequest.\n */\nconst XHRInterceptor = {\n  /**\n   * Invoked before XMLHttpRequest.open(...) is called.\n   */\n  setOpenCallback(callback) {\n    openCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.send(...) is called.\n   */\n  setSendCallback(callback) {\n    sendCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n   */\n  setHeaderReceivedCallback(callback) {\n    headerReceivedCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.DONE.\n   */\n  setResponseCallback(callback) {\n    responseCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n   */\n  setRequestHeaderCallback(callback) {\n    requestHeaderCallback = callback;\n  },\n\n  isInterceptorEnabled() {\n    return isInterceptorEnabled;\n  },\n\n  enableInterception() {\n    if (isInterceptorEnabled) {\n      return;\n    }\n    // Override `open` method for all XHR requests to intercept the request\n    // method and url, then pass them through the `openCallback`.\n    XMLHttpRequest.prototype.open = function(method, url) {\n      if (openCallback) {\n        openCallback(method, url, this);\n      }\n      originalXHROpen.apply(this, arguments);\n    };\n\n    // Override `setRequestHeader` method for all XHR requests to intercept\n    // the request headers, then pass them through the `requestHeaderCallback`.\n    XMLHttpRequest.prototype.setRequestHeader = function(header, value) {\n      if (requestHeaderCallback) {\n        requestHeaderCallback(header, value, this);\n      }\n      originalXHRSetRequestHeader.apply(this, arguments);\n    };\n\n    // Override `send` method of all XHR requests to intercept the data sent,\n    // register listeners to intercept the response, and invoke the callbacks.\n    XMLHttpRequest.prototype.send = function(data) {\n      if (sendCallback) {\n        sendCallback(data, this);\n      }\n      if (this.addEventListener) {\n        this.addEventListener('readystatechange', () => {\n          if (!isInterceptorEnabled) {\n            return;\n          }\n          if (this.readyState === this.HEADERS_RECEIVED) {\n            const contentTypeString = this.getResponseHeader('Content-Type');\n            const contentLengthString =\n              this.getResponseHeader('Content-Length');\n            let responseContentType, responseSize;\n            if (contentTypeString) {\n              responseContentType = contentTypeString.split(';')[0];\n            }\n            if (contentLengthString) {\n              responseSize = parseInt(contentLengthString, 10);\n            }\n            if (headerReceivedCallback) {\n              headerReceivedCallback(\n                responseContentType,\n                responseSize,\n                this.getAllResponseHeaders(),\n                this,\n              );\n            }\n          }\n          if (this.readyState === this.DONE) {\n            if (responseCallback) {\n              responseCallback(\n                this.status,\n                this.timeout,\n                this.response,\n                this.responseURL,\n                this.responseType,\n                this,\n              );\n            }\n          }\n        }, false);\n      }\n      originalXHRSend.apply(this, arguments);\n    };\n    isInterceptorEnabled = true;\n  },\n\n  // Unpatch XMLHttpRequest methods and remove the callbacks.\n  disableInterception() {\n    if (!isInterceptorEnabled) {\n      return;\n    }\n    isInterceptorEnabled = false;\n    XMLHttpRequest.prototype.send = originalXHRSend;\n    XMLHttpRequest.prototype.open = originalXHROpen;\n    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n    responseCallback = null;\n    openCallback = null;\n    sendCallback = null;\n    headerReceivedCallback = null;\n    requestHeaderCallback = null;\n  },\n};\n\nmodule.exports = XHRInterceptor;\n"]}