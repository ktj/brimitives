{"version":3,"sources":["node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js"],"names":["ListViewDataSource","require","SwipeableListViewDataSource","params","_dataSource","getRowData","getSectionHeaderData","rowHasChanged","row1","row2","id","_previousOpenRowID","_openRowID","sectionHeaderHasChanged","dataBlob","sectionIdentities","rowIdentities","cloneWithRowsAndSections","_dataBlob","Object","keys","rowID","module","exports"],"mappings":";;;;;;;;;;AAUA,a;;AAEA,GAAMA,oBAAqBC,QAAQ,oBAAR,CAA3B,C;;;;;;;;;;AAUMC,2B;;;;;;;;;;AAUJ,qCAAYC,MAAZ,CAA4B;AAC1B,KAAKC,WAAL,CAAmB,GAAIJ,mBAAJ,CAAuB;AACxCK,WAAYF,OAAOE,UADqB;AAExCC,qBAAsBH,OAAOG,oBAFW;AAGxCC,cAAe,uBAACC,IAAD,CAAOC,IAAP,CAAgB;;;;;AAK7B;AACGD,KAAKE,EAAL,GAAY,MAAKC,kBAAjB,EAAuCF,KAAKC,EAAL,GAAY,MAAKE,UAAzD;AACCJ,KAAKE,EAAL,GAAY,MAAKC,kBAAjB,EAAuCF,KAAKC,EAAL,GAAY,MAAKE,UADzD;AAEAT,OAAOI,aAAP,CAAqBC,IAArB,CAA2BC,IAA3B,CAHF;;AAKD,CAbuC;AAcxCI,wBAAyBV,OAAOU,uBAdQ,CAAvB,CAAnB;;AAgBD,C;;;AAGCC,Q;AACAC,iB;AACAC,a;AAC6B;AAC7B,KAAKZ,WAAL,CAAmB,KAAKA,WAAL,CAAiBa,wBAAjB;AACjBH,QADiB;AAEjBC,iBAFiB;AAGjBC,aAHiB,CAAnB;;;AAMA,KAAKE,SAAL,CAAiBJ,QAAjB;AACA,KAAKE,aAAL,CAAqB,KAAKZ,WAAL,CAAiBY,aAAtC;AACA,KAAKD,iBAAL,CAAyB,KAAKX,WAAL,CAAiBW,iBAA1C;;AAEA,MAAO,KAAP;AACD,C;;;AAGmC;AAClC,MAAO,MAAKX,WAAZ;AACD,C;;AAEuB;AACtB,MAAO,MAAKQ,UAAZ;AACD,C;;AAEwB;;;;;;AAMvB,GAAI,KAAKI,aAAT,CAAwB;AACtB,MAAO,MAAKA,aAAL,CAAmB,CAAnB,GAAyB,KAAKA,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CAAhC;AACD;AACD,MAAOG,QAAOC,IAAP,CAAY,KAAKF,SAAjB,EAA4B,CAA5B,CAAP;AACD,C;;AAEYG,K,CAA4C;AACvD,KAAKV,kBAAL,CAA0B,KAAKC,UAA/B;AACA,KAAKA,UAAL,CAAkBS,KAAlB;;AAEA,KAAKjB,WAAL,CAAmB,KAAKA,WAAL,CAAiBa,wBAAjB;AACjB,KAAKC,SADY;AAEjB,KAAKH,iBAFY;AAGjB,KAAKC,aAHY,CAAnB;;;AAMA,MAAO,KAAP;AACD,C;;;AAGHM,OAAOC,OAAP,CAAiBrB,2BAAjB,C,0GAlFMA,2B","file":"SwipeableListViewDataSource.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SwipeableListViewDataSource\n */\n'use strict';\n\nconst ListViewDataSource = require('ListViewDataSource');\n\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\nclass SwipeableListViewDataSource {\n  _previousOpenRowID: string;\n  _openRowID: string;\n\n  _dataBlob: any;\n  _dataSource: ListViewDataSource;\n\n  rowIdentities: Array<Array<string>>;\n  sectionIdentities: Array<string>;\n\n  constructor(params: Object) {\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: (row1, row2) => {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return (\n          (row1.id !== this._previousOpenRowID && row2.id === this._openRowID) ||\n          (row1.id === this._previousOpenRowID && row2.id !== this._openRowID) ||\n          params.rowHasChanged(row1, row2)\n        );\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged,\n    });\n  }\n\n  cloneWithRowsAndSections(\n    dataBlob: any,\n    sectionIdentities: ?Array<string>,\n    rowIdentities: ?Array<Array<string>>\n  ): SwipeableListViewDataSource {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(\n      dataBlob,\n      sectionIdentities,\n      rowIdentities\n    );\n\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n\n    return this;\n  }\n\n  // For the actual ListView to use\n  getDataSource(): ListViewDataSource {\n    return this._dataSource;\n  }\n\n  getOpenRowID(): ?string {\n    return this._openRowID;\n  }\n\n  getFirstRowID(): ?string {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n    return Object.keys(this._dataBlob)[0];\n  }\n\n  setOpenRowID(rowID: string): SwipeableListViewDataSource {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(\n      this._dataBlob,\n      this.sectionIdentities,\n      this.rowIdentities\n    );\n\n    return this;\n  }\n}\n\nmodule.exports = SwipeableListViewDataSource;\n"]}