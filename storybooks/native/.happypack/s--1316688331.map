{"version":3,"sources":["node_modules/react-native/Libraries/Components/Slider/Slider.js"],"names":["Image","require","ColorPropType","NativeMethodsMixin","ReactNativeViewAttributes","Platform","React","PropTypes","StyleSheet","ViewPropTypes","createReactClass","requireNativeComponent","Slider","displayName","mixins","propTypes","style","value","number","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","disabled","bool","trackImage","source","minimumTrackImage","maximumTrackImage","thumbImage","thumbTintColor","onValueChange","func","onSlidingComplete","testID","string","getDefaultProps","viewConfig","uiViewClassName","validAttributes","RCTView","render","props","styles","slider","event","userEvent","OS","nativeEvent","fromUser","onChange","create","height","options","nativeOnly","enabled","RCTSlider","module","exports"],"mappings":"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","file":"Slider.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Slider\n * @flow\n */\n'use strict';\n\nvar Image = require('Image');\nvar ColorPropType = require('ColorPropType');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nvar Platform = require('Platform');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar createReactClass = require('create-react-class');\nvar requireNativeComponent = require('requireNativeComponent');\n\ntype Event = Object;\n\n/**\n * A component used to select a single value from a range of values.\n */\n// $FlowFixMe(>=0.41.0)\nvar Slider = createReactClass({\n  displayName: 'Slider',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n\n    /**\n     * Used to style and layout the `Slider`.  See `StyleSheet.js` and\n     * `ViewStylePropTypes.js` for more info.\n     */\n    style: ViewPropTypes.style,\n\n    /**\n     * Initial value of the slider. The value should be between minimumValue\n     * and maximumValue, which default to 0 and 1 respectively.\n     * Default value is 0.\n     *\n     * *This is not a controlled component*, you don't need to update the\n     * value during dragging.\n     */\n    value: PropTypes.number,\n\n    /**\n     * Step value of the slider. The value should be\n     * between 0 and (maximumValue - minimumValue).\n     * Default value is 0.\n     */\n    step: PropTypes.number,\n\n    /**\n     * Initial minimum value of the slider. Default value is 0.\n     */\n    minimumValue: PropTypes.number,\n\n    /**\n     * Initial maximum value of the slider. Default value is 1.\n     */\n    maximumValue: PropTypes.number,\n\n    /**\n     * The color used for the track to the left of the button.\n     * Overrides the default blue gradient image on iOS.\n     */\n    minimumTrackTintColor: ColorPropType,\n\n    /**\n     * The color used for the track to the right of the button.\n     * Overrides the default blue gradient image on iOS.\n     */\n    maximumTrackTintColor: ColorPropType,\n\n    /**\n     * If true the user won't be able to move the slider.\n     * Default value is false.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Assigns a single image for the track. Only static images are supported.\n     * The center pixel of the image will be stretched to fill the track.\n     * @platform ios\n     */\n    trackImage: Image.propTypes.source,\n\n    /**\n     * Assigns a minimum track image. Only static images are supported. The\n     * rightmost pixel of the image will be stretched to fill the track.\n     * @platform ios\n     */\n    minimumTrackImage: Image.propTypes.source,\n\n    /**\n     * Assigns a maximum track image. Only static images are supported. The\n     * leftmost pixel of the image will be stretched to fill the track.\n     * @platform ios\n     */\n    maximumTrackImage: Image.propTypes.source,\n\n    /**\n     * Sets an image for the thumb. Only static images are supported.\n     * @platform ios\n     */\n    thumbImage: Image.propTypes.source,\n\n    /**\n     * Color of the foreground switch grip.\n     * @platform android\n     */\n    thumbTintColor: ColorPropType,\n\n    /**\n     * Callback continuously called while the user is dragging the slider.\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Callback that is called when the user releases the slider,\n     * regardless if the value has changed. The current value is passed\n     * as an argument to the callback handler.\n     */\n    onSlidingComplete: PropTypes.func,\n\n    /**\n     * Used to locate this view in UI automation tests.\n     */\n    testID: PropTypes.string,\n  },\n\n  getDefaultProps: function() : any {\n    return {\n      disabled: false,\n      value: 0,\n      minimumValue: 0,\n      maximumValue: 1,\n      step: 0\n    };\n  },\n\n  viewConfig: {\n    uiViewClassName: 'RCTSlider',\n    validAttributes: {\n      ...ReactNativeViewAttributes.RCTView,\n      value: true\n    }\n  },\n\n  render: function() {\n    const {style, onValueChange, onSlidingComplete, ...props} = this.props;\n    props.style = [styles.slider, style];\n\n    props.onValueChange = onValueChange && ((event: Event) => {\n      let userEvent = true;\n      if (Platform.OS === 'android') {\n        // On Android there's a special flag telling us the user is\n        // dragging the slider.\n        userEvent = event.nativeEvent.fromUser;\n      }\n      onValueChange && userEvent && onValueChange(event.nativeEvent.value);\n    });\n\n    props.onChange = props.onValueChange;\n\n    props.onSlidingComplete = onSlidingComplete && ((event: Event) => {\n      onSlidingComplete && onSlidingComplete(event.nativeEvent.value);\n    });\n\n    return <RCTSlider\n      {...props}\n      enabled={!this.props.disabled}\n      onStartShouldSetResponder={() => true}\n      onResponderTerminationRequest={() => false}\n    />;\n  }\n});\n\nlet styles;\nif (Platform.OS === 'ios') {\n  styles = StyleSheet.create({\n    slider: {\n      height: 40,\n    },\n  });\n} else {\n  styles = StyleSheet.create({\n    slider: {},\n  });\n}\n\nlet options = {};\nif (Platform.OS === 'android') {\n  options = {\n    nativeOnly: {\n      enabled: true,\n    }\n  };\n}\nconst RCTSlider = requireNativeComponent('RCTSlider', Slider, options);\n\nmodule.exports = Slider;\n"]}