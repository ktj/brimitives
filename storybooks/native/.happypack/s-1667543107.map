{"version":3,"sources":["node_modules/react-native/Libraries/Blob/URL.js"],"names":["Blob","require","BlobModule","BLOB_URL_PREFIX","BLOB_URI_SCHEME","BLOB_URI_HOST","URL","Error","blob","blobId","offset","size","url","module","exports"],"mappings":";;;;;;;;;;;;AAYA,a;;AAEA,GAAMA,MAAOC,QAAQ,MAAR,CAAb,C;;AAEuBA,QAAQ,eAAR,C,CAAfC,U,UAAAA,U;;AAER,GAAIC,iBAAkB,IAAtB;;AAEA,GAAI,MAAOD,YAAWE,eAAlB,GAAsC,QAA1C,CAAoD;AAClDD,gBAAkBD,WAAWE,eAAX,CAA6B,GAA/C;AACA,GAAI,MAAOF,YAAWG,aAAlB,GAAoC,QAAxC,CAAkD;AAChDF,sBAAwBD,WAAWG,aAAnC;AACD;AACF,C;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BKC,G;AACJ,cAAc;AACZ,KAAM,IAAIC,MAAJ,CAAU,gDAAV,CAAN;AACD,C;;AAEsBC,I,CAAY;AACjC,GAAIL,kBAAoB,IAAxB,CAA8B;AAC5B,KAAM,IAAII,MAAJ,CAAU,6BAAV,CAAN;AACD;AACD,SAAUJ,eAAV,CAA4BK,KAAKC,MAAjC,YAAkDD,KAAKE,MAAvD,UAAsEF,KAAKG,IAA3E;AACD,C;;AAEsBC,G,CAAa;;AAEnC,C;;;AAGHC,OAAOC,OAAP,CAAiBR,GAAjB,C,0GAlDIH,e,qJAiCEG,G","file":"URL.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule URL\n * @flow\n */\n\n'use strict';\n\nconst Blob = require('Blob');\n\nconst { BlobModule } = require('NativeModules');\n\nlet BLOB_URL_PREFIX = null;\n\nif (typeof BlobModule.BLOB_URI_SCHEME === 'string') {\n  BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';\n  if (typeof BlobModule.BLOB_URI_HOST === 'string') {\n    BLOB_URL_PREFIX += `//${BlobModule.BLOB_URI_HOST}/`;\n  }\n}\n\n/**\n * To allow Blobs be accessed via `content://` URIs,\n * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:\n *\n * ```xml\n * <manifest>\n *   <application>\n *     <provider\n *       android:name=\"com.facebook.react.modules.blob.BlobProvider\"\n *       android:authorities=\"@string/blob_provider_authority\"\n *       android:exported=\"false\"\n *     />\n *   </application>\n * </manifest>\n * ```\n * And then define the `blob_provider_authority` string in `res/values/strings.xml`.\n * Use a dotted name that's entirely unique to your app:\n *\n * ```xml\n * <resources>\n *   <string name=\"blob_provider_authority\">your.app.package.blobs</string>\n * </resources>\n * ```\n */\nclass URL {\n  constructor() {\n    throw new Error('Creating BlobURL objects is not supported yet.');\n  }\n\n  static createObjectURL(blob: Blob) {\n    if (BLOB_URL_PREFIX === null) {\n      throw new Error('Cannot create URL for blob!');\n    }\n    return `${BLOB_URL_PREFIX}${blob.blobId}?offset=${blob.offset}&size=${blob.size}`;\n  }\n\n  static revokeObjectURL(url: string) {\n    // Do nothing.\n  }\n}\n\nmodule.exports = URL;\n"]}