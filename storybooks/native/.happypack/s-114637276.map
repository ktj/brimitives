{"version":3,"sources":["node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","sharedSubscriber","OS","_nativeModule","eventType","listener","context","addListener","count","listeners","length","removeListeners","subscription","module","exports"],"mappings":";;;;;;;;;;;AAWA,a;;AAEA,GAAMA,cAAeC,QAAQ,cAAR,CAArB;AACA,GAAMC,UAAWD,QAAQ,UAAR,CAAjB;AACA,GAAME,uBAAwBF,QAAQ,uBAAR,CAA9B;AACA,GAAMG,WAAYH,QAAQ,oBAAR,CAAlB,C;;;;;;;;AAQMI,kB;;;AAGJ,4BAAYC,YAAZ,CAAkC;AAC1BH,sBAAsBI,gBADI;AAEhC,GAAIL,SAASM,EAAT,GAAgB,KAApB,CAA2B;AACzBJ,UAAUE,YAAV,CAAwB,+BAAxB;AACA,MAAKG,aAAL,CAAqBH,YAArB;AACD,CAL+B;AAMjC,C;;AAEWI,S,CAAmBC,Q,CAAoBC,O,CAAuC;AACxF,GAAIV,SAASM,EAAT,GAAgB,KAApB,CAA2B;AACzB,KAAKC,aAAL,CAAmBI,WAAnB,CAA+BH,SAA/B;AACD;AACD,sIAAyBA,SAAzB,CAAoCC,QAApC,CAA8CC,OAA9C;AACD,C;;AAEkBF,S,CAAmB;AACpCN,UAAUM,SAAV,CAAqB,iCAArB;AACA,GAAIR,SAASM,EAAT,GAAgB,KAApB,CAA2B;AACzB,GAAMM,OAAQ,KAAKC,SAAL,CAAeL,SAAf,EAA0BM,MAAxC;AACA,KAAKP,aAAL,CAAmBQ,eAAnB,CAAmCH,KAAnC;AACD;AACD,sIAAyBJ,SAAzB;AACD,C;;AAEkBQ,Y,CAAmC;AACpD,GAAIhB,SAASM,EAAT,GAAgB,KAApB,CAA2B;AACzB,KAAKC,aAAL,CAAmBQ,eAAnB,CAAmC,CAAnC;AACD;AACD,sIAAyBC,YAAzB;AACD,C,gCAhC8BlB,Y;;;AAmCjCmB,OAAOC,OAAP,CAAiBf,kBAAjB,C,0GAnCMA,kB","file":"NativeEventEmitter.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NativeEventEmitter\n * @flow\n */\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst Platform = require('Platform');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\n/**\n * Abstract base class for implementing event-emitting modules. This implements\n * a subset of the standard EventEmitter node module API.\n */\nclass NativeEventEmitter extends EventEmitter {\n  _nativeModule: Object;\n\n  constructor(nativeModule: Object) {\n    super(RCTDeviceEventEmitter.sharedSubscriber);\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule, 'Native module cannot be null.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n    if (Platform.OS === 'ios') {\n      this._nativeModule.addListener(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: string) {\n    invariant(eventType, 'eventType argument is required.');\n    if (Platform.OS === 'ios') {\n      const count = this.listeners(eventType).length;\n      this._nativeModule.removeListeners(count);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (Platform.OS === 'ios') {\n      this._nativeModule.removeListeners(1);\n    }\n    super.removeSubscription(subscription);\n  }\n}\n\nmodule.exports = NativeEventEmitter;\n"]}