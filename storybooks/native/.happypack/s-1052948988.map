{"version":3,"sources":["node_modules/react-native/Libraries/Utilities/PerformanceLogger.js"],"names":["Systrace","require","infoLog","performanceNow","global","nativePerformanceNow","timespans","extras","cookies","PRINT_TO_CONSOLE","PerformanceLogger","addTimespan","key","lengthInMs","description","__DEV__","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","timespan","endTime","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","currentValue","attemptedValue","getExtras","module","exports"],"mappings":"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","file":"PerformanceLogger.js","sourceRoot":"/home/phz/workspace/brimitives/storybooks/native","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PerformanceLogger\n * @flow\n * @format\n */\n'use strict';\n\nconst Systrace = require('Systrace');\n\nconst infoLog = require('infoLog');\nconst performanceNow =\n  global.nativePerformanceNow || require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n};\n\nlet timespans: {[key: string]: Timespan} = {};\nlet extras: {[key: string]: any} = {};\nconst cookies: {[key: string]: number} = {};\n\nconst PRINT_TO_CONSOLE = false;\n\n/**\n * This is meant to collect and log performance data in production, which means\n * it needs to have minimal overhead.\n */\nconst PerformanceLogger = {\n  addTimespan(key: string, lengthInMs: number, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      totalTime: lengthInMs,\n    };\n  },\n\n  startTimespan(key: string, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      startTime: performanceNow(),\n    };\n    cookies[key] = Systrace.beginAsyncEvent(key);\n    if (__DEV__ && PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  },\n\n  stopTimespan(key: string) {\n    const timespan = timespans[key];\n    if (!timespan || !timespan.startTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endTime = performanceNow();\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (__DEV__ && PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    Systrace.endAsyncEvent(key, cookies[key]);\n    delete cookies[key];\n  },\n\n  clear() {\n    timespans = {};\n    extras = {};\n  },\n\n  clearCompleted() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        delete timespans[key];\n      }\n    }\n    extras = {};\n  },\n\n  clearExceptTimespans(keys: Array<string>) {\n    timespans = Object.keys(timespans).reduce(function(previous, key) {\n      if (keys.indexOf(key) !== -1) {\n        previous[key] = timespans[key];\n      }\n      return previous;\n    }, {});\n    extras = {};\n  },\n\n  currentTimestamp() {\n    return performanceNow();\n  },\n\n  getTimespans() {\n    return timespans;\n  },\n\n  hasTimespan(key: string) {\n    return !!timespans[key];\n  },\n\n  logTimespans() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        infoLog(key + ': ' + timespans[key].totalTime + 'ms');\n      }\n    }\n  },\n\n  addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n    for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n      const label = labels[ii / 2];\n      PerformanceLogger.addTimespan(\n        label,\n        newTimespans[ii + 1] - newTimespans[ii],\n        label,\n      );\n    }\n  },\n\n  setExtra(key: string, value: any) {\n    if (extras[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    extras[key] = value;\n  },\n\n  getExtras() {\n    return extras;\n  },\n};\n\nmodule.exports = PerformanceLogger;\n"]}